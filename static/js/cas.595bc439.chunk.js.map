{"version":3,"file":"static/js/cas.595bc439.chunk.js","mappings":"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","sources":["../node_modules/nerdamer/nerdamer.core.js"],"sourcesContent":["/*\r\n * Author : Martin Donk\r\n * Website : http://www.nerdamer.com\r\n * Email : martin.r.donk@gmail.com\r\n * Source : https://github.com/jiggzson/nerdamer\r\n */\r\n\r\n/* global trig, trigh, Infinity, define, arguments2Array, NaN */\r\n//externals ====================================================================\r\n/* BigInterger.js v1.6.40 https://github.com/peterolson/BigInteger.js/blob/master/LICENSE */\r\n//var nerdamerBigInt = typeof nerdamerBigInt !== 'undefined' ? nerdamerBigInt : require(\"big-integer\");\r\n/* big.js v5.2.2 https://github.com/MikeMcl/big.js/LICENCE */\r\n//var nerdamerBigDecimal = typeof nerdamerBigDecimal !== 'undefined' ? nerdamerBigDecimal : require('big.js');\r\n\r\nvar nerdamer = (function (imports) {\r\n    \"use strict\"; \r\n\r\n//version ======================================================================\r\n    var version = '1.1.13';\r\n\r\n//inits ========================================================================\r\n    var _ = new Parser(); //nerdamer's parser\r\n\r\n    //import bigInt\r\n    var bigInt = imports.bigInt;\r\n    var bigDec = imports.bigDec;\r\n\r\n    //set the precision to js precision\r\n    bigDec.set({\r\n        precision: 250\r\n    });\r\n\r\n    var Groups = {};\r\n\r\n    //container of pregenerated primes\r\n    var PRIMES = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113\r\n                , 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251,\r\n        257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\r\n        401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557,\r\n        563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\r\n        709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863,\r\n        877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031,\r\n        1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171,\r\n        1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303,\r\n        1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471,\r\n        1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607,\r\n        1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753,\r\n        1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931,\r\n        1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069, 2081, 2083];\r\n\r\n//Settings =====================================================================\r\n    var CUSTOM_OPERATORS = {};\r\n\r\n    var Settings = {\r\n        //Enables/Disables call peekers. False means callPeekers are disabled and true means callPeekers are enabled.\r\n        callPeekers: false,\r\n\r\n        //the max number up to which to cache primes. Making this too high causes performance issues\r\n        init_primes: 1000,\r\n\r\n        exclude: [],\r\n        //If you don't care about division by zero for example then this can be set to true.\r\n        //Has some nasty side effects so choose carefully.\r\n        suppress_errors: false,\r\n        //the global used to invoke the libary to parse to a number. Normally cos(9) for example returns\r\n        //cos(9) for convenience but parse to number will always try to return a number if set to true.\r\n        PARSE2NUMBER: false,\r\n        //this flag forces the a clone to be returned when add, subtract, etc... is called\r\n        SAFE: false,\r\n        //the symbol to use for imaginary symbols\r\n        IMAGINARY: 'i',\r\n        //the modules used to link numeric function holders\r\n        FUNCTION_MODULES: [Math],\r\n        //Allow certain characters\r\n        ALLOW_CHARS: ['π'],\r\n        //Allow nerdamer to convert multi-character variables\r\n        USE_MULTICHARACTER_VARS: true,\r\n        //Allow changing of power operator\r\n        POWER_OPERATOR: '^',\r\n        //The variable validation regex\r\n        //VALIDATION_REGEX: /^[a-z_][a-z\\d\\_]*$/i\r\n        VALIDATION_REGEX: /^[a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ∞][0-9a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]*$/i,\r\n        // The regex used to determine which characters should be included in implied multiplication\r\n        IMPLIED_MULTIPLICATION_REGEX: /([\\+\\-\\/\\*]*[0-9]+)([a-z_αAβBγΓδΔϵEζZηHθΘιIκKλΛμMνNξΞoOπΠρPσΣτTυϒϕΦχXψΨωΩ]+[\\+\\-\\/\\*]*)/gi,\r\n        //Aliases\r\n        ALIASES: {\r\n            'π': 'pi',\r\n            '∞': 'Infinity'\r\n        },\r\n        POSITIVE_MULTIPLIERS: false,\r\n        //Cached items\r\n        CACHE: {},\r\n        //Print out warnings or not\r\n        SILENCE_WARNINGS: false,\r\n        // Precision\r\n        PRECISION: 21,\r\n        // The Expression defaults to this value for decimal places\r\n        EXPRESSION_DECP: 19,\r\n        // The text function defaults to this value for decimal places\r\n        DEFAULT_DECP: 16,\r\n        //function mappings\r\n        VECTOR: 'vector',\r\n        PARENTHESIS: 'parens',\r\n        SQRT: 'sqrt',\r\n        ABS: 'abs',\r\n        FACTORIAL: 'factorial',\r\n        DOUBLEFACTORIAL: 'dfactorial',\r\n        //reference pi and e\r\n        LONG_PI: '3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214' +\r\n                '808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196',\r\n        LONG_E: '2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466' +\r\n                '39193200305992181741359662904357290033429526059563073813232862794349076323382988075319525101901',\r\n        PI: Math.PI,\r\n        E: Math.E,\r\n        LOG: 'log',\r\n        LOG10: 'log10',\r\n        LOG10_LATEX: 'log_{10}',\r\n        MAX_EXP: 200000,\r\n        //The number of scientific place to round to\r\n        SCIENTIFIC_MAX_DECIMAL_PLACES: 14,\r\n        //True if ints should not be converted to\r\n        SCIENTIFIC_IGNORE_ZERO_EXPONENTS: true\r\n    };\r\n\r\n    (function () {\r\n        Settings.CACHE.roots = {};\r\n        var x = 40,\r\n                y = 40;\r\n        for(var i = 2; i <= x; i++) {\r\n            for(var j = 2; j <= y; j++) {\r\n                var nthpow = bigInt(i).pow(j);\r\n                Settings.CACHE.roots[nthpow + '-' + j] = i;\r\n            }\r\n        }\r\n    })();\r\n\r\n    //Add the groups. These have been reorganized as of v0.5.1 to make CP the highest group\r\n    //The groups that help with organizing during parsing. Note that for FN is still a function even\r\n    //when it's raised to a symbol, which typically results in an EX\r\n    var N = Groups.N = 1, // A number\r\n            P = Groups.P = 2, // A number with a rational power e.g. 2^(3/5).\r\n            S = Groups.S = 3, // A single variable e.g. x.\r\n            EX = Groups.EX = 4, // An exponential\r\n            FN = Groups.FN = 5, // A function\r\n            PL = Groups.PL = 6, // A symbol/expression having same name with different powers e.g. 1/x + x^2\r\n            CB = Groups.CB = 7, // A symbol/expression composed of one or more variables through multiplication e.g. x*y\r\n            CP = Groups.CP = 8; // A symbol/expression composed of one variable and any other symbol or number x+1 or x+y\r\n\r\n    var CONST_HASH = Settings.CONST_HASH = '#';\r\n\r\n    var PARENTHESIS = Settings.PARENTHESIS;\r\n\r\n    var SQRT = Settings.SQRT;\r\n\r\n    var ABS = Settings.ABS;\r\n\r\n    var FACTORIAL = Settings.FACTORIAL;\r\n\r\n    var DOUBLEFACTORIAL = Settings.DOUBLEFACTORIAL;\r\n\r\n    //the storage container \"memory\" for parsed expressions\r\n    var EXPRESSIONS = [];\r\n\r\n    //variables\r\n    var VARS = {};\r\n\r\n    //the container used to store all the reserved functions\r\n    var RESERVED = [];\r\n\r\n    var WARNINGS = [];\r\n\r\n    /**\r\n     * Use this when errors are suppressible\r\n     * @param {String} msg\r\n     * @param {object} ErrorObj\r\n     */\r\n    var err = function (msg, ErrorObj) {\r\n        if(!Settings.suppress_errors) {\r\n            if(ErrorObj)\r\n                throw new ErrorObj(msg);\r\n            else\r\n                throw new Error(msg);\r\n        }\r\n    };\r\n\r\n//Utils ========================================================================\r\n    var customError = function (name) {\r\n        var E = function (message) {\r\n            this.name = name;\r\n            this.message = message !== undefined ? message : '';\r\n            var error = new Error(this.message);\r\n            error.name = this.name;\r\n            this.stack = error.stack;\r\n        }; //create an empty error\r\n        E.prototype = Object.create(Error.prototype);\r\n        return E;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if value is one of nerdamer's reserved names\r\n     * @param {String} value\r\n     * @return boolean\r\n     */\r\n    var isReserved = function (value) {\r\n        return RESERVED.indexOf(value) !== -1;\r\n    };\r\n\r\n    /**\r\n     * Checks to see that all symbols in array are the same\r\n     * @param {Symbol[]} arr\r\n     * @returns {bool}\r\n     */\r\n    var allSame = function (arr) {\r\n        var last = arr[0];\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            if(!arr[i].equals(last))\r\n                return false;\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to pass warnings or low severity errors about the library\r\n     * @param msg\r\n     */\r\n    var warn = function (msg) {\r\n        WARNINGS.push(msg);\r\n        if(Settings.SHOW_WARNINGS && console && console.warn) {\r\n            console.warn(msg);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Enforces rule: \"must start with a letter or underscore and\r\n     * can have any number of underscores, letters, and numbers thereafter.\"\r\n     * @param name The name of the symbol being checked\r\n     * @param {String} typ - The type of symbols that's being validated\r\n     * @throws {Exception}  - Throws an exception on fail\r\n     */\r\n    var validateName = function (name, typ) {\r\n        typ = typ || 'variable';\r\n        if(Settings.ALLOW_CHARS.indexOf(name) !== -1)\r\n            return;\r\n        var regex = Settings.VALIDATION_REGEX;\r\n        if(!(regex.test(name))) {\r\n            throw new InvalidVariableNameError(name + ' is not a valid ' + typ + ' name');\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Convert number from scientific format to decimal format\r\n     * @param {Number} num\r\n     */\r\n    var scientificToDecimal = function (num) {\r\n        var nsign = Math.sign(num);\r\n        //remove the sign\r\n        num = Math.abs(num);\r\n        //if the number is in scientific notation remove it\r\n        if(/\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num)) {\r\n            var zero = '0',\r\n                    parts = String(num).toLowerCase().split('e'), //split into coeff and exponent\r\n                    e = parts.pop(), //store the exponential part\r\n                    l = Math.abs(e), //get the number of zeros\r\n                    sign = e / l,\r\n                    coeff_array = parts[0].split('.');\r\n            if(sign === -1) {\r\n                l = l - coeff_array[0].length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0].slice(0, l) + '.' + coeff_array[0].slice(l) + (coeff_array.length === 2 ? coeff_array[1] : '');\r\n                }\r\n                else {\r\n                    num = zero + '.' + new Array(l + 1).join(zero) + coeff_array.join('');\r\n                }\r\n            }\r\n            else {\r\n                var dec = coeff_array[1];\r\n                if(dec)\r\n                    l = l - dec.length;\r\n                if(l < 0) {\r\n                    num = coeff_array[0] + dec.slice(0, l) + '.' + dec.slice(l);\r\n                }\r\n                else {\r\n                    num = coeff_array.join('') + new Array(l + 1).join(zero);\r\n                }\r\n            }\r\n        }\r\n\r\n        return nsign < 0 ? '-' + num : num;\r\n    };\r\n    /**\r\n     * Checks if number is a prime number\r\n     * @param {Number} n - the number to be checked\r\n     */\r\n    var isPrime = function (n) {\r\n        var q = Math.floor(Math.sqrt(n));\r\n        for(var i = 2; i <= q; i++) {\r\n            if(n % i === 0)\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Generates an object with known variable value for evaluation\r\n     * @param {String} variable\r\n     * @param {any} value Any stringifyable object\r\n     * @returns {Object} \r\n     */\r\n    var knownVariable = function (variable, value) {\r\n        var o = {};\r\n        o[variable] = value;\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Checks if n is a number\r\n     * @param {any} n\r\n     */\r\n    var isNumber = function (n) {\r\n        return /^\\d+\\.?\\d*$/.test(n);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if an array contains only numeric values\r\n     * @param {Array} arr\r\n     */\r\n    var allNumeric = function (arr) {\r\n        for(var i = 0; i < arr.length; i++)\r\n            if(!isNumber(arr[i]))\r\n                return false;\r\n        return true;\r\n    };\r\n    /**\r\n     * Checks to see if a number or Symbol is a fraction\r\n     * @param {Number|Symbol} num\r\n     * @returns {boolean}\r\n     */\r\n    var isFraction = function (num) {\r\n        if(isSymbol(num))\r\n            return isFraction(num.multiplier.toDecimal());\r\n        return (num % 1 !== 0);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Symbol\r\n     * @param {Object} obj\r\n     */\r\n    var isSymbol = function (obj) {\r\n        return (obj instanceof Symbol);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Expression\r\n     * @param {Object} obj\r\n     */\r\n    var isExpression = function (obj) {\r\n        return (obj instanceof Expression);\r\n    };\r\n\r\n    /**\r\n     * This method traverses the symbol structure and grabs all the variables in a symbol. The variable\r\n     * names are then returned in alphabetical order.\r\n     * @param {Symbol} obj\r\n     * @param {Boolean} poly\r\n     * @param {Object} vars - An object containing the variables. Do not pass this in as it generated\r\n     * automatically. In the future this will be a Collector object.\r\n     * @returns {String[]} - An array containing variable names\r\n     */\r\n    var variables = function (obj, poly, vars) {\r\n        vars = vars || {\r\n            c: [],\r\n            add: function (value) {\r\n                if(this.c.indexOf(value) === -1 && isNaN(value))\r\n                    this.c.push(value);\r\n            }\r\n        };\r\n\r\n        if(isSymbol(obj)) {\r\n            var group = obj.group,\r\n                    prevgroup = obj.previousGroup;\r\n            if(group === EX)\r\n                variables(obj.power, poly, vars);\r\n\r\n            if(group === CP || group === CB || prevgroup === CP || prevgroup === CB) {\r\n                for(var x in obj.symbols) {\r\n                    variables(obj.symbols[x], poly, vars);\r\n                }\r\n            }\r\n            else if(group === S || prevgroup === S) {\r\n                //very crude needs fixing. TODO\r\n                if(!(obj.value === 'e' || obj.value === 'pi' || obj.value === Settings.IMAGINARY))\r\n                    vars.add(obj.value);\r\n            }\r\n            else if(group === PL || prevgroup === PL) {\r\n                variables(firstObject(obj.symbols), poly, vars);\r\n            }\r\n            else if(group === EX) {\r\n                if(!isNaN(obj.value))\r\n                    vars.add(obj.value);\r\n                variables(obj.power, poly, vars);\r\n            }\r\n            else if(group === FN && !poly) {\r\n                for(var i = 0; i < obj.args.length; i++) {\r\n                    variables(obj.args[i], poly, vars);\r\n                }\r\n            }\r\n        }\r\n\r\n        return vars.c.sort();\r\n    };\r\n\r\n    /**\r\n     * Returns the sum of an array\r\n     * @param {Array} arr\r\n     * @param {boolean} toNumber\r\n     * @returns {Symbol}\r\n     */\r\n    var arraySum = function (arr, toNumber) {\r\n        var sum = new Symbol(0);\r\n        for(var i = 0; i < arr.length; i++) {\r\n            var x = arr[i];\r\n            // Convert to symbol if not\r\n            sum = _.add(sum, !isSymbol(x) ? _.parse(x) : x);\r\n        }\r\n\r\n        return toNumber ? Number(sum) : sum;\r\n    };\r\n\r\n    /**\r\n     * Separates out the variables into terms of variabls.\r\n     * e.g. x+y+x*y+sqrt(2)+pi returns\r\n     * {x: x, y: y, x y: x*y, constants: sqrt(2)+pi\r\n     * @param {type} symbol\r\n     * @param {type} o\r\n     * @returns {undefined}\r\n     * @throws {Error} for expontentials\r\n     */\r\n    var separate = function (symbol, o) {\r\n        symbol = _.expand(symbol);\r\n        o = o || {};\r\n        var insert = function (key, sym) {\r\n            if(!o[key])\r\n                o[key] = new Symbol(0);\r\n            o[key] = _.add(o[key], sym.clone());\r\n        };\r\n        symbol.each(function (x) {\r\n            if(x.isConstant('all')) {\r\n                insert('constants', x);\r\n            }\r\n            else if(x.group === S) {\r\n                insert(x.value, x);\r\n            }\r\n            else if(x.group === FN && (x.fname === ABS || x.fname === '')) {\r\n                separate(x.args[0]);\r\n            }\r\n            else if(x.group === EX || x.group === FN) {\r\n                throw new Error('Unable to separate. Term cannot be a function!');\r\n            }\r\n            else {\r\n                insert(variables(x).join(' '), x);\r\n            }\r\n        });\r\n\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Fills holes in an array with zero symbol or generates one with n zeroes\r\n     * @param {Array} arr\r\n     * @param {Number} n\r\n     */\r\n    var fillHoles = function (arr, n) {\r\n        n = n || arr.length;\r\n        for(var i = 0; i < n; i++) {\r\n            var sym = arr[i];\r\n            if(!sym)\r\n                arr[i] = new Symbol(0);\r\n        }\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * Checks to see if the object provided is a Vector\r\n     * @param {Object} obj\r\n     */\r\n    var isVector = function (obj) {\r\n        return (obj instanceof Vector);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is a Matrix\r\n     * @param {Object} obj\r\n     */\r\n    var isMatrix = function (obj) {\r\n        return (obj instanceof Matrix);\r\n    };\r\n\r\n    var isSet = function (obj) {\r\n        return (obj instanceof Set);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is in group N\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isNumericSymbol = function (symbol) {\r\n        return symbol.group === N || symbol.group === P;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a symbol is a variable with no multiplier nor power\r\n     * @param {Symbol} symbol\r\n     */\r\n    var isVariableSymbol = function (symbol) {\r\n        return symbol.group === S && symbol.multiplier.equals(1) && symbol.power.equals(1);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if the object provided is an Array\r\n     * @param {Object} arr\r\n     */\r\n    var isArray = function (arr) {\r\n        return Array.isArray(arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an integer\r\n     * @param {Number} num\r\n     */\r\n    var isInt = function (num) {\r\n        return /^[-+]?\\d+e?\\+?\\d*$/gim.test(num.toString());\r\n    };\r\n\r\n    /**\r\n     * @param {Number|Symbol} obj\r\n     * @returns {boolean}\r\n     */\r\n    var isNegative = function (obj) {\r\n        if(isSymbol(obj)) {\r\n            obj = obj.multiplier;\r\n        }\r\n        return obj.lessThan(0);\r\n    };\r\n    /**\r\n     * Safely stringify object\r\n     * @param o\r\n     */\r\n    var stringify = function (o) {\r\n        if(!o)\r\n            return o;\r\n        return String(o);\r\n    };\r\n\r\n    /**\r\n     * @param {String} str\r\n     * @returns {String} - returns a formatted string surrounded by brackets\r\n     */\r\n    var inBrackets = function (str) {\r\n        return '(' + str + ')';\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace parts of string\r\n     * @param {String} str - The original string\r\n     * @param {Integer} from - The starting index\r\n     * @param {Integer} to - The ending index\r\n     * @param {String} with_str - The replacement string\r\n     * @returns {String} - A formatted string\r\n     */\r\n    var stringReplace = function (str, from, to, with_str) {\r\n        return str.substr(0, from) + with_str + str.substr(to, str.length);\r\n    };\r\n\r\n    /**\r\n     * the Parser uses this to check if it's allowed to convert the obj to type Symbol\r\n     * @param {Object} obj\r\n     * @returns {boolean}\r\n     */\r\n    var customType = function (obj) {\r\n        return obj !== undefined && obj.custom;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if numbers are both negative or are both positive\r\n     * @param {Number} a\r\n     * @param {Number} b\r\n     * @returns {boolean}\r\n     */\r\n    var sameSign = function (a, b) {\r\n        return (a < 0) === (b < 0);\r\n    };\r\n\r\n    /**\r\n     * A helper function to replace multiple occurences in a string. Takes multiple arguments\r\n     * @example format('{0} nice, {0} sweet', 'something')\r\n     * //returns 'something nice, something sweet'\r\n     */\r\n    var format = function () {\r\n        var args = [].slice.call(arguments),\r\n                str = args.shift();\r\n        var new_str = str.replace(/{(\\d+)}/g, function (match, index) {\r\n            var arg = args[index];\r\n            return typeof arg === 'function' ? arg() : arg;\r\n        });\r\n\r\n        return new_str;\r\n    };\r\n\r\n    /**\r\n     * Generates an array with values within a range. Multiplies by a step if provided\r\n     * @param {Number} start\r\n     * @param {Number} end\r\n     * @param {Number} step\r\n     */\r\n    var range = function (start, end, step) {\r\n        var arr = [];\r\n        step = step || 1;\r\n        for(var i = start; i <= end; i++)\r\n            arr.push(i * step);\r\n        return arr;\r\n    };\r\n\r\n    /**\r\n     * Returns an array of all the keys in an array\r\n     * @param {Object} obj\r\n     * @returns {Array}\r\n     */\r\n    var keys = Object.keys;\r\n\r\n    /**\r\n     * Returns the first encountered item in an object. Items do not have a fixed order in objects\r\n     * so only use if you need any first random or if there's only one item in the object\r\n     * @param {Object} obj\r\n     * @param {String} key Return this key as first object\r\n     * @param {Boolean} both\r\n     * @returns {*}\r\n     */\r\n    var firstObject = function (obj, key, both) {\r\n        for(var x in obj)\r\n            break;\r\n        if(key)\r\n            return x;\r\n        if(both)\r\n            return {\r\n                key: x,\r\n                obj: obj[x]\r\n            };\r\n        return obj[x];\r\n    };\r\n\r\n    /**\r\n     * Substitutes out variables for two symbols, parses them to a number and them compares them numerically\r\n     * @param {Symbol} sym1\r\n     * @param {Symbol} sym2\r\n     * @param {String[]} vars - an optional array of variables to use\r\n     * @returns {bool}\r\n     */\r\n    var compare = function (sym1, sym2, vars) {\r\n        var n = 5; //a random number between 1 and 5 is good enough\r\n        var scope = {}; // scope object with random numbers generated using vars\r\n        var comparison;\r\n        for(var i = 0; i < vars.length; i++)\r\n            scope[vars[i]] = new Symbol(Math.floor(Math.random() * n) + 1);\r\n        block('PARSE2NUMBER', function () {\r\n            comparison = _.parse(sym1, scope).equals(_.parse(sym2, scope));\r\n        });\r\n        return comparison;\r\n    };\r\n\r\n    /**\r\n     * Is used to set a user defined function using the function assign operator\r\n     * @param {String} name\r\n     * @param {String[]} params_array\r\n     * @param {String} body\r\n     * @returns {Boolean}\r\n     */\r\n    var setFunction = function (name, params_array, body) {\r\n        validateName(name);\r\n        if(!isReserved(name)) {\r\n            params_array = params_array || variables(_.parse(body));\r\n            // The function gets set to PARSER.mapped function which is just\r\n            // a generic function call.\r\n            _.functions[name] = [_.mapped_function, params_array.length, {\r\n                    name: name,\r\n                    params: params_array,\r\n                    body: body\r\n                }];\r\n\r\n            return body;\r\n        }\r\n        return null;\r\n    };\r\n\r\n    /**\r\n     * Returns the minimum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMax = function (arr) {\r\n        return Math.max.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Returns the maximum number in an array\r\n     * @param {Array} arr\r\n     * @returns {Number}\r\n     */\r\n    var arrayMin = function (arr) {\r\n        return Math.min.apply(undefined, arr);\r\n    };\r\n\r\n    /**\r\n     * Checks to see if two arrays are equal\r\n     * @param {Array} arr1 \r\n     * @param {Array} arr2 \r\n     */\r\n    var arrayEqual = function (arr1, arr2) {\r\n        arr1.sort();\r\n        arr2.sort();\r\n\r\n        // The must be of the same length\r\n        if(arr1.length === arr2.length) {\r\n            for(var i = 0; i < arr1.length; i++) {\r\n                // If any two items don't match we're done\r\n                if(arr1[i] !== arr2[i]) {\r\n                    return false;\r\n                }\r\n            }\r\n            // Otherwise they're equal\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    };\r\n\r\n    /**\r\n     * Clones array with clonable items\r\n     * @param {Array} arr\r\n     * @returns {Array}\r\n     */\r\n    var arrayClone = function (arr) {\r\n        var new_array = [], l = arr.length;\r\n        for(var i = 0; i < l; i++)\r\n            new_array[i] = arr[i].clone();\r\n        return new_array;\r\n    };\r\n\r\n    /**\r\n     * Fills numbers between array values\r\n     * @param {Numbers[]} arr\r\n     * @param {Integer} slices\r\n     */\r\n    var arrayAddSlices = function (arr, slices) {\r\n        slices = slices || 20;\r\n        var retval = [];\r\n        var c, delta, e;\r\n        retval.push(arr[0]); //push the beginning\r\n        for(var i = 0; i < arr.length - 1; i++) {\r\n            c = arr[i];\r\n            delta = arr[i + 1] - c; //get the difference\r\n            e = delta / slices; //chop it up in the desired number of slices\r\n            for(var j = 0; j < slices; j++) {\r\n                c += e; //add the mesh to the last slice\r\n                retval.push(c);\r\n            }\r\n        }\r\n\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * Gets nth roots of a number\r\n     * @param {Symbol} symbol\r\n     * @returns {Vector}\r\n     */\r\n    var nroots = function (symbol) {\r\n        var a, b;\r\n\r\n        if(symbol.group === FN && symbol.fname === '') {\r\n            a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n            b = _.parse(symbol.power);\r\n        }\r\n        else if(symbol.group === P) {\r\n            a = _.parse(symbol.value);\r\n            b = _.parse(symbol.power);\r\n        }\r\n\r\n        if(a && b && (a.group === N) && b.group === N && a.multiplier.isNegative()) {\r\n            var _roots = [];\r\n\r\n            var parts = Symbol.toPolarFormArray(evaluate(symbol));\r\n            var r = parts[0];\r\n\r\n            //var r = _.parse(a).abs().toString();\r\n\r\n            //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n            var x = _.arg(a);\r\n            var n = b.multiplier.den.toString();\r\n            var p = b.multiplier.num.toString();\r\n\r\n            var formula = '(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})';\r\n\r\n            for(var i = 0; i < n; i++) {\r\n                var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n            }\r\n            return Vector.fromArray(_roots);\r\n        }\r\n        else if(symbol.isConstant(true, true)) {\r\n            var sign = symbol.sign();\r\n            var x = evaluate(symbol.abs());\r\n            var root = _.sqrt(x);\r\n\r\n            var _roots = [root.clone(), root.negate()];\r\n\r\n            if(sign < 0)\r\n                _roots = _roots.map(function (x) {\r\n                    return _.multiply(x, Symbol.imaginary());\r\n                });\r\n\r\n        }\r\n        else {\r\n            _roots = [_.parse(symbol)];\r\n        }\r\n\r\n        return Vector.fromArray(_roots);\r\n    };\r\n\r\n    /**\r\n     * Sorts and array given 2 parameters\r\n     * @param {String} a\r\n     * @param {String} b\r\n     */\r\n    var comboSort = function (a, b) {\r\n        var l = a.length,\r\n                combined = []; //the linker\r\n        for(var i = 0; i < a.length; i++) {\r\n            combined.push([a[i], b[i]]); //create the map\r\n        }\r\n\r\n        combined.sort(function (x, y) {\r\n            return x[0] - y[0];\r\n        });\r\n\r\n        var na = [], nb = [];\r\n\r\n        for(i = 0; i < l; i++) {\r\n            na.push(combined[i][0]);\r\n            nb.push(combined[i][1]);\r\n        }\r\n\r\n        return [na, nb];\r\n    };\r\n    /**\r\n     * TODO: Pick a more descriptive name and better description\r\n     * Breaks a function down into it's parts wrt to a variable, mainly coefficients\r\n     * Example a*x^2+b wrt x\r\n     * @param {Symbol} fn\r\n     * @param {String} wrt\r\n     * @param {bool} as_obj\r\n     */\r\n    var decompose_fn = function (fn, wrt, as_obj) {\r\n        wrt = String(wrt); //convert to string\r\n        var ax, a, x, b;\r\n        if(fn.group === CP) {\r\n            var t = _.expand(fn.clone()).stripVar(wrt);\r\n            ax = _.subtract(fn.clone(), t.clone());\r\n            b = t;\r\n        }\r\n        else\r\n            ax = fn.clone();\r\n        a = ax.stripVar(wrt);\r\n        x = _.divide(ax.clone(), a.clone());\r\n        b = b || new Symbol(0);\r\n        if(as_obj)\r\n            return {\r\n                a: a,\r\n                x: x,\r\n                ax: ax,\r\n                b: b\r\n            };\r\n        return [a, x, ax, b];\r\n    };\r\n    /**\r\n     * Rounds a number up to x decimal places\r\n     * @param {Number} x\r\n     * @param {Number} s\r\n     */\r\n    var nround = function (x, s) {\r\n        if(isInt(x)) {\r\n            if(x >= Number.MAX_VALUE)\r\n                return x.toString();\r\n            return Number(x);\r\n        }\r\n\r\n        s = typeof s === 'undefined' ? 14 : s;\r\n        return Math.round(x * Math.pow(10, s)) / Math.pow(10, s);\r\n    };\r\n\r\n    /**\r\n     * Is used for u-substitution. Gets a suitable u for substitution. If for\r\n     * instance a is used in the symbol then it keeps going down the line until\r\n     * one is found that's not in use. If all letters are taken then it\r\n     * starts appending numbers.\r\n     * IMPORTANT! It assumes that the substitution will be undone\r\n     * beore the user gets to interact with the object again.\r\n     * @param {Symbol} symbol\r\n     */\r\n    var getU = function (symbol) {\r\n        //start with u\r\n        var u = 'u', //start with u\r\n                v = u, //init with u\r\n                c = 0, //postfix number\r\n                vars = variables(symbol);\r\n        //make sure this variable isn't reserved and isn't in the variable list\r\n        while(!(RESERVED.indexOf(v) === - 1 && vars.indexOf(v) === - 1))\r\n            v = u + c++;\r\n        //get an empty slot. It seems easier to just push but the\r\n        //problem is that we may have some which are created by clearU\r\n        for(var i = 0, l = RESERVED.length; i <= l; i++)\r\n            //reserved cannot equals false or 0 so we can safely check for a falsy type\r\n            if(!RESERVED[i]) {\r\n                RESERVED[i] = v; //reserve the variable\r\n                break;\r\n            }\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Clears the u variable so it's no longer reserved\r\n     * @param {String} u\r\n     */\r\n    var clearU = function (u) {\r\n        var indx = RESERVED.indexOf(u);\r\n        if(indx !== -1)\r\n            RESERVED[indx] = undefined;\r\n    };\r\n\r\n    /**\r\n     * Loops through each item in object and calls function with item as param\r\n     * @param {Object|Array} obj\r\n     * @param {Function} fn\r\n     */\r\n    var each = function (obj, fn) {\r\n        if(isArray(obj)) {\r\n            var l = obj.length;\r\n            for(var i = 0; i < l; i++)\r\n                fn.call(obj, i);\r\n        }\r\n        else {\r\n            for(var x in obj)\r\n                if(obj.hasOwnProperty(x))\r\n                    fn.call(obj, x);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a number is an even number\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var even = function (num) {\r\n        return num % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Checks to see if a fraction is divisible by 2\r\n     * @param {Number} num\r\n     * @returns {boolean}\r\n     */\r\n    var evenFraction = function (num) {\r\n        return 1 / (num % 1) % 2 === 0;\r\n    };\r\n\r\n    /**\r\n     * Strips duplicates out of an array\r\n     * @param {Array} arr\r\n     */\r\n    var arrayUnique = function (arr) {\r\n        var l = arr.length, a = [];\r\n        for(var i = 0; i < l; i++) {\r\n            var item = arr[i];\r\n            if(a.indexOf(item) === -1)\r\n                a.push(item);\r\n        }\r\n        return a;\r\n    };\r\n\r\n    /**\r\n     * Gets all the variables in an array of Symbols\r\n     * @param {Symbol[]} arr \r\n     */\r\n    var arrayGetVariables = function (arr) {\r\n        var vars = variables(arr[0], null, null, true);\r\n\r\n        //get all variables\r\n        for(var i = 1, l = arr.length; i < l; i++)\r\n            vars = vars.concat(variables(arr[i]));\r\n        //remove duplicates\r\n        vars = arrayUnique(vars).sort();\r\n\r\n        //done\r\n        return vars;\r\n    };\r\n\r\n    /**\r\n     * Removes duplicates from an array. Returns a new array\r\n     * @param {Array} arr\r\n     * @param {Function} condition\r\n     */\r\n    var removeDuplicates = function (arr, condition) {\r\n        var conditionType = typeof condition;\r\n\r\n        if(conditionType !== 'function' || conditionType === 'undefined') {\r\n            condition = function (a, b) {\r\n                return a === b;\r\n            };\r\n        }\r\n\r\n        var seen = [];\r\n\r\n        while(arr.length) {\r\n            var a = arr[0];\r\n            //only one element left so we're done\r\n            if(arr.length === 1) {\r\n                seen.push(a);\r\n                break;\r\n            }\r\n            var temp = [];\r\n            seen.push(a); //we already scanned these\r\n            for(var i = 1; i < arr.length; i++) {\r\n                var b = arr[i];\r\n                //if the number is outside the specified tolerance\r\n                if(!condition(a, b))\r\n                    temp.push(b);\r\n            }\r\n            //start over with the remainder\r\n            arr = temp;\r\n        }\r\n\r\n        return seen;\r\n    };\r\n\r\n    /**\r\n     * Reserves the names in an object so they cannot be used as function names\r\n     * @param {Object} obj\r\n     */\r\n    var reserveNames = function (obj) {\r\n        var add = function (item) {\r\n            if(RESERVED.indexOf(item) === -1)\r\n                RESERVED.push(item);\r\n        };\r\n\r\n        if(typeof obj === 'string')\r\n            add(obj);\r\n        else {\r\n            each(obj, function (x) {\r\n                add(x);\r\n            });\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Removes an item from either an array or an object. If the object is an array, the index must be\r\n     * specified after the array. If it's an object then the key must be specified\r\n     * @param {Object|Array} obj\r\n     * @param {Integer} indexOrKey\r\n     */\r\n    var remove = function (obj, indexOrKey) {\r\n        var result;\r\n        if(isArray(obj)) {\r\n            result = obj.splice(indexOrKey, 1)[0];\r\n        }\r\n        else {\r\n            result = obj[indexOrKey];\r\n            delete obj[indexOrKey];\r\n        }\r\n        return result;\r\n    };\r\n\r\n    /**\r\n     * Creates a temporary block in which one of the global settings is temporarily modified while\r\n     * the function is called. For instance if you want to parse directly to a number rather than have a symbolic\r\n     * answer for a period you would set PARSE2NUMBER to true in the block.\r\n     * @example block('PARSE2NUMBER', function(){//symbol being parsed to number}, true);\r\n     * @param {String} setting - The setting being accessed\r\n     * @param {Function} f\r\n     * @param {boolean} opt - The value of the setting in the block\r\n     * @param {String} obj - The obj of interest. Usually a Symbol but could be any object\r\n     */\r\n    var block = function (setting, f, opt, obj) {\r\n        var current_setting = Settings[setting];\r\n        Settings[setting] = opt === undefined ? true : !!opt;\r\n        var retval = f.call(obj);\r\n        Settings[setting] = current_setting;\r\n        return retval;\r\n    };\r\n\r\n    /**\r\n     * provide a mechanism for accessing functions directly. Not yet complete!!!\r\n     * Some functions will return undefined. This can maybe just remove the\r\n     * function object at some point when all functions are eventually\r\n     * housed in the global function object. Returns ALL parser available\r\n     * functions. Parser.functions may not contain all functions\r\n     */\r\n    var importFunctions = function () {\r\n        var o = {};\r\n        for(var x in _.functions)\r\n            o[x] = _.functions[x][0];\r\n        return o;\r\n    };\r\n\r\n    /**\r\n     * Converts function arguments to an array. Now used by gcd and lcm in Algebra.js :)\r\n     * @param {Array|object} obj\r\n     */\r\n    var arguments2Array = function (obj) {\r\n        return [].slice.call(obj);\r\n    };\r\n\r\n    /**\r\n     * Returns the coefficients of a symbol given a variable. Given ax^2+b^x+c, it divides\r\n     * each nth term by x^n.\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} wrt\r\n     */\r\n    var getCoeffs = function (symbol, wrt, info) {\r\n        var coeffs = [];\r\n        //we loop through the symbols and stick them in their respective\r\n        //containers e.g. y*x^2 goes to index 2\r\n        symbol.each(function (term) {\r\n            if(term.contains(wrt)) {\r\n                //we want only the coefficient which in this case will be everything but the variable\r\n                //e.g. a*b*x -> a*b if the variable to solve for is x\r\n                var coeff = term.stripVar(wrt),\r\n                        x = _.divide(term.clone(), coeff.clone()),\r\n                        p = x.power.toDecimal();\r\n            }\r\n            else {\r\n                coeff = term;\r\n                p = 0;\r\n            }\r\n            var e = coeffs[p];\r\n            //if it exists just add it to it\r\n            coeffs[p] = e ? _.add(e, coeff) : coeff;\r\n\r\n        }, true);\r\n\r\n        for(var i = 0; i < coeffs.length; i++)\r\n            if(!coeffs[i])\r\n                coeffs[i] = new Symbol(0);\r\n        //fill the holes\r\n        return coeffs;\r\n    };\r\n\r\n    /**\r\n     * As the name states. It forces evaluation of the expression\r\n     * @param {Symbol} symbol\r\n     * @param {Symbol} o\r\n     */\r\n    var evaluate = function (symbol, o) {\r\n        return block('PARSE2NUMBER', function () {\r\n            return _.parse(symbol, o);\r\n        }, true);\r\n    };\r\n\r\n    /**\r\n     * Converts an array to a vector. Consider moving this to Vector.fromArray\r\n     * @param {String[]|String|Symbol|Number|Number[]} x\r\n     */\r\n    var convertToVector = function (x) {\r\n        if(isArray(x)) {\r\n            var vector = new Vector([]);\r\n            for(var i = 0; i < x.length; i++)\r\n                vector.elements.push(convertToVector(x[i]));\r\n            return vector;\r\n        }\r\n        //Ensure that a nerdamer ready object is returned\r\n        if(!isSymbol(x))\r\n            return _.parse(x);\r\n        return x;\r\n    };\r\n\r\n    /**\r\n     * Generates prime numbers up to a specified number\r\n     * @param {Number} upto\r\n     */\r\n    var generatePrimes = function (upto) {\r\n        //get the last prime in the array\r\n        var last_prime = PRIMES[PRIMES.length - 1] || 2;\r\n        //no need to check if we've already encountered the number. Just check the cache.\r\n        for(var i = last_prime; i < upto; i++) {\r\n            if(isPrime(i))\r\n                PRIMES.push(i);\r\n        }\r\n    };\r\n    /**\r\n     * Checks to see if all arguments are numbers\r\n     * @param {object} args\r\n     */\r\n    var allNumbers = function (args) {\r\n        for(var i = 0; i < args.length; i++)\r\n            if(args[i].group !== N)\r\n                return false;\r\n        return true;\r\n    };\r\n    /*\r\n     * Checks if all arguments aren't just all number but if they\r\n     * are constants as well e.g. pi, e.\r\n     * @param {object} args\r\n     */\r\n    var allConstants = function (args) {\r\n        for(var i = 0; i < args.length; i++) {\r\n            if(args[i].isPi() || args[i].isE())\r\n                continue;\r\n            if(!args[i].isConstant(true))\r\n                return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    /**\r\n     * Used to multiply two expression in expanded form\r\n     * @param {Symbol} a\r\n     * @param {Symbol} b\r\n     */\r\n    var mix = function (a, b, opt) {\r\n        // Flip them if b is a CP or PL and a is not\r\n        if(b.isComposite() && !a.isComposite() || b.isLinear() && !a.isLinear()) {\r\n            [a, b] = [b, a];\r\n        }\r\n        // A temporary variable to hold the expanded terms\r\n        var t = new Symbol(0);\r\n        if(a.isLinear()) {\r\n            a.each(function (x) {\r\n                // If b is not a PL or a CP then simply multiply it\r\n                if(!b.isComposite()) {\r\n                    var term = _.multiply(_.parse(x), _.parse(b));\r\n                    t = _.add(t, _.expand(term, opt));\r\n                }\r\n                // Otherwise multiply out each term.\r\n                else if(b.isLinear()) {\r\n                    b.each(function (y) {\r\n                        var term = _.multiply(_.parse(x), _.parse(y));\r\n                        var expanded = _.expand(_.parse(term), opt);\r\n                        t = _.add(t, expanded);\r\n                    }, true);\r\n                }\r\n                else {\r\n                    t = _.add(t, _.multiply(x, _.parse(b)));\r\n                }\r\n            }, true);\r\n        }\r\n        else {\r\n            // Just multiply them together\r\n            t = _.multiply(a, b);\r\n        }\r\n\r\n        // The expanded function is now t\r\n        return t;\r\n    };\r\n\r\n//Exceptions ===================================================================\r\n    //Is thrown for division by zero\r\n    var DivisionByZero = customError('DivisionByZero');\r\n    // Is throw if an error occured during parsing\r\n    var ParseError = customError('ParseError');\r\n    // Is thrown if the expression results in undefined\r\n    var UndefinedError = customError('UndefinedError');\r\n    // Is throw input is out of the function domain\r\n    var OutOfFunctionDomainError = customError('OutOfFunctionDomainError');\r\n    // Is throw if a function exceeds x amount of iterations\r\n    var MaximumIterationsReached = customError('MaximumIterationsReached');\r\n    // Is thrown if the parser receives an incorrect type\r\n    var NerdamerTypeError = customError('NerdamerTypeError');\r\n    // Is thrown if bracket parity is not correct\r\n    var ParityError = customError('ParityError');\r\n    // Is thrown if an unexpectd or incorrect operator is encountered\r\n    var OperatorError = customError('OperatorError');\r\n    // Is thrown if an index is out of range.\r\n    var OutOfRangeError = customError('OutOfRangeError');\r\n    // Is thrown if dimensions are incorrect. Mostly for matrices\r\n    var DimensionError = customError('DimensionError');\r\n    // Is thrown if variable name violates naming rule\r\n    var InvalidVariableNameError = customError('InvalidVariableNameError');\r\n    // Is thrown if the limits of the library are exceeded for a function\r\n    // This can be that the function become unstable passed a value\r\n    var ValueLimitExceededError = customError('ValueLimitExceededError');\r\n    // Is throw if the value is an incorrect LH or RH value\r\n    var NerdamerValueError = customError('NerdamerValueError');\r\n    // Is thrown if the value is an incorrect LH or RH value\r\n    var SolveError = customError('SolveError');\r\n    // Is thrown for an infinite loop\r\n    var InfiniteLoopError = customError('InfiniteLoopError');\r\n    // Is thrown if an operator is found when there shouldn't be one\r\n    var UnexpectedTokenError = customError('UnexpectedTokenError');\r\n\r\n    var exceptions = {\r\n        DivisionByZero: DivisionByZero,\r\n        ParseError: ParseError,\r\n        OutOfFunctionDomainError: OutOfFunctionDomainError,\r\n        UndefinedError: UndefinedError,\r\n        MaximumIterationsReached: MaximumIterationsReached,\r\n        NerdamerTypeError: NerdamerTypeError,\r\n        ParityError: ParityError,\r\n        OperatorError: OperatorError,\r\n        OutOfRangeError: OutOfRangeError,\r\n        DimensionError: DimensionError,\r\n        InvalidVariableNameError: InvalidVariableNameError,\r\n        ValueLimitExceededError: ValueLimitExceededError,\r\n        NerdamerValueError: NerdamerValueError,\r\n        SolveError: SolveError,\r\n        InfiniteLoopError: InfiniteLoopError,\r\n        UnexpectedTokenError: UnexpectedTokenError\r\n    };\r\n//Math2 ========================================================================\r\n    //This object holds additional functions for nerdamer. Think of it as an extension of the Math object.\r\n    //I really don't like touching objects which aren't mine hence the reason for Math2. The names of the\r\n    //functions within are pretty self-explanatory.\r\n    //NOTE: DO NOT USE INLINE COMMENTS WITH THE MATH2 OBJECT! THIS BREAK DURING COMPILATION OF BUILDFUNCTION.\r\n    var Math2 = {\r\n        csc: function (x) {\r\n            return 1 / Math.sin(x);\r\n        },\r\n        sec: function (x) {\r\n            return 1 / Math.cos(x);\r\n        },\r\n        cot: function (x) {\r\n            return 1 / Math.tan(x);\r\n        },\r\n        acsc: function (x) {\r\n            return Math.asin(1 / x);\r\n        },\r\n        asec: function (x) {\r\n            return Math.acos(1 / x);\r\n        },\r\n        acot: function (x) {\r\n            return (Math.PI / 2) - Math.atan(x);\r\n        },\r\n        // https://gist.github.com/jiggzson/df0e9ae8b3b06ff3d8dc2aa062853bd8\r\n        erf: function (x) {\r\n            var t = 1 / (1 + 0.5 * Math.abs(x));\r\n            var result = 1 - t * Math.exp(-x * x - 1.26551223 +\r\n                    t * (1.00002368 +\r\n                            t * (0.37409196 +\r\n                                    t * (0.09678418 +\r\n                                            t * (-0.18628806 +\r\n                                                    t * (0.27886807 +\r\n                                                            t * (-1.13520398 +\r\n                                                                    t * (1.48851587 +\r\n                                                                            t * (-0.82215223 +\r\n                                                                                    t * (0.17087277)))))))))\r\n                    );\r\n            return x >= 0 ? result : -result;\r\n        },\r\n        diff: function (f) {\r\n            var h = 0.001;\r\n\r\n            var derivative = function (x) {\r\n                return (f(x + h) - f(x - h)) / (2 * h);\r\n            };\r\n\r\n            return derivative;\r\n        },\r\n        median: function (...values) {\r\n            values.sort(function (a, b) {\r\n                return a - b;\r\n            });\r\n\r\n            var half = Math.floor(values.length / 2);\r\n\r\n            if(values.length % 2)\r\n                return values[half];\r\n\r\n            return (values[half - 1] + values[half]) / 2.0;\r\n        },\r\n        /*\r\n         * Reverses continued fraction calculation\r\n         * @param {obj} contd\r\n         * @returns {Number}\r\n         */\r\n        fromContinued: function (contd) {\r\n            var arr = contd.fractions.slice();\r\n            var e = 1 / arr.pop();\r\n            for(var i = 0, l = arr.length; i < l; i++) {\r\n                e = 1 / (arr.pop() + e);\r\n            }\r\n            return contd.sign * (contd.whole + e);\r\n        },\r\n        /*\r\n         * Calculates continued fractions\r\n         * @param {Number} n\r\n         * @param {Number} x The number of places\r\n         * @returns {Number}\r\n         */\r\n        continuedFraction: function (n, x) {\r\n            x = x || 20;\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            var absn = Math.abs(n); /*get the absolute value of the number*/\r\n            var whole = Math.floor(absn); /*get the whole*/\r\n            var ni = absn - whole; /*subtract the whole*/\r\n            var c = 0; /*the counter to keep track of iterations*/\r\n            var done = false;\r\n            var epsilon = 1e-14;\r\n            var max = 1e7;\r\n            var e, w;\r\n            var retval = {\r\n                whole: whole,\r\n                sign: sign,\r\n                fractions: []\r\n            };\r\n            /*start calculating*/\r\n            while(!done && ni !== 0) {\r\n                /*invert and get the whole*/\r\n                e = 1 / ni;\r\n                w = Math.floor(e);\r\n                if(w > max) {\r\n                    /*this signals that we may have already gone too far*/\r\n                    var d = Math2.fromContinued(retval) - n;\r\n                    if(d <= Number.EPSILON)\r\n                        break;\r\n                }\r\n                /*add to result*/\r\n                retval.fractions.push(w);\r\n                /*move the ni to the decimal*/\r\n                ni = e - w;\r\n                /*ni should always be a decimal. If we have a whole number then we're in the rounding errors*/\r\n                if(ni <= epsilon || c >= x - 1)\r\n                    done = true;\r\n                c++;\r\n            }\r\n            /*cleanup 1/(n+1/1) = 1/(n+1) so just move the last digit one over if it's one*/\r\n            var idx = retval.fractions.length - 1;\r\n            if(retval.fractions[idx] === 1) {\r\n                retval.fractions.pop();\r\n                /*increase the last one by one*/\r\n                retval.fractions[--idx]++;\r\n            }\r\n            return retval;\r\n        },\r\n        bigpow: function (n, p) {\r\n            if(!(n instanceof Frac))\r\n                n = Frac.create(n);\r\n            if(!(p instanceof Frac))\r\n                p = Frac.create(p);\r\n            var retval = new Frac(0);\r\n            if(p.isInteger()) {\r\n                retval.num = n.num.pow(p.toString());\r\n                retval.den = n.den.pow(p.toString());\r\n            }\r\n            else {\r\n                var num = Frac.create(Math.pow(n.num, p.num));\r\n                var den = Frac.create(Math.pow(n.den, p.num));\r\n\r\n                retval.num = Math2.nthroot(num, p.den.toString());\r\n                retval.den = Math2.nthroot(den, p.den);\r\n            }\r\n            return retval;\r\n        },\r\n        //http://stackoverflow.com/questions/15454183/how-to-make-a-function-that-computes-the-factorial-for-numbers-with-decimals\r\n        gamma: function (z) {\r\n            var g = 7;\r\n            var C = [\r\n                0.99999999999980993,\r\n                676.5203681218851,\r\n                -1259.1392167224028,\r\n                771.32342877765313,\r\n                -176.61502916214059,\r\n                12.507343278686905,\r\n                -0.13857109526572012,\r\n                9.9843695780195716e-6,\r\n                1.5056327351493116e-7]\r\n                    ;\r\n\r\n            if(z < 0.5)\r\n                return Math.PI / (Math.sin(Math.PI * z) * Math2.gamma(1 - z));\r\n            else {\r\n                z -= 1;\r\n\r\n                var x = C[0];\r\n                for(var i = 1; i < g + 2; i++)\r\n                    x += C[i] / (z + i);\r\n\r\n                var t = z + g + 0.5;\r\n                return Math.sqrt(2 * Math.PI) * Math.pow(t, (z + 0.5)) * Math.exp(-t) * x;\r\n            }\r\n        },\r\n        //factorial\r\n        bigfactorial: function (x) {\r\n            var retval = new bigInt(1);\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval.times(i);\r\n            return new Frac(retval);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Logarithm#Calculation\r\n        bigLog: function (x) {\r\n            varr\n            if(CACHE[x]) {\r\n                return Frac.quick.apply(null, CACHE[x].split('/'));\r\n            }\r\n            x = new Frac(x);\r\n            var n = 80;\r\n            var retval = new Frac(0);\r\n            var a = x.subtract(new Frac(1));\r\n            var b = x.add(new Frac(1));\r\n            for(var i = 0; i < n; i++) {\r\n                var t = new Frac(2 * i + 1);\r\n                var k = Math2.bigpow(a.divide(b), t);\r\n                var r = t.clone().invert().multiply(k);\r\n                retval = retval.add(r);\r\n\r\n            }\r\n            return retval.multiply(new Frac(2));\r\n        },\r\n        //the factorial function but using the big library instead\r\n        factorial: function (x) {\r\n            var is_int = x % 1 === 0;\r\n\r\n            /*factorial for negative integers is complex infinity according to Wolfram Alpha*/\r\n            if(is_int && x < 0)\r\n                return NaN;\r\n\r\n            if(!is_int)\r\n                return Math2.gamma(x + 1);\r\n\r\n            var retval = 1;\r\n            for(var i = 2; i <= x; i++)\r\n                retval = retval * i;\r\n            return retval;\r\n        },\r\n        //double factorial\r\n        //http://mathworld.wolfram.com/DoubleFactorial.html\r\n        dfactorial: function (x) {\r\n            if(isInt(x)) {\r\n                var even = x % 2 === 0;\r\n                /* If x = even then n = x/2 else n = (x-1)/2*/\r\n                var n = even ? x / 2 : (x + 1) / 2;\r\n                /*the return value*/\r\n                var r = new Frac(1);\r\n                /*start the loop*/\r\n                if(even)\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)));\r\n                else\r\n                    for(var i = 1; i <= n; i++)\r\n                        r = r.multiply(new Frac(2).multiply(new Frac(i)).subtract(new Frac(1)));\r\n            }\r\n            else {\r\n                /*Not yet extended to bigNum*/\r\n                r = Math.pow(2, (1 + 2 * x - Math.cos(Math.PI * x)) / 4) * Math.pow(Math.PI, (Math.cos(Math.PI * x) - 1) / 4) * Math2.gamma(1 + x / 2);\r\n            }\r\n\r\n            /*done*/\r\n            return r;\r\n        },\r\n        GCD: function () {\r\n            var args = arrayUnique([].slice.call(arguments)\r\n                    .map(function (x) {\r\n                        return Math.abs(x);\r\n                    })).sort(),\r\n                    a = Math.abs(args.shift()),\r\n                    n = args.length;\r\n\r\n            while(n-- > 0) {\r\n                var b = Math.abs(args.shift());\r\n                while(true) {\r\n                    a %= b;\r\n                    if(a === 0) {\r\n                        a = b;\r\n                        break;\r\n                    }\r\n                    b %= a;\r\n                    if(b === 0)\r\n                        break;\r\n                    ;\r\n                }\r\n            }\r\n            return a;\r\n        },\r\n        QGCD: function () {\r\n            var args = [].slice.call(arguments);\r\n            var a = args[0];\r\n            for(var i = 1; i < args.length; i++) {\r\n                var b = args[i];\r\n                var sign = a.isNegative() && b.isNegative() ? -1 : 1;\r\n                a = b.gcd(a);\r\n                if(sign < 0)\r\n                    a.negate();\r\n            }\r\n            return a;\r\n        },\r\n        LCM: function (a, b) {\r\n            return (a * b) / Math2.GCD(a, b);\r\n        },\r\n        //pow but with the handling of negative numbers\r\n        //http://stackoverflow.com/questions/12810765/calculating-cubic-root-for-negative-number\r\n        pow: function (b, e) {\r\n            if(b < 0) {\r\n                if(Math.abs(e) < 1) {\r\n                    /*nth root of a negative number is imaginary when n is even*/\r\n                    if(1 / e % 2 === 0)\r\n                        return NaN;\r\n                    return -Math.pow(Math.abs(b), e);\r\n                }\r\n            }\r\n            return Math.pow(b, e);\r\n        },\r\n        factor: function (n) {\r\n            n = Number(n);\r\n            var sign = Math.sign(n); /*store the sign*/\r\n            /*move the number to absolute value*/\r\n            n = Math.abs(n);\r\n            var ifactors = Math2.ifactor(n);\r\n            var factors = new Symbol();\r\n            factors.symbols = {};\r\n            factors.group = CB;\r\n            for(var x in ifactors) {\r\n                var factor = new Symbol(1);\r\n                factor.group = P; /*cheat a little*/\r\n                factor.value = x;\r\n                factor.power = new Symbol(ifactors[x]);\r\n                factors.symbols[x] = factor;\r\n            }\r\n            factors.updateHash();\r\n\r\n            if(n === 1) {\r\n                factors = new Symbol(n);\r\n            }\r\n\r\n            /*put back the sign*/\r\n            if(sign < 0)\r\n                factors.negate();\r\n\r\n            return factors;\r\n        },\r\n        /**\r\n         * Uses trial division\r\n         * @param {Integer} n - the number being factored\r\n         * @param {object} factors -  the factors object\r\n         * @returns {object}\r\n         */\r\n        sfactor: function (n, factors) {\r\n            factors = factors || {};\r\n            var r = Math.floor(Math.sqrt(n));\r\n            var lcprime = PRIMES[PRIMES.length - 1];\r\n            /*a one-time cost... Hopefully ... And don't bother for more than a million*/\r\n            /*takes too long*/\r\n            if(r > lcprime && n < 1e6)\r\n                generatePrimes(r);\r\n            var l = PRIMES.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var prime = PRIMES[i];\r\n                /*trial division*/\r\n                while(n % prime === 0) {\r\n                    n = n / prime;\r\n                    factors[prime] = (factors[prime] || 0) + 1;\r\n                }\r\n            }\r\n            if(n > 1)\r\n                factors[n] = 1;\r\n            return factors;\r\n        },\r\n        /**\r\n         * Pollard's rho\r\n         * @param {Integer} n\r\n         * @returns {object}\r\n         */\r\n        ifactor: function (n) {\r\n            var input = new bigInt(n);\r\n\r\n            n = String(n);\r\n\r\n            if(n === '0')\r\n                return {'0': 1};\r\n            n = new bigInt(n); /*convert to bigInt for safety*/\r\n            var sign = n.sign ? -1 : 1;\r\n            n = n.abs();\r\n            var factors = {}; /*factor object being returned.*/\r\n            if(n.lt('65536')) { /*less than 2^16 just use trial division*/\r\n                factors = Math2.sfactor(n, factors);\r\n            }\r\n            else {\r\n                var add = function (e) {\r\n                    if(!e.isPrime()) {\r\n                        factors = Math2.sfactor(e, factors);\r\n                    }\r\n                    else\r\n                        factors[e] = (factors[e] || 0) + 1;\r\n                };\r\n\r\n                try {\r\n                    //set a safety\r\n                    var max = 1e3;\r\n                    var safety = 0;\r\n\r\n                    while(!n.abs().equals(1)) {\r\n                        if(n.isPrime()) {\r\n                            add(n);\r\n                            break;\r\n                        }\r\n                        else {\r\n                            function rho(c) {\r\n                                var xf = new bigInt(c),\r\n                                        cz = 2,\r\n                                        x = new bigInt(c),\r\n                                        factor = new bigInt(1);\r\n\r\n                                while(factor.equals(1)) {\r\n                                    for(var i = 0; i <= cz && factor.equals(1); i++) {\r\n                                        //trigger the safety\r\n                                        if(safety++ > max)\r\n                                            throw new Error('stopping');\r\n\r\n                                        x = x.pow(2).add(1).mod(n);\r\n                                        factor = bigInt.gcd(x.minus(xf).abs(), n);\r\n                                    }\r\n\r\n                                    cz = cz * 2;\r\n                                    xf = x;\r\n                                }\r\n                                if(factor.equals(n)) {\r\n                                    return rho(c + 1);\r\n                                }\r\n                                return factor;\r\n                            }\r\n                            var factor = rho(2);\r\n                            add(factor);\r\n                            /*divide out the factor*/\r\n                            n = n.divide(factor);\r\n                        }\r\n                    }\r\n                }\r\n                catch(e) {\r\n                    //reset factors\r\n                    factors = {};\r\n                    add(input);\r\n                }\r\n\r\n            }\r\n\r\n            /*put the sign back*/\r\n            if(sign === -1) {\r\n                var sm = arrayMin(keys(factors)); /*/get the smallest number*/\r\n                factors['-' + sm] = factors[sm];\r\n                delete factors[sm];\r\n            }\r\n\r\n            return factors;\r\n        },\r\n        //factors a number into rectangular box. If sides are primes that this will be\r\n        //their prime factors. e.g. 21 -> (7)(3), 133 -> (7)(19)\r\n        boxfactor: function (n, max) {\r\n            max = max || 200; //stop after this number of iterations\r\n            var c, r,\r\n                    d = Math.floor((5 / 12) * n), //the divisor\r\n                    i = 0, //number of iterations\r\n                    safety = false;\r\n            while(true) {\r\n                c = Math.floor(n / d);\r\n                r = n % d;\r\n                if(r === 0)\r\n                    break; //we're done\r\n                if(safety)\r\n                    return [n, 1];\r\n                d = Math.max(r, d - r);\r\n                i++;\r\n                safety = i > max;\r\n            }\r\n            return [c, d, i];\r\n        },\r\n        fib: function (n) {\r\n            var sign = Math.sign(n);\r\n            n = Math.abs(n);\r\n            sign = even(n) ? sign : Math.abs(sign);\r\n            var a = 0, b = 1, f = 1;\r\n            for(var i = 2; i <= n; i++) {\r\n                f = a + b;\r\n                a = b;\r\n                b = f;\r\n            }\r\n            return f * sign;\r\n        },\r\n        mod: function (x, y) {\r\n            return x % y;\r\n        },\r\n        //http://mathworld.wolfram.com/IntegerPart.html\r\n        integer_part: function (x) {\r\n            var sign = Math.sign(x);\r\n            return sign * Math.floor(Math.abs(x));\r\n        },\r\n        simpson: function (f, a, b, step) {\r\n            var get_value = function (f, x, side) {\r\n                var v = f(x);\r\n                var d = 0.000000000001;\r\n                if(isNaN(v)) {\r\n                    v = f(side === 1 ? x + d : x - d);\r\n                }\r\n                return v;\r\n            };\r\n\r\n            step = step || 0.0001;\r\n            //calculate the number of intervals\r\n            var n = Math.abs(Math.floor((b - a) / step));\r\n            //simpson's rule requires an even number of intervals. If it's not then add 1\r\n            if(n % 2 !== 0)\r\n                n++;\r\n            //get the interval size\r\n            var dx = (b - a) / n;\r\n            //get x0\r\n            var retval = get_value(f, a, 1);\r\n\r\n            //get the middle part 4x1+2x2+4x3 ...\r\n            //but first set a flag to see if it's even or odd.\r\n            //The first one is odd so we start there\r\n            var even = false;\r\n            //get x1\r\n            var xi = a + dx;\r\n            //the coefficient\r\n            var c, k;\r\n            //https://en.wikipedia.org/wiki/Simpson%27s_rule\r\n            for(var i = 1; i < n; i++) {\r\n                c = even ? 2 : 4;\r\n                k = c * get_value(f, xi, 1);\r\n                retval += k;\r\n                //flip the even flag\r\n                even = !even;\r\n                //increment xi\r\n                xi += dx;\r\n            }\r\n\r\n            //add xn\r\n            return (retval + get_value(f, xi, 2)) * (dx / 3);\r\n\r\n        },\r\n        /**\r\n         * https://github.com/scijs/integrate-adaptive-simpson\r\n         * @param {Function} f - the function being integrated\r\n         * @param {Number} a - lower bound\r\n         * @param {Number} b - upper bound\r\n         * @param {Number} tol - step width\r\n         * @param {Number} maxdepth\r\n         * @returns {Number}\r\n         */\r\n        num_integrate: function (f, a, b, tol, maxdepth) {\r\n            if(maxdepth < 0)\r\n                throw new Error('max depth cannot be negative');\r\n\r\n            /* This algorithm adapted from pseudocode in:*/\r\n            /* http://www.math.utk.edu/~ccollins/refs/Handouts/rich.pdf*/\r\n            function adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, depth, state) {\r\n                if(state.nanEncountered) {\r\n                    return NaN;\r\n                }\r\n                var h, f1, f2, sl, sr, s2, m, V1, V2, err;\r\n                h = b - a;\r\n                f1 = f(a + h * 0.25);\r\n                f2 = f(b - h * 0.25);\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f1)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n                /* Simple check for NaN:*/\r\n                if(isNaN(f2)) {\r\n                    state.nanEncountered = true;\r\n                    return;\r\n                }\r\n\r\n                sl = h * (fa + 4 * f1 + fm) / 12;\r\n                sr = h * (fm + 4 * f2 + fb) / 12;\r\n                s2 = sl + sr;\r\n                err = (s2 - V0) / 15;\r\n\r\n                if(state.maxDepthCount > 1000 * maxdepth) {\r\n                    return;\r\n                }\r\n\r\n\r\n                if(depth > maxdepth) {\r\n                    state.maxDepthCount++;\r\n                    return s2 + err;\r\n                }\r\n                else if(Math.abs(err) < tol) {\r\n                    return s2 + err;\r\n                }\r\n                else {\r\n                    m = a + h * 0.5;\r\n                    V1 = adsimp(f, a, m, fa, f1, fm, sl, tol * 0.5, maxdepth, depth + 1, state);\r\n                    if(isNaN(V1)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n                    V2 = adsimp(f, m, b, fm, f2, fb, sr, tol * 0.5, maxdepth, depth + 1, state);\r\n\r\n                    if(isNaN(V2)) {\r\n                        state.nanEncountered = true;\r\n                        return NaN;\r\n                    }\r\n\r\n                    return V1 + V2;\r\n                }\r\n            }\r\n\r\n            function integrate(f, a, b, tol, maxdepth) {\r\n                var state = {\r\n                    maxDepthCount: 0,\r\n                    nanEncountered: false\r\n                };\r\n\r\n                if(tol === undefined) {\r\n                    tol = 1e-9;\r\n                }\r\n                if(maxdepth === undefined) {\r\n                    /*Issue #458 - This was lowered because of performance issues. */\r\n                    /*This was suspected from before but is now confirmed with this issue*/\r\n                    maxdepth = 45;\r\n                }\r\n\r\n                var fa = f(a);\r\n                var fm = f(0.5 * (a + b));\r\n                var fb = f(b);\r\n\r\n                var V0 = (fa + 4 * fm + fb) * (b - a) / 6;\r\n\r\n                var result = adsimp(f, a, b, fa, fm, fb, V0, tol, maxdepth, 1, state);\r\n\r\n                if(state.maxDepthCount > 0) {\r\n                    warn('integrate-adaptive-simpson: Warning: maximum recursion depth (' + maxdepth + ') reached ' + state.maxDepthCount + ' times');\r\n                }\r\n\r\n                if(state.nanEncountered) {\r\n                    throw new Error('Function does not converge over interval!');\r\n                }\r\n\r\n                return result;\r\n            }\r\n            var retval;\r\n\r\n            try {\r\n                retval = integrate(f, a, b, tol, maxdepth);\r\n            }\r\n            catch(e) {\r\n                /*fallback to non-adaptive*/\r\n                return Math2.simpson(f, a, b);\r\n            }\r\n            return nround(retval, 12);\r\n        },\r\n        //https://en.wikipedia.org/wiki/Trigonometric_integral\r\n        //CosineIntegral\r\n        Ci: function (x) {\r\n            var n = 20,\r\n                    /*roughly Euler–Mascheroni*/\r\n                    g = 0.5772156649015329,\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                /*cache 2n*/\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2)) / (n2 * Math2.factorial(n2));\r\n            }\r\n            return Math.log(x) + g + sum;\r\n        },\r\n        /*SineIntegral*/\r\n        Si: function (x) {\r\n            var n = 20,\r\n                    sum = 0;\r\n            for(var i = 0; i < n; i++) {\r\n                var n2 = 2 * i;\r\n                sum += (Math.pow(-1, i) * Math.pow(x, n2 + 1)) / ((n2 + 1) * Math2.factorial(n2 + 1));\r\n            }\r\n            return sum;\r\n        },\r\n        /*ExponentialIntegral*/\r\n        Ei: function (x) {\r\n            if(Number(x) === 0)\r\n                return -Infinity;\r\n            var n = 30,\r\n                    g = 0.5772156649015328606, /*roughly Euler–Mascheroni*/\r\n                    sum = 0;\r\n            for(var i = 1; i < n; i++) {\r\n                sum += Math.pow(x, i) / (i * Math2.factorial(i));\r\n            }\r\n            return g + Math.abs(Math.log(x)) + sum;\r\n        },\r\n        /*Hyperbolic Sine Integral*/\r\n        /*http://mathworld.wolfram.com/Shi.html*/\r\n        Shi: function (x) {\r\n            var n = 30,\r\n                    sum = 0,\r\n                    k, t;\r\n            for(var i = 0; i < n; i++) {\r\n                k = 2 * i;\r\n                t = k + 1;\r\n                sum += Math.pow(x, t) / (t * t * Math2.factorial(k));\r\n            }\r\n            return sum;\r\n        },\r\n        /*the cosine integral function*/\r\n        Chi: function (x) {\r\n            var dx, g, f;\r\n            dx = 0.001;\r\n            g = 0.5772156649015328606;\r\n            f = function (t) {\r\n                return (Math.cosh(t) - 1) / t;\r\n            };\r\n            return Math.log(x) + g + Math2.num_integrate(f, 0.002, x, dx);\r\n        },\r\n        /*the log integral*/\r\n        Li: function (x) {\r\n            return Math2.Ei(Math2.bigLog(x));\r\n        },\r\n        /*the gamma incomplete function*/\r\n        gamma_incomplete: function (n, x) {\r\n            var t = n - 1,\r\n                    sum = 0,\r\n                    x = x || 0;\r\n            for(var i = 0; i < t; i++) {\r\n                sum += Math.pow(x, i) / Math2.factorial(i);\r\n            }\r\n            return Math2.factorial(t) * Math.exp(-x) * sum;\r\n        },\r\n        /*\r\n         * Heaviside step function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/HeavisideStepFunction.html\r\n         * if x > 0 then 1\r\n         * if x == 0 then 1/2\r\n         * if x < 0 then 0\r\n         */\r\n        step: function (x) {\r\n            if(x > 0)\r\n                return 1;\r\n            if(x < 0)\r\n                return 0;\r\n            return 0.5;\r\n        },\r\n        /*\r\n         * Rectangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/RectangleFunction.html\r\n         * if |x| > 1/2 then 0\r\n         * if |x| == 1/2 then 1/2\r\n         * if |x| < 1/2 then 1\r\n         */\r\n        rect: function (x) {\r\n            var x = Math.abs(x);\r\n            if(x === 0.5)\r\n                return x;\r\n            if(x > 0.5)\r\n                return 0;\r\n            return 1;\r\n        },\r\n        /*\r\n         * Sinc function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/SincFunction.html\r\n         * if x == 0 then 1\r\n         * otherwise sin(x)/x\r\n         */\r\n        sinc: function (x) {\r\n            if(x.equals(0))\r\n                return 1;\r\n            return Math.sin(x) / x;\r\n        },\r\n        /*\r\n         * Triangle function - Moved from Special.js (originally contributed by Brosnan Yuen)\r\n         * Specification : http://mathworld.wolfram.com/TriangleFunction.html\r\n         * if |x| >= 1 then 0\r\n         * if |x| < then 1-|x|\r\n         */\r\n        tri: function (x) {\r\n            x = Math.abs(x);\r\n            if(x >= 1)\r\n                return 0;\r\n            return 1 - x;\r\n        },\r\n        //https://en.wikipedia.org/wiki/Nth_root_algorithm\r\n        nthroot: function (A, n) {\r\n            /*make sure the input is of type Frac*/\r\n            if(!(A instanceof Frac))\r\n                A = new Frac(A.toString());\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n.toString());\r\n            if(n.equals(1))\r\n                return A;\r\n            /*begin algorithm*/\r\n            var xk = A.divide(new Frac(2)); /*x0*/\r\n            var e = new Frac(1e-15);\r\n            var dk, dk0, d0;\r\n            var a = n.clone().invert(),\r\n                    b = n.subtract(new Frac(1));\r\n            do {\r\n                var powb = Math2.bigpow(xk, b);\r\n                var dk_dec = a.multiply(A.divide(powb).subtract(xk)).toDecimal(25);\r\n                dk = Frac.create(dk_dec);\r\n                if(d0)\r\n                    break;\r\n\r\n                xk = xk.add(dk);\r\n                /*check to see if there's no change from the last xk*/\r\n                var dk_dec = dk.toDecimal();\r\n                d0 = dk0 ? dk0 === dk_dec : false;\r\n                dk0 = dk_dec;\r\n            }\r\n            while(dk.abs().gte(e))\r\n\r\n            return xk;\r\n        },\r\n        /*https://gist.github.com/jiggzson/0c5b33cbcd7b52b36132b1e96573285f*/\r\n        /*Just the square root function but big :)*/\r\n        sqrt: function (n) {\r\n            if(!(n instanceof Frac))\r\n                n = new Frac(n);\r\n            var xn, d, ld, same_delta;\r\n            var c = 0; /*counter*/\r\n            var done = false;\r\n            var delta = new Frac(1e-20);\r\n            xn = n.divide(new Frac(2));\r\n            var safety = 1000;\r\n            do {\r\n                /*break if we're not converging*/\r\n                if(c > safety)\r\n                    throw new Error('Unable to calculate square root for ' + n);\r\n                xn = xn.add(n.divide(xn)).divide(new Frac(2));\r\n                xn = new Frac(xn.decimal(30));\r\n                /*get the difference from the true square*/\r\n                d = n.subtract(xn.multiply(xn));\r\n                /*if the square of the calculated number is close enough to the number*/\r\n                /*we're getting the square root or the last delta was the same as the new delta*/\r\n                /*then we're done*/\r\n                same_delta = ld ? ld.equals(d) : false;\r\n                if(d.clone().abs().lessThan(delta) || same_delta)\r\n                    done = true;\r\n                /*store the calculated delta*/\r\n                ld = d;\r\n                c++; /*increase the counter*/\r\n            }\r\n            while(!done)\r\n\r\n            return xn;\r\n        }\r\n    };\r\n    //link the Math2 object to Settings.FUNCTION_MODULES\r\n    Settings.FUNCTION_MODULES.push(Math2);\r\n    reserveNames(Math2); //reserve the names in Math2\r\n\r\n\r\n//Polyfills ====================================================================\r\n    //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/\r\n    Math.sign = Math.sign || function (x) {\r\n        x = +x; // convert to a number\r\n        if(x === 0 || isNaN(x)) {\r\n            return x;\r\n        }\r\n        return x > 0 ? 1 : -1;\r\n    };\r\n\r\n    Math.cosh = Math.cosh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y + 1 / y) / 2;\r\n    };\r\n\r\n    Math.sech = Math.sech || function (x) {\r\n        return 1 / Math.cosh(x);\r\n    };\r\n\r\n    Math.csch = Math.csch || function (x) {\r\n        return 1 / Math.sinh(x);\r\n    };\r\n\r\n    Math.coth = Math.coth || function (x) {\r\n        return 1 / Math.tanh(x);\r\n    };\r\n\r\n    Math.sinh = Math.sinh || function (x) {\r\n        var y = Math.exp(x);\r\n        return (y - 1 / y) / 2;\r\n    };\r\n\r\n    Math.tanh = Math.tanh || function (x) {\r\n        if(x === Infinity) {\r\n            return 1;\r\n        }\r\n        else if(x === -Infinity) {\r\n            return -1;\r\n        }\r\n        else {\r\n            var y = Math.exp(2 * x);\r\n            return (y - 1) / (y + 1);\r\n        }\r\n    };\r\n\r\n    Math.asinh = Math.asinh || function (x) {\r\n        if(x === -Infinity) {\r\n            return x;\r\n        }\r\n        else {\r\n            return Math.log(x + Math.sqrt(x * x + 1));\r\n        }\r\n    };\r\n\r\n    Math.acosh = Math.acosh || function (x) {\r\n        return Math.log(x + Math.sqrt(x * x - 1));\r\n    };\r\n\r\n    Math.atanh = Math.atanh || function (x) {\r\n        return Math.log((1 + x) / (1 - x)) / 2;\r\n    };\r\n\r\n    Math.log10 = Math.log10 || function (x) {\r\n        return Math.log(x) * Math.LOG10E;\r\n    };\r\n\r\n    Math.trunc = Math.trunc || function (x) {\r\n        if(isNaN(x)) {\r\n            return NaN;\r\n        }\r\n        if(x > 0) {\r\n            return Math.floor(x);\r\n        }\r\n        return Math.ceil(x);\r\n    };\r\n\r\n//Global functions =============================================================\r\n    /**\r\n     * This method will return a hash or a text representation of a Symbol, Matrix, or Vector.\r\n     * If all else fails it *assumes* the object has a toString method and will call that.\r\n     *\r\n     * @param {Object} obj\r\n     * @param {String} option get is as a hash\r\n     * @param {int} useGroup\r\n     * @returns {String}\r\n     */\r\n    function text(obj, option, useGroup, decp) { \r\n        var asHash = option === 'hash',\r\n                //whether to wrap numbers in brackets\r\n                wrapCondition = undefined,\r\n                opt = asHash ? undefined : option,\r\n                asDecimal = opt === 'decimal' || opt === 'decimals';\r\n\r\n        if(asDecimal && typeof decp === 'undefined')\r\n            decp = Settings.DEFAULT_DECP;\r\n\r\n        function toString(obj) {\r\n            switch(option)\r\n            {\r\n                case 'decimals':\r\n                case 'decimal':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return obj.valueOf();\r\n                case 'recurring':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf(\"'\") !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var negative = false;\r\n                    var m = Number(parts[0]);\r\n                    if(m < 0) {\r\n                        m = -m;\r\n                        negative = true;\r\n                    }\r\n                    var n = Number(parts[1]);\r\n                    if(!n)\r\n                        n = 1;\r\n\r\n                    //https://softwareengineering.stackexchange.com/questions/192070/what-is-a-efficient-way-to-find-repeating-decimal#comment743574_192081\r\n                    var quotient = Math.floor(m / n), c = 10 * (m - quotient * n);\r\n                    quotient = quotient.toString() + \".\";\r\n                    while(c && c < n) {\r\n                        c *= 10;\r\n                        quotient += \"0\";\r\n                    }\r\n                    var digits = \"\", passed = [], i = 0;\r\n                    while(true) {\r\n                        if(typeof passed[c] !== 'undefined') {\r\n                            var prefix = digits.slice(0, passed[c]),\r\n                                    cycle = digits.slice(passed[c]),\r\n                                    result = quotient + prefix + \"'\" + cycle + \"'\";\r\n                            return (negative ? \"-\" : \"\") + result.replace(\"'0'\", \"\").replace(/\\.$/, \"\");\r\n                        }\r\n                        var q = Math.floor(c / n), r = c - q * n;\r\n                        passed[c] = i;\r\n                        digits += q.toString();\r\n                        i += 1;\r\n                        c = 10 * r;\r\n                    }\r\n                case 'mixed':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    var str = obj.toString();\r\n                    //verify that the string is actually a fraction\r\n                    var frac = /^-?\\d+(?:\\/\\d+)?$/.exec(str);\r\n                    if(frac.length === 0)\r\n                        return str;\r\n\r\n                    //split the fraction into the numerator and denominator\r\n                    var parts = frac[0].split('/');\r\n                    var numer = new bigInt(parts[0]);\r\n                    var denom = new bigInt(parts[1]);\r\n                    if(denom.equals(0))\r\n                        denom = new bigInt(1);\r\n\r\n                    //return the quotient plus the remainder\r\n                    var divmod = numer.divmod(denom);\r\n                    var quotient = divmod.quotient;\r\n                    var remainder = divmod.remainder;\r\n                    var operator = parts[0][0] === '-' || quotient.equals(0) || remainder.equals(0) ? '' : '+';\r\n                    return (quotient.equals(0) ? '' : quotient.toString()) + operator + (remainder.equals(0) ? '' : (remainder.toString() + '/' + parts[1]));\r\n                case 'scientific':\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return false;\r\n                    };\r\n                    return new Scientific(obj.valueOf()).toString(Settings.SCIENTIFIC_MAX_DECIMAL_PLACES);\r\n                default:\r\n                    wrapCondition = wrapCondition || function (str) {\r\n                        return str.indexOf('/') !== -1;\r\n                    };\r\n\r\n                    return obj.toString();\r\n            }\r\n        }\r\n\r\n        //if the object is a symbol\r\n        if(isSymbol(obj)) {\r\n            var multiplier = '',\r\n                    power = '',\r\n                    sign = '',\r\n                    group = obj.group || useGroup,\r\n                    value = obj.value;\r\n\r\n            //if the value is to be used as a hash then the power and multiplier need to be suppressed\r\n            if(!asHash) {\r\n                //use asDecimal to get the object back as a decimal\r\n                var om = toString(obj.multiplier);\r\n                if(om == '-1' && String(obj.multiplier) === '-1') {\r\n                    sign = '-';\r\n                    om = '1';\r\n                }\r\n                //only add the multiplier if it's not 1\r\n                if(om != '1')\r\n                    multiplier = om;\r\n                //use asDecimal to get the object back as a decimal\r\n                var p = obj.power ? toString(obj.power) : '';\r\n                //only add the multiplier\r\n                if(p != '1') {\r\n                    //is it a symbol\r\n                    if(isSymbol(p)) {\r\n                        power = text(p, opt);\r\n                    }\r\n                    else {\r\n                        power = p;\r\n                    }\r\n                }\r\n            }\r\n\r\n            switch(group) {\r\n                case N:\r\n                    multiplier = '';\r\n                    //round if requested\r\n                    var m = decp && asDecimal ? obj.multiplier.toDecimal(decp) : toString(obj.multiplier);\r\n                    //if it's numerical then all we need is the multiplier\r\n                    value = String(obj.multiplier) == '-1' ? '1' : m;\r\n                    power = '';\r\n                    break;\r\n                case PL:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CP:\r\n                    value = obj.collectSymbols().map(function (x) {\r\n                        var txt = text(x, opt, useGroup, decp);\r\n                        if(txt == '0')\r\n                            txt = '';\r\n                        return txt;\r\n                    }).sort().join('+').replace(/\\+\\-/g, '-');\r\n                    break;\r\n                case CB:\r\n                    value = obj.collectSymbols(function (symbol) {\r\n                        var g = symbol.group;\r\n                        //both groups will already be in brackets if their power is greater than 1\r\n                        //so skip it.\r\n                        if((g === PL || g === CP) && (symbol.power.equals(1) && symbol.multiplier.equals(1))) {\r\n                            return inBrackets(text(symbol, opt));\r\n                        }\r\n                        return text(symbol, opt);\r\n                    }).join('*');\r\n                    break;\r\n                case EX:\r\n                    var pg = obj.previousGroup,\r\n                            pwg = obj.power.group;\r\n\r\n                    //PL are the exception. It's simpler to just collect and set the value\r\n                    if(pg === PL)\r\n                        value = obj.collectSymbols(text, opt).join('+').replace('+-', '-');\r\n                    if(!(pg === N || pg === S || pg === FN) && !asHash) {\r\n                        value = inBrackets(value);\r\n                    }\r\n\r\n                    if((pwg === CP || pwg === CB || pwg === PL || obj.power.multiplier.toString() != '1') && power) {\r\n                        power = inBrackets(power);\r\n                    }\r\n                    break;\r\n            }\r\n\r\n            if(group === FN) {\r\n                value = obj.fname + inBrackets(obj.args.map(function (symbol) {\r\n                    return text(symbol, opt);\r\n                }).join(','));\r\n            }\r\n            //TODO: Needs to be more efficient. Maybe.\r\n            if(group === FN && obj.fname in CUSTOM_OPERATORS) {\r\n                var a = text(obj.args[0]);\r\n                var b = text(obj.args[1]);\r\n                if(obj.args[0].isComposite()) //preserve the brackets\r\n                    a = inBrackets(a);\r\n                if(obj.args[1].isComposite()) //preserve the brackets\r\n                    b = inBrackets(b);\r\n                value = a + CUSTOM_OPERATORS[obj.fname] + b;\r\n            }\r\n            //wrap the power since / is less than ^\r\n            //TODO: introduce method call isSimple\r\n            if(power && group !== EX && wrapCondition(power)) {\r\n                power = inBrackets(power);\r\n            }\r\n\r\n            //the following groups are held together by plus or minus. They can be raised to a power or multiplied\r\n            //by a multiplier and have to be in brackets to preserve the order of precedence\r\n            if(((group === CP || group === PL) && (multiplier && multiplier != '1' || sign === '-'))\r\n                    || ((group === CB || group === CP || group === PL) && (power && power != '1'))\r\n                    || !asHash && group === P && value == -1\r\n                    || obj.fname === PARENTHESIS) {\r\n\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            if(decp && (option === 'decimal' || option === 'decimals' && multiplier)) {\r\n                multiplier = nround(multiplier, decp);\r\n            }\r\n\r\n\r\n            //add the sign back\r\n            var c = sign + multiplier;\r\n\r\n            if(multiplier && wrapCondition(multiplier))\r\n                c = inBrackets(c);\r\n\r\n            if(power < 0)\r\n                power = inBrackets(power);\r\n\r\n            //add the multiplication back\r\n            if(multiplier)\r\n                c = c + '*';\r\n\r\n            if(power) {\r\n                if(value === 'e' && Settings.E_TO_EXP) {\r\n                    return c + 'exp' + inBrackets(power);\r\n                }\r\n                power = Settings.POWER_OPERATOR + power;\r\n            }\r\n\r\n            //this needs serious rethinking. Must fix\r\n            if(group === EX && value.charAt(0) === '-') {\r\n                value = inBrackets(value);\r\n            }\r\n\r\n            var cv = c + value;\r\n\r\n            if(obj.parens) {\r\n                cv = inBrackets(cv);\r\n            }\r\n\r\n            return cv + power;\r\n        }\r\n        else if(isVector(obj)) {\r\n            var l = obj.elements.length,\r\n                    c = [];\r\n            for(var i = 0; i < l; i++)\r\n                c.push(obj.elements[i].text(option));\r\n            return '[' + c.join(',') + ']';\r\n        }\r\n        else {\r\n            try {\r\n                return obj.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Calculates prime factors for a number. It first checks if the number\r\n     * is a prime number. If it's not then it will calculate all the primes \r\n     * for that number.\r\n     * @param {int} num\r\n     * @returns {Array}\r\n     */\r\n\r\n    function primeFactors(num) {\r\n        if(isPrime(num)) {\r\n            return [num];\r\n        }\r\n\r\n        var l = num, i = 1, factors = [],\r\n                epsilon = 2.2204460492503130808472633361816E-16;\r\n        while(i < l) {\r\n            var quotient = num / i;\r\n            var whole = Math.floor(quotient);\r\n            var remainder = quotient - whole;\r\n\r\n            if(remainder <= epsilon && i > 1) {\r\n                // If the prime wasn't found but calculated then save it and\r\n                // add it as a factor.\r\n                if(isPrime(i)) {\r\n                    if(PRIMES.indexOf(i) === -1) {\r\n                        PRIMES.push(i);\r\n                    }\r\n                    factors.push(i);\r\n                }\r\n\r\n                // Check if the remainder is a prime\r\n                if(isPrime(whole)) {\r\n                    factors.push(whole);\r\n                    break;\r\n                }\r\n\r\n                l = whole;\r\n            }\r\n            i++;\r\n        }\r\n\r\n        return factors.sort(function (a, b) {\r\n            return a - b;\r\n        });\r\n    }\r\n    ;\r\n    primeFactors(314146179365)\r\n//Expression ===================================================================\r\n    /**\r\n     * This is what nerdamer returns. It's sort of a wrapper around the symbol class and\r\n     * provides the user with some useful functions. If you want to provide the user with extra\r\n     * library functions then add them to this class's prototype.\r\n     * @param {Symbol} symbol\r\n     * @returns {Expression} wraps around the Symbol class\r\n     */\r\n    function Expression(symbol) {\r\n        //we don't want arrays wrapped\r\n        this.symbol = symbol;\r\n    }\r\n    /**\r\n     * Returns stored expression at index. For first index use 1 not 0.\r\n     * @param {bool} asType\r\n     * @param {Integer} expression_number\r\n     */\r\n    Expression.getExpression = function (expression_number, asType) {\r\n        if(expression_number === 'last' || !expression_number)\r\n            expression_number = EXPRESSIONS.length;\r\n        if(expression_number === 'first')\r\n            expression_number = 1;\r\n        var index = expression_number - 1,\r\n                expression = EXPRESSIONS[index],\r\n                retval = expression ? new Expression(expression) : expression;\r\n        return retval;\r\n    };\r\n    Expression.prototype = {\r\n        /**\r\n         * Returns the text representation of the expression\r\n         * @param {String} opt - option of formatting numbers\r\n         * @param {Number} n The number of significant figures\r\n         * @returns {String}\r\n         */\r\n        text: function (opt, n) {\r\n            n = n || Settings.EXPRESSION_DECP;\r\n            opt = opt || 'decimals';\r\n            if(this.symbol.text_)\r\n                return this.symbol.text_(opt);\r\n\r\n            return text(this.symbol, opt, undefined, n);\r\n        },\r\n        /**\r\n         * Returns the latex representation of the expression\r\n         * @param {String} option - option for formatting numbers\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            if(this.symbol.latex)\r\n                return this.symbol.latex(option);\r\n            return LaTeX.latex(this.symbol, option);\r\n        },\r\n        valueOf: function () {\r\n            return this.symbol.valueOf();\r\n        },\r\n\r\n        /**\r\n         * Evaluates the expression and tries to reduce it to a number if possible.\r\n         * If an argument is given in the form of %{integer} it will evaluate that expression.\r\n         * Other than that it will just use it's own text and reparse\r\n         * @returns {Expression}\r\n         */\r\n        evaluate: function () {\r\n\r\n            // Don't evaluate an empty vector\r\n            if(isVector(this.symbol) && this.symbol.dimensions() === 0) {\r\n                return this;\r\n            }\r\n\r\n            var first_arg = arguments[0], expression, idx = 1;\r\n\r\n            //Enable getting of expressions using the % so for example %1 should get the first expression\r\n            if(typeof first_arg === 'string') {\r\n                expression = (first_arg.charAt(0) === '%') ? Expression.getExpression(first_arg.substr(1)).text() : first_arg;\r\n            }\r\n            else if(first_arg instanceof Expression || isSymbol(first_arg)) {\r\n                expression = first_arg.text();\r\n            }\r\n            else {\r\n                expression = this.symbol.text();\r\n                idx--;\r\n            }\r\n\r\n            var subs = arguments[idx] || {};\r\n\r\n            var retval = new Expression(block('PARSE2NUMBER', function () {\r\n                return _.parse(expression, subs);\r\n            }, true));\r\n\r\n            return retval;\r\n        },\r\n        /**\r\n         * Converts a symbol to a JS function. Pass in an array of variables to use that order instead of\r\n         * the default alphabetical order\r\n         * @param vars {Array}\r\n         */\r\n        buildFunction: function (vars) {\r\n            return Build.build(this.symbol, vars);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is just a plain old number\r\n         * @returns {boolean}\r\n         */\r\n        isNumber: function () {\r\n            return isNumericSymbol(this.symbol);\r\n        },\r\n        /**\r\n         * Checks to see if the expression is infinity\r\n         * @returns {boolean}\r\n         */\r\n        isInfinity: function () {\r\n            return Math.abs(this.symbol.multiplier) === Infinity;\r\n        },\r\n        /**\r\n         * Checks to see if the expression contains imaginary numbers\r\n         * @returns {boolean}\r\n         */\r\n        isImaginary: function () {\r\n            return evaluate(_.parse(this.symbol)).isImaginary();\r\n        },\r\n        /**\r\n         * Returns all the variables in the expression\r\n         * @returns {Array}\r\n         */\r\n        variables: function () {\r\n            return variables(this.symbol);\r\n        },\r\n\r\n        toString: function () {\r\n            try {\r\n                if(isArray(this.symbol))\r\n                    return '[' + this.symbol.toString() + ']';\r\n                return this.symbol.toString();\r\n            }\r\n            catch(e) {\r\n                return '';\r\n            }\r\n        },\r\n        //forces the symbol to be returned as a decimal\r\n        toDecimal: function (prec) {\r\n            Settings.precision = prec;\r\n            var dec = text(this.symbol, 'decimals');\r\n            Settings.precision = undefined;\r\n            return dec;\r\n        },\r\n        //checks to see if the expression is a fraction\r\n        isFraction: function () {\r\n            return isFraction(this.symbol);\r\n        },\r\n        //checks to see if the symbol is a multivariate polynomial\r\n        isPolynomial: function () {\r\n            return this.symbol.isPoly();\r\n        },\r\n        //performs a substitution\r\n        sub: function (symbol, for_symbol) {\r\n            return new Expression(this.symbol.sub(_.parse(symbol), _.parse(for_symbol)));\r\n        },\r\n        operation: function (otype, symbol) {\r\n            if(isExpression(symbol))\r\n                symbol = symbol.symbol;\r\n            else if(!isSymbol(symbol))\r\n                symbol = _.parse(symbol);\r\n            return new Expression(_[otype](this.symbol.clone(), symbol.clone()));\r\n        },\r\n        add: function (symbol) {\r\n            return this.operation('add', symbol);\r\n        },\r\n        subtract: function (symbol) {\r\n            return this.operation('subtract', symbol);\r\n        },\r\n        multiply: function (symbol) {\r\n            return this.operation('multiply', symbol);\r\n        },\r\n        divide: function (symbol) {\r\n            return this.operation('divide', symbol);\r\n        },\r\n        pow: function (symbol) {\r\n            return this.operation('pow', symbol);\r\n        },\r\n        expand: function () {\r\n            return new Expression(_.expand(this.symbol));\r\n        },\r\n        each: function (callback, i) {\r\n            if(this.symbol.each)\r\n                this.symbol.each(callback, i);\r\n            else if(isArray(this.symbol)) {\r\n                for(var i = 0; i < this.symbol.length; i++)\r\n                    callback.call(this.symbol, this.symbol[i], i);\r\n            }\r\n            else\r\n                callback.call(this.symbol);\r\n        },\r\n        eq: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = _.subtract(this.symbol.clone(), value);\r\n                return d.equals(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        lt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.lessThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n            ;\r\n        },\r\n        gt: function (value) {\r\n            if(!isSymbol(value))\r\n                value = _.parse(value);\r\n            try {\r\n                var d = evaluate(_.subtract(this.symbol.clone(), value));\r\n                return d.greaterThan(0);\r\n            }\r\n            catch(e) {\r\n                return false;\r\n            }\r\n        },\r\n        gte: function (value) {\r\n            return this.gt(value) || this.eq(value);\r\n        },\r\n        lte: function (value) {\r\n            return this.lt(value) || this.eq(value);\r\n        },\r\n\r\n        numerator: function () {\r\n            return new Expression(this.symbol.getNum());\r\n        },\r\n        denominator: function () {\r\n            return new Expression(this.symbol.getDenom());\r\n        },\r\n        hasFunction: function (f) {\r\n            return this.symbol.containsFunction(f);\r\n        },\r\n        contains: function (variable) {\r\n            return this.symbol.contains(variable);\r\n        }\r\n    };\r\n    //Aliases\r\n    Expression.prototype.toTeX = Expression.prototype.latex;\r\n\r\n    \r\n//Scientific ===================================================================\r\n    /*\r\n     * Javascript has the toExponential method but this allows you to work with string and therefore any number of digits of your choosing\r\n     * For example Scientific('464589498449496467924197545625247695464569568959124568489548454');\r\n     */\r\n\r\n    function Scientific(num) {\r\n        if(!(this instanceof Scientific))\r\n            return new Scientific(num);\r\n\r\n        num = String(typeof num === 'undefined' ? 0 : num); //convert to a string\r\n\r\n        //remove the sign\r\n        if(num.startsWith('-')) {\r\n            this.sign = -1;\r\n            //remove the sign\r\n            num = num.substr(1, num.length);\r\n        }\r\n        else {\r\n            this.sign = 1;\r\n        }\r\n\r\n        if(Scientific.isScientific(num)) {\r\n            this.fromScientific(num);\r\n        }\r\n        else {\r\n            this.convert(num);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Scientific.prototype = {\r\n        fromScientific: function (num) {\r\n            var parts = String(num).toLowerCase().split('e');\r\n            this.coeff = parts[0];\r\n            this.exponent = parts[1];\r\n\r\n            return this;\r\n        },\r\n        convert: function (num) {\r\n            //get wholes and decimals\r\n            var parts = num.split('.');\r\n            //make zero go away\r\n            var w = parts[0] || '';\r\n            var d = parts[1] || '';\r\n            //convert zero to blank strings\r\n            w = Scientific.removeLeadingZeroes(w);\r\n            d = Scientific.removeTrailingZeroes(d);\r\n            //find the location of the decimal place which is right after the wholes\r\n            var dot_location = w.length;\r\n            //add them together so we can move the dot\r\n            var n = w + d;\r\n            //find the next number\r\n            var zeroes = Scientific.leadingZeroes(n).length;\r\n            //set the exponent\r\n            this.exponent = dot_location - (zeroes + 1);\r\n            //set the coeff but first remove leading zeroes\r\n            var coeff = Scientific.removeLeadingZeroes(n);\r\n            this.coeff = coeff.charAt(0) + '.' + (coeff.substr(1, coeff.length) || '0');\r\n\r\n            //the coeff decimal places\r\n            var dec = this.coeff.split('.')[1] || ''; //if it's undefined or zero it's going to blank\r\n\r\n            this.decp = dec === '0' ? 0 : dec.length;\r\n            //decimals\r\n            this.dec = d;\r\n            //wholes\r\n            this.wholes = w;\r\n\r\n            return this;\r\n        },\r\n        round: function (num) {\r\n            var n = this.copy();\r\n\r\n            num = Number(num); //cast to number for safety\r\n            //since we know it guaranteed to be in the format {digit}{optional dot}{optional digits}\r\n            //we can round based on this\r\n            if(num === 0)\r\n                n.coeff = n.coeff.charAt(0);\r\n            else {\r\n                //get up to n-1 digits\r\n                var rounded = this.coeff.substring(0, num + 1);\r\n                //get the next two\r\n                var next_two = this.coeff.substring(num + 1, num + 3);\r\n                //the extra digit\r\n                var ed = next_two.charAt(0);\r\n\r\n                if(next_two.charAt(1) > 4)\r\n                    ed++;\r\n\r\n                n.coeff = rounded + ed;\r\n            }\r\n\r\n            return n;\r\n        },\r\n        copy: function () {\r\n            var n = new Scientific(0);\r\n            n.coeff = this.coeff;\r\n            n.exponent = this.exponent;\r\n            n.sign = this.sign;\r\n            return n;\r\n        },\r\n        toString: function (n) {\r\n            var retval;\r\n\r\n            if(Settings.SCIENTIFIC_IGNORE_ZERO_EXPONENTS && this.exponent === 0 && this.decp < n) {\r\n                if(this.decp === 0)\r\n                    retval = this.wholes;\r\n                else\r\n                    retval = this.coeff;\r\n            }\r\n            else {\r\n                var coeff = typeof n === 'undefined' ? this.coeff : Scientific.round(this.coeff, Math.min(n, this.decp || 1));\r\n                retval = this.exponent === 0 ? coeff : coeff + 'e' + this.exponent;\r\n            }\r\n\r\n            return (this.sign === -1 ? '-' : '') + retval;\r\n        }\r\n    };\r\n\r\n    Scientific.isScientific = function (num) {\r\n        return /\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(num);\r\n    };\r\n    Scientific.leadingZeroes = function (num) {\r\n        var match = num.match(/^(0*).*$/);\r\n        return match ? match[1] : '';\r\n    };\r\n    Scientific.removeLeadingZeroes = function (num) {\r\n        var match = num.match(/^0*(.*)$/);\r\n        return match ? match[1] : '';\r\n    };\r\n\r\n    Scientific.removeTrailingZeroes = function (num) {\r\n        var match = num.match(/0*$/);\r\n        return match ? num.substring(0, num.length - match[0].length) : '';\r\n    };\r\n\r\n    Scientific.round = function (c, n) {\r\n        var coeff = nround(c, n);\r\n        var m = String(coeff).split('.').pop();\r\n        var d = n - m.length;\r\n        //if we're asking for more significant figures\r\n        if(d > 0) {\r\n            coeff = coeff + (new Array(d + 1).join(0));\r\n        }\r\n        return coeff;\r\n    };\r\n\r\n//Frac =========================================================================\r\n    function Frac(n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        if(n === undefined)\r\n            return this;\r\n        try {\r\n            if(isInt(n)) {\r\n                try {\r\n                    this.num = bigInt(n);\r\n                    this.den = bigInt(1);\r\n                }\r\n                catch(e) {\r\n                    return Frac.simple(n);\r\n                }\r\n            }\r\n            else {\r\n                var frac = n instanceof bigDec ? Fraction.quickConversion(n) : Fraction.convert(n);\r\n                this.num = new bigInt(frac[0]);\r\n                this.den = new bigInt(frac[1]);\r\n            }\r\n        }\r\n        catch(e) {\r\n            return Frac.simple(n);\r\n        }\r\n\r\n    }\r\n    //safe to use with negative numbers or other types\r\n    Frac.create = function (n) {\r\n        if(n instanceof Frac)\r\n            return n;\r\n        n = n.toString();\r\n        var is_neg = n.charAt(0) === '-'; //check if it's negative\r\n        if(is_neg)\r\n            n = n.substr(1, n.length - 1); //remove the sign\r\n        var frac = new Frac(n);\r\n        //put the sign back\r\n        if(is_neg)\r\n            frac.negate();\r\n        return frac;\r\n    };\r\n    Frac.isFrac = function (o) {\r\n        return (o instanceof Frac);\r\n    };\r\n    Frac.quick = function (n, d) {\r\n        var frac = new Frac();\r\n        frac.num = new bigInt(n);\r\n        frac.den = new bigInt(d);\r\n        return frac;\r\n    };\r\n    Frac.simple = function (n) {\r\n        var nstr = String(scientificToDecimal(n)),\r\n                m_dc = nstr.split('.'),\r\n                num = m_dc.join(''),\r\n                den = 1,\r\n                l = (m_dc[1] || '').length;\r\n        for(var i = 0; i < l; i++)\r\n            den += '0';\r\n        var frac = Frac.quick(num, den);\r\n        return frac.simplify();\r\n    };\r\n    Frac.prototype = {\r\n        multiply: function (m) {\r\n            if(this.isOne()) {\r\n                return m.clone();\r\n            }\r\n            if(m.isOne()) {\r\n                return this.clone();\r\n            }\r\n\r\n            var c = this.clone();\r\n            c.num = c.num.multiply(m.num);\r\n            c.den = c.den.multiply(m.den);\r\n\r\n            return c.simplify();\r\n        },\r\n        divide: function (m) {\r\n            if(m.equals(0))\r\n                throw new DivisionByZero('Division by zero not allowed!');\r\n            return this.clone().multiply(m.clone().invert()).simplify();\r\n        },\r\n        subtract: function (m) {\r\n            return this.clone().add(m.clone().neg());\r\n        },\r\n        neg: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        add: function (m) {\r\n            var n1 = this.den, n2 = m.den, c = this.clone();\r\n            var a = c.num, b = m.num;\r\n            if(n1.equals(n2)) {\r\n                c.num = a.add(b);\r\n            }\r\n            else {\r\n                c.num = a.multiply(n2).add(b.multiply(n1));\r\n                c.den = n1.multiply(n2);\r\n            }\r\n\r\n            return c.simplify();\r\n        },\r\n        mod: function (m) {\r\n            var a = this.clone(),\r\n                    b = m.clone();\r\n            //make their denominators even and return the mod of their numerators\r\n            a.num = a.num.multiply(b.den);\r\n            a.den = a.den.multiply(b.den);\r\n            b.num = b.num.multiply(this.den);\r\n            b.den = b.den.multiply(this.den);\r\n            a.num = a.num.mod(b.num);\r\n            return a.simplify();\r\n        },\r\n        simplify: function () {\r\n            var gcd = bigInt.gcd(this.num, this.den);\r\n\r\n            this.num = this.num.divide(gcd);\r\n            this.den = this.den.divide(gcd);\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var m = new Frac();\r\n            m.num = new bigInt(this.num);\r\n            m.den = new bigInt(this.den);\r\n            return m;\r\n        },\r\n        decimal: function (prec) {\r\n            var sign = this.num.isNegative() ? '-' : '';\r\n            if(this.num.equals(this.den)) {\r\n                return '1';\r\n            }\r\n            //go plus one for rounding\r\n            prec = prec || Settings.PRECISION;\r\n            prec++;\r\n            var narr = [],\r\n                    n = this.num.abs(),\r\n                    d = this.den;\r\n            for(var i = 0; i < prec; i++) {\r\n                var w = n.divide(d), //divide out whole\r\n                        r = n.subtract(w.multiply(d)); //get remainder\r\n\r\n                narr.push(w);\r\n                if(r.equals(0))\r\n                    break;\r\n                n = r.times(10); //shift one dec place\r\n            }\r\n            var whole = narr.shift();\r\n            if(narr.length === 0) {\r\n                return sign + whole.toString();\r\n            }\r\n\r\n            if(i === prec) {\r\n                var lt = [];\r\n                //get the last two so we can round it\r\n                for(var i = 0; i < 2; i++)\r\n                    lt.unshift(narr.pop());\r\n                //put the last digit back by rounding the last two\r\n                narr.push(Math.round(lt.join('.')));\r\n            }\r\n\r\n            var dec = whole.toString() + '.' + narr.join('');\r\n            return sign + dec;\r\n        },\r\n        toDecimal: function (prec) { \r\n            prec = prec || Settings.PRECISION;\r\n            if(prec) {\r\n                return this.decimal(prec);\r\n            }\r\n            else {\r\n                return this.num / this.den;\r\n            }\r\n        },\r\n        qcompare: function (n) {\r\n            return [this.num.multiply(n.den), n.num.multiply(this.den)];\r\n        },\r\n        equals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].equals(q[1]);\r\n        },\r\n        absEquals: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].abs().equals(q[1]);\r\n        },\r\n        //lazy check to be fixed. Sufficient for now but will cause future problems\r\n        greaterThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].gt(q[1]);\r\n        },\r\n        gte: function (n) {\r\n            return this.greaterThan(n) || this.equals(n);\r\n        },\r\n        lte: function (n) {\r\n            return this.lessThan(n) || this.equals(n);\r\n        },\r\n        lessThan: function (n) {\r\n            if(!isNaN(n))\r\n                n = new Frac(n);\r\n            var q = this.qcompare(n);\r\n\r\n            return q[0].lt(q[1]);\r\n        },\r\n        isInteger: function () {\r\n            return this.den.equals(1);\r\n        },\r\n        negate: function () {\r\n            this.num = this.num.multiply(-1);\r\n            return this;\r\n        },\r\n        invert: function () {\r\n            var t = this.den;\r\n            //why invert 0/1? It'll become 1/0 and that's a lie.\r\n            if(!this.num.equals(0)) {\r\n                var isnegative = this.num.isNegative();\r\n                this.den = this.num.abs();\r\n                this.num = t;\r\n                if(isnegative)\r\n                    this.num = this.num.multiply(-1);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        isOne: function () {\r\n            return this.num.equals(1) && this.den.equals(1);\r\n        },\r\n        sign: function () {\r\n            return this.num.isNegative() ? -1 : 1;\r\n        },\r\n        abs: function () {\r\n            this.num = this.num.abs();\r\n            return this;\r\n        },\r\n        gcd: function (f) {\r\n            return Frac.quick(bigInt.gcd(f.num, this.num), bigInt.lcm(f.den, this.den));\r\n        },\r\n        toString: function () {\r\n            return !this.den.equals(1) ? this.num.toString() + '/' + this.den.toString() : this.num.toString();\r\n        },\r\n        valueOf: function () {\r\n//            if(this.num == 24) throw new Error(999)\r\n            if(Settings.USE_BIG)\r\n                return new bigDec(this.num.toString()).div(new bigDec(this.den.toString()));\r\n            var retval = this.num / this.den;\r\n            return retval;\r\n        },\r\n        isNegative: function () {\r\n            return this.toDecimal() < 0;\r\n        }\r\n    };\r\n\r\n//Symbol =======================================================================\r\n    /**\r\n     * All symbols e.g. x, y, z, etc or functions are wrapped in this class. All symbols have a multiplier and a group.\r\n     * All symbols except for \"numbers (group N)\" have a power.\r\n     * @class Primary data type for the Parser.\r\n     * @param {String} obj\r\n     * @returns {Symbol}\r\n     */\r\n    function Symbol(obj) {\r\n        var isInfinity = obj === 'Infinity';\r\n        // This enables the class to be instantiated without the new operator\r\n        if(!(this instanceof Symbol)) {\r\n            return new Symbol(obj);\r\n        }\r\n        // Convert big numbers to a string\r\n        if(obj instanceof bigDec) {\r\n            obj = obj.toString();\r\n        }\r\n        //define numeric symbols\r\n        if(/^(\\-?\\+?\\d+)\\.?\\d*e?\\-?\\+?\\d*/i.test(obj) || obj instanceof bigDec) {\r\n            this.group = N;\r\n            this.value = CONST_HASH;\r\n            this.multiplier = new Frac(obj);\r\n        }\r\n        //define symbolic symbols\r\n        else {\r\n            this.group = S;\r\n            validateName(obj);\r\n            this.value = obj;\r\n            this.multiplier = new Frac(1);\r\n            this.imaginary = obj === Settings.IMAGINARY;\r\n            this.isInfinity = isInfinity;\r\n        }\r\n\r\n        //As of 6.0.0 we switched to infinite precision so all objects have a power\r\n        //Although this is still redundant in constants, it simplifies the logic in\r\n        //other parts so we'll keep it\r\n        this.power = new Frac(1);\r\n\r\n        // Added to silence the strict warning.\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns vanilla imaginary symbol\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.imaginary = function () {\r\n        var s = new Symbol(Settings.IMAGINARY);\r\n        s.imaginary = true;\r\n        return s;\r\n    };\r\n    /**\r\n     * Return nerdamer's representation of Infinity\r\n     * @param {int} negative -1 to return negative infinity\r\n     * @returns {Symbol}\r\n     */\r\n    Symbol.infinity = function (negative) {\r\n        var v = new Symbol('Infinity');\r\n        if(negative === -1)\r\n            v.negate();\r\n        return v;\r\n    };\r\n    Symbol.shell = function (group, value) {\r\n        var symbol = new Symbol(value);\r\n        symbol.group = group;\r\n        symbol.symbols = {};\r\n        symbol.length = 0;\r\n        return symbol;\r\n    };\r\n    //sqrt(x) -> x^(1/2)\r\n    Symbol.unwrapSQRT = function (symbol, all) {\r\n        var p = symbol.power;\r\n        if(symbol.fname === SQRT && (symbol.isLinear() || all)) {\r\n            var t = symbol.args[0].clone();\r\n            t.power = t.power.multiply(new Frac(1 / 2));\r\n            t.multiplier = t.multiplier.multiply(symbol.multiplier);\r\n            symbol = t;\r\n            if(all)\r\n                symbol.power = p.multiply(new Frac(1 / 2));\r\n        }\r\n\r\n        return symbol;\r\n    };\r\n    Symbol.hyp = function (a, b) {\r\n        a = a || new Symbol(0);\r\n        b = b || new Symbol(0);\r\n        return _.sqrt(_.add(_.pow(a.clone(), new Symbol(2)), _.pow(b.clone(), new Symbol(2))));\r\n    };\r\n    //converts to polar form array\r\n    Symbol.toPolarFormArray = function (symbol) {\r\n        var re, im, r, theta;\r\n        re = symbol.realpart();\r\n        im = symbol.imagpart();\r\n        r = Symbol.hyp(re, im);\r\n        theta = re.equals(0) ? _.parse('pi/2') : _.trig.atan(_.divide(im, re));\r\n        return [r, theta];\r\n    };\r\n    //removes parentheses\r\n    Symbol.unwrapPARENS = function (symbol) {\r\n        if(symbol.fname === '') {\r\n            var r = symbol.args[0];\r\n            r.power = r.power.multiply(symbol.power);\r\n            r.multiplier = r.multiplier.multiply(symbol.multiplier);\r\n            if(symbol.fname === '')\r\n                return Symbol.unwrapPARENS(r);\r\n            return r;\r\n        }\r\n        return symbol;\r\n    };\r\n    //quickly creates a Symbol\r\n    Symbol.create = function (value, power) {\r\n        power = power === undefined ? 1 : power;\r\n        return _.parse('(' + value + ')^(' + power + ')');\r\n    };\r\n    Symbol.prototype = {\r\n        /**\r\n         * Gets nth root accounting for rounding errors\r\n         * @param {Number} n\r\n         * @return {Number}\r\n         */\r\n        getNth: function (n) {\r\n            // First calculate the root\r\n            var root = evaluate(_.pow(_.parse(this.multiplier), _.parse(n).invert()));\r\n            // Round of any errors\r\n            var rounded = _.parse(nround(root));\r\n            // Reverse the root\r\n            var e = evaluate(_.pow(rounded, _.parse(n)));\r\n            // If the rounded root equals the original number then we're good \r\n            if(e.equals(_.parse(this.multiplier))) {\r\n                return rounded;\r\n            }\r\n            // Otherwise return the unrounded version\r\n            return root;\r\n        },\r\n        /**\r\n         * Checks if symbol is to the nth power\r\n         * @returns {Boolean}\r\n         */\r\n        isToNth: function (n) {\r\n            // Start by check in the multiplier for squareness\r\n            // First get the root but round it because currently we still depend \r\n            var root = this.getNth(n);\r\n            var nthMultiplier = isInt(root);\r\n            var nthPower;\r\n\r\n            if(this.group === CB) {\r\n                // Start by assuming that all will be square.\r\n                nthPower = true;\r\n                // All it takes is for one of the symbols to not have an even power\r\n                // e.g. x^n1*y^n2 requires that both n1 and n2 are even\r\n                this.each(function (x) {\r\n                    var isNth = x.isToNth(n);\r\n\r\n                    if(!isNth) {\r\n                        nthPower = false;\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                // Check if the power is divisible by n if it's not a number.\r\n                nthPower = this.group === N ? true : isInt(_.divide(_.parse(this.power), _.parse(n)));\r\n            }\r\n\r\n            return nthMultiplier && nthPower;\r\n        },\r\n        /**\r\n         * Checks if a symbol is square\r\n         * @return {Boolean}\r\n         */\r\n        isSquare: function () {\r\n            return this.isToNth(2);\r\n        },\r\n        /**\r\n         * Checks if a symbol is cube\r\n         * @return {Boolean}\r\n         */\r\n        isCube: function () {\r\n            return this.isToNth(3);\r\n        },\r\n        /**\r\n         * Checks if a symbol is a bare variable\r\n         * @return {Boolean}\r\n         */\r\n        isSimple: function () {\r\n            return this.power.equals(1) && this.multiplier.equals(1);\r\n        },\r\n        /**\r\n         * Simplifies the power of the symbol\r\n         * @returns {Symbol} a clone of the symbol\r\n         */\r\n        powSimp: function () {\r\n            if(this.group === CB) {\r\n                var powers = [],\r\n                        sign = this.multiplier.sign();\r\n                this.each(function (x) {\r\n                    var p = x.power;\r\n                    //why waste time if I can't do anything anyway\r\n                    if(isSymbol(p) || p.equals(1))\r\n                        return this.clone();\r\n                    powers.push(p);\r\n                });\r\n                var min = new Frac(arrayMin(powers));\r\n\r\n                //handle the coefficient\r\n                //handle the multiplier\r\n                var sign = this.multiplier.sign(),\r\n                        m = this.multiplier.clone().abs(),\r\n                        mfactors = Math2.ifactor(m);\r\n                //if we have a multiplier of 6750 and a min of 2 then the factors are 5^3*5^3*2\r\n                //we can then reduce it to 2*3*5*(15)^2\r\n                var out_ = new Frac(1);\r\n                var in_ = new Frac(1);\r\n\r\n                for(var x in mfactors) {\r\n                    var n = new Frac(mfactors[x]);\r\n                    if(!n.lessThan(min)) {\r\n                        n = n.divide(min).subtract(new Frac(1));\r\n                        in_ = in_.multiply(new Frac(x)); //move the factor inside the bracket\r\n                    }\r\n\r\n                    out_ = out_.multiply(_.parse(inBrackets(x) + '^' + inBrackets(n)).multiplier);\r\n                }\r\n                var t = new Symbol(in_);\r\n                this.each(function (x) {\r\n                    x = x.clone();\r\n                    x.power = x.power.divide(min);\r\n                    t = _.multiply(t, x);\r\n                });\r\n\r\n                var xt = _.symfunction(PARENTHESIS, [t]);\r\n                xt.power = min;\r\n                xt.multiplier = sign < 0 ? out_.negate() : out_;\r\n\r\n                return xt;\r\n            }\r\n            return this.clone();\r\n        },\r\n        /**\r\n         * Checks to see if two functions are of equal value\r\n         * @param {Symbol} symbol\r\n         */\r\n        equals: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.value === symbol.value && this.power.equals(symbol.power)\r\n                    && this.multiplier.equals(symbol.multiplier)\r\n                    && this.group === symbol.group;\r\n        },\r\n        abs: function () {\r\n            var e = this.clone();\r\n            e.multiplier.abs();\r\n            return e;\r\n        },\r\n        // Greater than\r\n        gt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Greater than\r\n        gte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.greaterThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lt: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        // Less than\r\n        lte: function (symbol) {\r\n            if(!isSymbol(symbol))\r\n                symbol = new Symbol(symbol);\r\n            return this.equals(symbol) ||\r\n                    this.isConstant() && symbol.isConstant() && this.multiplier.lessThan(symbol.multiplier);\r\n        },\r\n        /**\r\n         * Because nerdamer doesn't group symbols by polynomials but\r\n         * rather a custom grouping method, this has to be\r\n         * reinserted in order to make use of most algorithms. This function\r\n         * checks if the symbol meets the criteria of a polynomial.\r\n         * @param {bool} multivariate\r\n         * @returns {boolean}\r\n         */\r\n        isPoly: function (multivariate) {\r\n            var g = this.group,\r\n                    p = this.power;\r\n            //the power must be a integer so fail if it's not\r\n            if(!isInt(p) || p < 0)\r\n                return false;\r\n            //constants and first orders\r\n            if(g === N || g === S || this.isConstant(true))\r\n                return true;\r\n            var vars = variables(this);\r\n            if(g === CB && vars.length === 1) {\r\n                //the variable is assumed the only one that was found\r\n                var v = vars[0];\r\n                //if no variable then guess what!?!? We're done!!! We have a polynomial.\r\n                if(!v)\r\n                    return true;\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    //sqrt(x)\r\n                    if(sym.group === FN && !sym.args[0].isConstant())\r\n                        return false;\r\n                    if(!sym.contains(v) && !sym.isConstant(true))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            //PL groups. These only fail if a power is not an int\r\n            //this should handle cases such as x^2*t\r\n            if(this.isComposite() || g === CB && multivariate) {\r\n                //fail if we're not checking for multivariate polynomials\r\n                if(!multivariate && vars.length > 1)\r\n                    return false;\r\n                //loop though the symbols and check if they qualify\r\n                for(var x in this.symbols) {\r\n                    //we've already the symbols if we're not checking for multivariates at this point\r\n                    //so we check the sub-symbols\r\n                    if(!this.symbols[x].isPoly(multivariate))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            else\r\n                return false;\r\n\r\n            /*\r\n             //all tests must have passed so we must be dealing with a polynomial\r\n             return true;\r\n             */\r\n        },\r\n        //removes the requested variable from the symbol and returns the remainder\r\n        stripVar: function (x, exclude_x) {\r\n            var retval;\r\n            if((this.group === PL || this.group === S) && this.value === x)\r\n                retval = new Symbol(exclude_x ? 0 : this.multiplier);\r\n            else if(this.group === CB && this.isLinear()) {\r\n                retval = new Symbol(1);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x, true))\r\n                        retval = _.multiply(retval, s.clone());\r\n                });\r\n                retval.multiplier = retval.multiplier.multiply(this.multiplier);\r\n            }\r\n            else if(this.group === CP && !this.isLinear()) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === CP && this.isLinear()) {\r\n                retval = new Symbol(0);\r\n                this.each(function (s) {\r\n                    if(!s.contains(x)) {\r\n                        var t = s.clone();\r\n                        t.multiplier = t.multiplier.multiply(this.multiplier);\r\n                        retval = _.add(retval, t);\r\n                    }\r\n                });\r\n                //BIG TODO!!! It doesn't make much sense\r\n                if(retval.equals(0))\r\n                    retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === EX && this.power.contains(x, true)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else if(this.group === FN && this.contains(x)) {\r\n                retval = new Symbol(this.multiplier);\r\n            }\r\n            else\r\n                //wth? This should technically be the multiplier.\r\n                //Unfortunately this method wasn't very well thought out :`(.\r\n                //should be: retval = new Symbol(this.multiplier);\r\n                //use: ((1+x^2)*sqrt(-1+x^2))^(-1) for correction.\r\n                //this will break a bunch of unit tests so be ready to for the long haul\r\n                retval = this.clone();\r\n\r\n\r\n            return retval;\r\n        },\r\n        //returns symbol in array form with x as base e.g. a*x^2+b*x+c = [c, b, a].\r\n        toArray: function (v, arr) {\r\n            arr = arr || {\r\n                arr: [],\r\n                add: function (x, idx) {\r\n                    var e = this.arr[idx];\r\n                    this.arr[idx] = e ? _.add(e, x) : x;\r\n                }\r\n            };\r\n            var g = this.group;\r\n\r\n            if(g === S && this.contains(v)) {\r\n                arr.add(new Symbol(this.multiplier), this.power);\r\n            }\r\n            else if(g === CB) {\r\n                var a = this.stripVar(v),\r\n                        x = _.divide(this.clone(), a.clone());\r\n                var p = x.isConstant() ? 0 : x.power;\r\n                arr.add(a, p);\r\n            }\r\n            else if(g === PL && this.value === v) {\r\n                this.each(function (x, p) {\r\n                    arr.add(x.stripVar(v), p);\r\n                });\r\n            }\r\n            else if(g === CP) {\r\n                //the logic: they'll be broken into symbols so e.g. (x^2+x)+1 or (a*x^2+b*x+c)\r\n                //each case is handled above\r\n                this.each(function (x) {\r\n                    x.toArray(v, arr);\r\n                });\r\n            }\r\n            else if(this.contains(v)) {\r\n                throw new NerdamerTypeError('Cannot convert to array! Exiting');\r\n            }\r\n            else {\r\n                arr.add(this.clone(), 0); //it's just a constant wrt to v\r\n            }\r\n            //fill the holes\r\n            arr = arr.arr; //keep only the array since we don't need the object anymore\r\n            for(var i = 0; i < arr.length; i++)\r\n                if(!arr[i])\r\n                    arr[i] = new Symbol(0);\r\n            return arr;\r\n        },\r\n        //checks to see if a symbol contans a function\r\n        hasFunc: function (v) {\r\n            var fn_group = this.group === FN || this.group === EX;\r\n            if(fn_group && !v || fn_group && this.contains(v))\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].hasFunc(v))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        sub: function (a, b) {\r\n            a = !isSymbol(a) ? _.parse(a) : a.clone();\r\n            b = !isSymbol(b) ? _.parse(b) : b.clone();\r\n            if(a.group === N || a.group === P)\r\n                err('Cannot substitute a number. Must be a variable');\r\n            var same_pow = false,\r\n                    a_is_unit_multiplier = a.multiplier.equals(1),\r\n                    m = this.multiplier.clone(),\r\n                    retval;\r\n            /*\r\n             * In order to make the substitution the bases have to first match take\r\n             * (x+1)^x -> (x+1)=y || x^2 -> x=y^6\r\n             * In both cases the first condition is that the bases match so we begin there\r\n             * Either both are PL or both are not PL but we cannot have PL and a non-PL group match\r\n             */\r\n            if(this.value === a.value && (this.group !== PL && a.group !== PL || this.group === PL && a.group === PL)) {\r\n                //we cleared the first hurdle but a subsitution may not be possible just yet\r\n                if(a_is_unit_multiplier || a.multiplier.equals(this.multiplier)) {\r\n                    if(a.isLinear()) {\r\n                        retval = b;\r\n                    }\r\n                    else if(a.power.equals(this.power)) {\r\n                        retval = b;\r\n                        same_pow = true;\r\n                    }\r\n                    if(a.multiplier.equals(this.multiplier))\r\n                        m = new Frac(1);\r\n                }\r\n            }\r\n            //the next thing is to handle CB\r\n            else if(this.group === CB || this.previousGroup === CB) {\r\n                retval = new Symbol(1);\r\n                this.each(function (x) {\r\n                    var subbed = _.parse(x.sub(a, b)); //parse it again for safety\r\n                    retval = _.multiply(retval, subbed);\r\n\r\n                });\r\n            }\r\n            else if(this.isComposite()) {\r\n                var symbol = this.clone();\r\n\r\n                if(a.isComposite() && symbol.isComposite() && symbol.isLinear() && a.isLinear()) {\r\n                    var find = function (stack, needle) {\r\n                        for(var x in stack.symbols) {\r\n                            var sym = stack.symbols[x];\r\n                            //if the symbol equals the needle or it's within the sub-symbols we're done\r\n                            if(sym.isComposite() && find(sym, needle) || sym.equals(needle))\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n                    //go fish\r\n                    for(var x in a.symbols) {\r\n                        if(!find(symbol, a.symbols[x]))\r\n                            return symbol.clone();\r\n                    }\r\n                    retval = _.add(_.subtract(symbol.clone(), a), b);\r\n                }\r\n                else {\r\n                    retval = new Symbol(0);\r\n                    symbol.each(function (x) {\r\n                        retval = _.add(retval, x.sub(a, b));\r\n                    });\r\n                }\r\n            }\r\n            else if(this.group === EX) {\r\n                // the parsed value could be a function so parse and sub\r\n                retval = _.parse(this.value).sub(a, b);\r\n            }\r\n            else if(this.group === FN) {\r\n                var nargs = [];\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    var arg = this.args[i];\r\n                    if(!isSymbol(arg))\r\n                        arg = _.parse(arg);\r\n                    nargs.push(arg.sub(a, b));\r\n                }\r\n                retval = _.symfunction(this.fname, nargs);\r\n            }\r\n            //if we did manage a substitution\r\n            if(retval) {\r\n                if(!same_pow) {\r\n                    //substitute the power\r\n                    var p = this.group === EX ? this.power.sub(a, b) : _.parse(this.power);\r\n                    //now raise the symbol to that power\r\n                    retval = _.pow(retval, p);\r\n                }\r\n\r\n                //transfer the multiplier\r\n                retval.multiplier = retval.multiplier.multiply(m);\r\n\r\n                //done\r\n                return retval;\r\n            }\r\n            //if all else fails\r\n            return this.clone();\r\n        },\r\n        isMonomial: function () {\r\n            if(this.group === S)\r\n                return true;\r\n            if(this.group === CB) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].group !== S)\r\n                        return false;\r\n            }\r\n            else\r\n                return false;\r\n            return true;\r\n        },\r\n        isPi: function () {\r\n            return this.group === S && this.value === 'pi';\r\n        },\r\n        sign: function () {\r\n            return this.multiplier.sign();\r\n        },\r\n        isE: function () {\r\n            return this.value === 'e';\r\n        },\r\n        isSQRT: function () {\r\n            return this.fname === SQRT;\r\n        },\r\n        isConstant: function (check_all, check_symbols) {\r\n            if(check_symbols && this.group === CB) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].isConstant(true))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(check_all === 'functions' && this.isComposite()) {\r\n                var isConstant = true;\r\n\r\n                this.each(function (x) {\r\n                    if(!x.isConstant(check_all, check_symbols)) {\r\n                        isConstant = false;\r\n                    }\r\n                }, true);\r\n\r\n                return isConstant;\r\n            }\r\n\r\n            if(check_all === 'all' && (this.isPi() || this.isE())) {\r\n                return true;\r\n            }\r\n\r\n            if(check_all && this.group === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(!this.args[i].isConstant(check_all))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n\r\n            if(check_all)\r\n                return isNumericSymbol(this);\r\n            return this.value === CONST_HASH;\r\n        },\r\n        //the symbols is imaginary if\r\n        //1. n*i\r\n        //2. a+b*i\r\n        //3. a*i\r\n        isImaginary: function () {\r\n            if(this.imaginary)\r\n                return true;\r\n            else if(this.symbols) {\r\n                for(var x in this.symbols)\r\n                    if(this.symbols[x].isImaginary())\r\n                        return true;\r\n            }\r\n            return false;\r\n        },\r\n        /**\r\n         * Returns the real part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        realpart: function () {\r\n            if(this.isConstant()) {\r\n                return this.clone();\r\n            }\r\n            else if(this.imaginary)\r\n                return new Symbol(0);\r\n            else if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.realpart());\r\n                });\r\n                return retval;\r\n            }\r\n            else if(this.isImaginary())\r\n                return new Symbol(0);\r\n            return this.clone();\r\n        },\r\n        /*\r\n         * Return imaginary part of a symbol\r\n         * @returns {Symbol}\r\n         */\r\n        imagpart: function () {\r\n            if(this.group === S && this.isImaginary())\r\n                return new Symbol(this.multiplier);\r\n            if(this.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                this.each(function (x) {\r\n                    retval = _.add(retval, x.imagpart());\r\n                });\r\n                return retval;\r\n            }\r\n            if(this.group === CB)\r\n                return this.stripVar(Settings.IMAGINARY);\r\n            return new Symbol(0);\r\n        },\r\n        isInteger: function () {\r\n            return this.isConstant() && this.multiplier.isInteger();\r\n        },\r\n        isLinear: function (wrt) {\r\n            if(wrt) {\r\n                if(this.isConstant())\r\n                    return true;\r\n                if(this.group === S) {\r\n                    if(this.value === wrt)\r\n                        return this.power.equals(1);\r\n                    else\r\n                        return true;\r\n                }\r\n\r\n                if(this.isComposite() && this.power.equals(1)) {\r\n                    for(var x in this.symbols) {\r\n                        if(!this.symbols[x].isLinear(wrt))\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                if(this.group === CB && this.symbols[wrt])\r\n                    return this.symbols[wrt].isLinear(wrt);\r\n                return false;\r\n            }\r\n            else\r\n                return this.power.equals(1);\r\n        },\r\n        /**\r\n         * Checks to see if a symbol has a function by a specified name or within a specified list\r\n         * @param {String|String[]} names\r\n         * @returns {Boolean}\r\n         */\r\n        containsFunction: function (names) {\r\n            if(typeof names === 'string')\r\n                names = [names];\r\n            if(this.group === FN && names.indexOf(this.fname) !== -1)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].containsFunction(names))\r\n                        return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        multiplyPower: function (p2) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1))\r\n                return this;\r\n\r\n            var p1 = this.power;\r\n\r\n            if(this.group !== EX && p2.group === N) {\r\n                var p = p2.multiplier;\r\n                if(this.group === N && !p.isInteger()) {\r\n                    this.convert(P);\r\n                }\r\n\r\n                this.power = p1.equals(1) ? p.clone() : p1.multiply(p);\r\n\r\n                if(this.group === P && isInt(this.power)) {\r\n                    //bring it back to an N\r\n                    this.value = Math.pow(this.value, this.power);\r\n                    this.toLinear();\r\n                    this.convert(N);\r\n                }\r\n            }\r\n            else {\r\n                if(this.group !== EX) {\r\n                    p1 = new Symbol(p1);\r\n                    this.convert(EX);\r\n                }\r\n                this.power = _.multiply(p1, p2);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        setPower: function (p, retainSign) {\r\n            //leave out 1\r\n            if(this.group === N && this.multiplier.equals(1)) {\r\n                return this;\r\n            }\r\n            if(this.group === EX && !isSymbol(p)) {\r\n                this.group = this.previousGroup;\r\n                delete this.previousGroup;\r\n                if(this.group === N) {\r\n                    this.multiplier = new Frac(this.value);\r\n                    this.value = CONST_HASH;\r\n                }\r\n                else\r\n                    this.power = p;\r\n            }\r\n            else {\r\n                var isSymbolic = false;\r\n                if(isSymbol(p)) {\r\n                    if(p.group === N) {\r\n                        //p should be the multiplier instead\r\n                        p = p.multiplier;\r\n\r\n                    }\r\n                    else {\r\n                        isSymbolic = true;\r\n                    }\r\n                }\r\n                var group = isSymbolic ? EX : P;\r\n                this.power = p;\r\n                if(this.group === N && group)\r\n                    this.convert(group, retainSign);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * Checks to see if symbol is located in the denominator\r\n         * @returns {boolean}\r\n         */\r\n        isInverse: function () {\r\n            if(this.group === EX)\r\n                return (this.power.multiplier.lessThan(0));\r\n            return this.power < 0;\r\n        },\r\n        /**\r\n         * Make a duplicate of a symbol by copying a predefined list of items.\r\n         * The name 'copy' would probably be a more appropriate name.\r\n         * to a new symbol\r\n         * @param {Symbol} c\r\n         * @returns {Symbol}\r\n         */\r\n        clone: function (c) {\r\n            var clone = c || new Symbol(0),\r\n                    //list of properties excluding power as this may be a symbol and would also need to be a clone.\r\n                    properties = [\r\n                        'value', 'group', 'length', 'previousGroup', 'imaginary', 'fname', 'args', 'isInfinity', 'scientific'],\r\n                    l = properties.length, i;\r\n            if(this.symbols) {\r\n                clone.symbols = {};\r\n                for(var x in this.symbols) {\r\n                    clone.symbols[x] = this.symbols[x].clone();\r\n                }\r\n            }\r\n\r\n            for(i = 0; i < l; i++) {\r\n                if(this[properties[i]] !== undefined) {\r\n                    clone[properties[i]] = this[properties[i]];\r\n                }\r\n            }\r\n\r\n            clone.power = this.power.clone();\r\n            clone.multiplier = this.multiplier.clone();\r\n            //add back the flag to track if this symbol is a conversion symbol\r\n            if(this.isConversion)\r\n                clone.isConversion = this.isConversion;\r\n\r\n            if(this.isUnit)\r\n                clone.isUnit = this.isUnit;\r\n\r\n            return clone;\r\n        },\r\n        /**\r\n         * Converts a symbol multiplier to one.\r\n         * @param {Boolean} keepSign Keep the multiplier as negative if the multiplier is negative and keepSign is true\r\n         * @returns {Symbol}\r\n         */\r\n        toUnitMultiplier: function (keepSign) {\r\n            this.multiplier.num = new bigInt(this.multiplier.num.isNegative() && keepSign ? -1 : 1);\r\n            this.multiplier.den = new bigInt(1);\r\n            return this;\r\n        },\r\n        /**\r\n         * Converts a Symbol's power to one.\r\n         * @returns {Symbol}\r\n         */\r\n        toLinear: function () {\r\n            // Do nothing if it's already linear\r\n            if(this.power.equals(1)) {\r\n                return this;\r\n            }\r\n            this.setPower(new Frac(1));\r\n            return this;\r\n        },\r\n        /**\r\n         * Iterates over all the sub-symbols. If no sub-symbols exist then it's called on itself\r\n         * @param {Function} fn\r\n         * @@param {Boolean} deep If true it will itterate over the sub-symbols their symbols as well\r\n         */\r\n        each: function (fn, deep) {\r\n            if(!this.symbols) {\r\n                fn.call(this, this, this.value);\r\n            }\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var sym = this.symbols[x];\r\n                    if(sym.group === PL && deep) {\r\n                        for(var y in sym.symbols) {\r\n                            fn.call(x, sym.symbols[y], y);\r\n                        }\r\n                    }\r\n                    else\r\n                        fn.call(this, sym, x);\r\n                }\r\n            }\r\n        },\r\n        /**\r\n         * A numeric value to be returned for Javascript. It will try to\r\n         * return a number as far a possible but in case of a pure symbolic\r\n         * symbol it will just return its text representation\r\n         * @returns {String|Number}\r\n         */\r\n        valueOf: function () {\r\n            if(this.group === N)\r\n                return this.multiplier.valueOf();\r\n            else if(this.power === 0) {\r\n                return 1;\r\n            }\r\n            else if(this.multiplier === 0) {\r\n                return 0;\r\n            }\r\n            else {\r\n                return text(this, 'decimals');\r\n            }\r\n        },\r\n        /**\r\n         * Checks to see if a symbols has a particular variable within it.\r\n         * Pass in true as second argument to include the power of exponentials\r\n         * which aren't check by default.\r\n         * @example var s = _.parse('x+y+z'); s.contains('y');\r\n         * //returns true\r\n         * @param {any} variable\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        contains: function (variable, all) {\r\n            //contains expects a string\r\n            variable = String(variable);\r\n            var g = this.group;\r\n            if(this.value === variable)\r\n                return true;\r\n            if(this.symbols) {\r\n                for(var x in this.symbols) {\r\n                    if(this.symbols[x].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n            if(g === FN || this.previousGroup === FN) {\r\n                for(var i = 0; i < this.args.length; i++) {\r\n                    if(this.args[i].contains(variable, all))\r\n                        return true;\r\n                }\r\n            }\r\n\r\n            if(g === EX) {\r\n                //exit only if it does\r\n                if(all && this.power.contains(variable, all)) {\r\n                    return true;\r\n                }\r\n                if(this.value === variable)\r\n                    return true;\r\n\r\n            }\r\n\r\n            return this.value === variable;\r\n        },\r\n        /**\r\n         * Negates a symbols\r\n         * @returns {boolean}\r\n         */\r\n        negate: function () {\r\n            this.multiplier.negate();\r\n            if(this.group === CP || this.group === PL)\r\n                this.distributeMultiplier();\r\n            return this;\r\n        },\r\n        /**\r\n         * Inverts a symbol\r\n         * @param {boolean} power_only\r\n         * @param {boolean} all\r\n         * @returns {boolean}\r\n         */\r\n        invert: function (power_only, all) {\r\n            //invert the multiplier\r\n            if(!power_only)\r\n                this.multiplier = this.multiplier.invert();\r\n            //invert the rest\r\n            if(isSymbol(this.power)) {\r\n                this.power.negate();\r\n            }\r\n            else if(this.group === CB && all) {\r\n                this.each(function (x) {\r\n                    return x.invert();\r\n                });\r\n            }\r\n            else {\r\n                if(this.power && this.group !== N)\r\n                    this.power.negate();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * Symbols of group CP or PL may have the multiplier being carried by\r\n         * the top level symbol at any given time e.g. 2*(x+y+z). This is\r\n         * convenient in many cases, however in some cases the multiplier needs\r\n         * to be carried individually e.g. 2*x+2*y+2*z.\r\n         * This method distributes the multiplier over the entire symbol\r\n         * @param {boolean} all\r\n         * @returns {Symbol}\r\n         */\r\n        distributeMultiplier: function (all) {\r\n            var is_one = all ? this.power.absEquals(1) : this.power.equals(1);\r\n            if(this.symbols && is_one && this.group !== CB && !this.multiplier.equals(1)) {\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    s.multiplier = s.multiplier.multiply(this.multiplier);\r\n                    s.distributeMultiplier();\r\n                }\r\n                this.toUnitMultiplier();\r\n            }\r\n\r\n            return this;\r\n        },\r\n        /**\r\n         * This method expands the exponent over the entire symbol just like\r\n         * distributeMultiplier\r\n         * @returns {Symbol}\r\n         */\r\n        distributeExponent: function () {\r\n            if(!this.power.equals(1)) {\r\n                var p = this.power;\r\n                for(var x in this.symbols) {\r\n                    var s = this.symbols[x];\r\n                    if(s.group === EX) {\r\n                        s.power = _.multiply(s.power, new Symbol(p));\r\n                    }\r\n                    else {\r\n                        this.symbols[x].power = this.symbols[x].power.multiply(p);\r\n                    }\r\n                }\r\n                this.toLinear();\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method will attempt to up-convert or down-convert one symbol\r\n         * from one group to another. Not all symbols are convertible from one\r\n         * group to another however. In that case the symbol will remain\r\n         * unchanged.\r\n         * @param {int} group\r\n         * @param {string} imaginary\r\n         */\r\n        convert: function (group, imaginary) {\r\n            if(group > FN) {\r\n                //make a clone of this symbol;\r\n                var cp = this.clone();\r\n\r\n                //attach a symbols object and upgrade the group\r\n                this.symbols = {};\r\n\r\n                if(group === CB) {\r\n                    //symbol of group CB hold symbols bound together through multiplication\r\n                    //because of commutativity this multiplier can technically be anywhere within the group\r\n                    //to keep track of it however it's easier to always have the top level carry it\r\n                    cp.toUnitMultiplier();\r\n                }\r\n                else {\r\n                    //reset the symbol\r\n                    this.toUnitMultiplier();\r\n                }\r\n\r\n                if(this.group === FN) {\r\n                    cp.args = this.args;\r\n                    delete this.args;\r\n                    delete this.fname;\r\n                }\r\n\r\n                //the symbol may originate from the symbol i but this property no longer holds true\r\n                //after copying\r\n                if(this.isImgSymbol)\r\n                    delete this.isImgSymbol;\r\n\r\n                this.toLinear();\r\n                //attach a clone of this symbol to the symbols object using its proper key\r\n                this.symbols[cp.keyForGroup(group)] = cp;\r\n                this.group = group;\r\n                //objects by default don't have a length property. However, in order to keep track of the number\r\n                //of sub-symbols we have to impliment our own.\r\n                this.length = 1;\r\n            }\r\n            else if(group === EX) {\r\n                //1^x is just one so check and make sure\r\n                if(!(this.group === N && this.multiplier.equals(1))) {\r\n                    if(this.group !== EX)\r\n                        this.previousGroup = this.group;\r\n                    if(this.group === N) {\r\n                        this.value = this.multiplier.num.toString();\r\n                        this.toUnitMultiplier();\r\n                    }\r\n                    //update the hash to reflect the accurate hash\r\n                    else\r\n                        this.value = text(this, 'hash');\r\n\r\n                    this.group = EX;\r\n                }\r\n            }\r\n            else if(group === N) {\r\n                var m = this.multiplier.toDecimal();\r\n                if(this.symbols)\r\n                    this.symbols = undefined;\r\n                new Symbol(this.group === P ? m * Math.pow(this.value, this.power) : m).clone(this);\r\n            }\r\n            else if(group === P && this.group === N) {\r\n                this.value = imaginary ? this.multiplier.num.toString() : Math.abs(this.multiplier.num.toString());\r\n                this.toUnitMultiplier(!imaginary);\r\n                this.group = P;\r\n            }\r\n            return this;\r\n        },\r\n        /**\r\n         * This method is one of the principal methods to make it all possible.\r\n         * It performs cleanup and prep operations whenever a symbols is\r\n         * inserted. If the symbols results in a 1 in a CB (multiplication)\r\n         * group for instance it will remove the redundant symbol. Similarly\r\n         * in a symbol of group PL or CP (symbols glued by multiplication) it\r\n         * will remove any dangling zeroes from the symbol. It will also\r\n         * up-convert or down-convert a symbol if it detects that it's\r\n         * incorrectly grouped. It should be noted that this method is not\r\n         * called directly but rather by the 'attach' method for addition groups\r\n         * and the 'combine' method for multiplication groups.\r\n         * @param {Symbol} symbol\r\n         * @param {String} action\r\n         */\r\n        insert: function (symbol, action) {\r\n            //this check can be removed but saves a lot of aggravation when trying to hunt down\r\n            //a bug. If left, you will instantly know that the error can only be between 2 symbols.\r\n            if(!isSymbol(symbol))\r\n                err('Object ' + symbol + ' is not of type Symbol!');\r\n            if(this.symbols) {\r\n                var group = this.group;\r\n                if(group > FN) {\r\n                    var key = symbol.keyForGroup(group);\r\n                    var existing = key in this.symbols ? this.symbols[key] : false; //check if there's already a symbol there\r\n                    if(action === 'add') {\r\n                        var hash = key;\r\n                        if(existing) {\r\n                            //add them together using the parser\r\n                            this.symbols[hash] = _.add(existing, symbol);\r\n                            //if the addition resulted in a zero multiplier remove it\r\n                            if(this.symbols[hash].multiplier.equals(0)) {\r\n                                delete this.symbols[hash];\r\n                                this.length--;\r\n\r\n                                if(this.length === 0) {\r\n                                    this.convert(N);\r\n                                    this.multiplier = new Frac(0);\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                    }\r\n                    else {\r\n                        //check if this is of group P and unwrap before inserting\r\n                        if(symbol.group === P && isInt(symbol.power)) {\r\n                            symbol.convert(N);\r\n                        }\r\n\r\n                        //transfer the multiplier to the upper symbol but only if the symbol numeric\r\n                        if(symbol.group !== EX) {\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                            symbol.toUnitMultiplier();\r\n                        }\r\n                        else {\r\n                            symbol.parens = symbol.multiplier.lessThan(0);\r\n                            this.multiplier = this.multiplier.multiply(symbol.multiplier.clone().abs());\r\n                            symbol.toUnitMultiplier(true);\r\n                        }\r\n\r\n                        if(existing) {\r\n                            //remove because the symbol may have changed\r\n                            symbol = _.multiply(remove(this.symbols, key), symbol);\r\n                            if(symbol.isConstant()) {\r\n                                this.multiplier = this.multiplier.multiply(symbol.multiplier);\r\n                                symbol = new Symbol(1); //the dirty work gets done down the line when it detects 1\r\n                            }\r\n\r\n                            this.length--;\r\n                            //clean up\r\n                        }\r\n\r\n                        //don't insert the symbol if it's 1\r\n                        if(!symbol.isOne(true)) {\r\n                            this.symbols[key] = symbol;\r\n                            this.length++;\r\n                        }\r\n                        else if(symbol.multiplier.lessThan(0)) {\r\n                            this.negate(); //put back the sign\r\n                        }\r\n                    }\r\n\r\n                    //clean up\r\n                    if(this.length === 0)\r\n                        this.convert(N);\r\n                    //update the hash\r\n                    if(this.group === CP || this.group === CB) {\r\n                        this.updateHash();\r\n                    }\r\n                }\r\n            }\r\n\r\n            return this;\r\n        },\r\n        //the insert method for addition\r\n        attach: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'add');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'add');\r\n        },\r\n        //the insert method for multiplication\r\n        combine: function (symbol) {\r\n            if(isArray(symbol)) {\r\n                for(var i = 0; i < symbol.length; i++)\r\n                    this.insert(symbol[i], 'multiply');\r\n                return this;\r\n            }\r\n            return this.insert(symbol, 'multiply');\r\n        },\r\n        /**\r\n         * This method should be called after any major \"surgery\" on a symbol.\r\n         * It updates the hash of the symbol for example if the fname of a\r\n         * function has changed it will update the hash of the symbol.\r\n         */\r\n        updateHash: function () {\r\n            if(this.group === N)\r\n                return;\r\n\r\n            if(this.group === FN) {\r\n                var contents = '',\r\n                        args = this.args,\r\n                        is_parens = this.fname === PARENTHESIS;\r\n                for(var i = 0; i < args.length; i++)\r\n                    contents += (i === 0 ? '' : ',') + text(args[i]);\r\n                var fn_name = is_parens ? '' : this.fname;\r\n                this.value = fn_name + (is_parens ? contents : inBrackets(contents));\r\n            }\r\n            else if(!(this.group === S || this.group === PL)) {\r\n                this.value = text(this, 'hash');\r\n            }\r\n        },\r\n        /**\r\n         * this function defines how every group in stored within a group of\r\n         * higher order think of it as the switchboard for the library. It\r\n         * defines the hashes for symbols.\r\n         * @param {int} group\r\n         */\r\n        keyForGroup: function (group) {\r\n            var g = this.group;\r\n            var key;\r\n\r\n            if(g === N) {\r\n                key = this.value;\r\n            }\r\n            else if(g === S || g === P) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === FN) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === PL) {\r\n                //if the order is reversed then we'll assume multiplication\r\n                //TODO: possible future dilemma\r\n                if(group === CB)\r\n                    key = text(this, 'hash');\r\n                else if(group === CP) {\r\n                    if(this.power.equals(1))\r\n                        key = this.value;\r\n                    else\r\n                        key = inBrackets(text(this, 'hash')) + Settings.POWER_OPERATOR + this.power.toDecimal();\r\n                }\r\n                else if(group === PL)\r\n                    key = this.power.toString();\r\n                else\r\n                    key = this.value;\r\n                return key;\r\n            }\r\n            else if(g === CP) {\r\n                if(group === CP) {\r\n                    key = text(this, 'hash');\r\n                }\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = this.value;\r\n            }\r\n            else if(g === CB) {\r\n                if(group === PL)\r\n                    key = this.power.toDecimal();\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n            else if(g === EX) {\r\n                if(group === PL)\r\n                    key = text(this.power);\r\n                else\r\n                    key = text(this, 'hash');\r\n            }\r\n\r\n            return key;\r\n        },\r\n        /**\r\n         * Symbols are typically stored in an object which works fine for most\r\n         * cases but presents a problem when the order of the symbols makes\r\n         * a difference. This function simply collects all the symbols and\r\n         * returns them as an array. If a function is supplied then that\r\n         * function is called on every symbol contained within the object.\r\n         * @param {Function} fn\r\n         * @param {Object} opt\r\n         * @param {Function} sort_fn\r\n         * @@param {Boolean} expand_symbol\r\n         * @returns {Array}\r\n         */\r\n        collectSymbols: function (fn, opt, sort_fn, expand_symbol) {\r\n            var collected = [];\r\n            if(!this.symbols)\r\n                collected.push(this);\r\n            else {\r\n                for(var x in this.symbols) {\r\n                    var symbol = this.symbols[x];\r\n                    if(expand_symbol && (symbol.group === PL || symbol.group === CP)) {\r\n                        collected = collected.concat(symbol.collectSymbols());\r\n                    }\r\n                    else\r\n                        collected.push(fn ? fn(symbol, opt) : symbol);\r\n                }\r\n            }\r\n            if(sort_fn === null)\r\n                sort_fn = undefined; //WTF Firefox? Seriously?\r\n\r\n            return collected.sort(sort_fn);//sort hopefully gives us some sort of consistency\r\n        },\r\n        /**\r\n         * Returns the latex representation of the symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        latex: function (option) {\r\n            return LaTeX.latex(this, option);\r\n        },\r\n        /**\r\n         * Returns the text representation of a symbol\r\n         * @param {String} option\r\n         * @returns {String}\r\n         */\r\n        text: function (option) {\r\n            return text(this, option);\r\n        },\r\n        /**\r\n         * Checks if the function evaluates to 1. e.g. x^0 or 1 :)\r\n         * @@param {bool} abs Compares the absolute value\r\n         */\r\n        isOne: function (abs) {\r\n            var f = abs ? 'absEquals' : 'equals';\r\n            if(this.group === N)\r\n                return this.multiplier[f](1);\r\n            else\r\n                return this.power.equals(0);\r\n        },\r\n        isComposite: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CP || g === PL || pg === PL || pg === CP;\r\n        },\r\n        isCombination: function () {\r\n            var g = this.group,\r\n                    pg = this.previousGroup;\r\n            return g === CB || pg === CB;\r\n        },\r\n        lessThan: function (n) {\r\n            return this.multiplier.lessThan(n);\r\n        },\r\n        greaterThan: function (n) {\r\n            if(!isSymbol(n)) {\r\n                n = new Symbol(n);\r\n            }\r\n\r\n            // We can't tell for sure if a is greater than be if they're not both numbers\r\n            if(!this.isConstant(true) || !n.isConstant(true)) {\r\n                return false;\r\n            }\r\n\r\n            return this.multiplier.greaterThan(n.multiplier);\r\n        },\r\n        /**\r\n         * Get's the denominator of the symbol if the symbol is of class CB (multiplication)\r\n         * with other classes the symbol is either the denominator or not.\r\n         * Take x^-1+x^-2. If the symbol was to be mixed such as x+x^-2 then the symbol doesn't have have an exclusive\r\n         * denominator and has to be found by looking at the actual symbols themselves.\r\n         */\r\n        getDenom: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(this.group === CB && this.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.lessThan(0) || symbol.group === EX && symbol.power.multiplier.lessThan(0)) {\r\n                var d = _.parse(symbol.multiplier.den);\r\n                retval = symbol.toUnitMultiplier();\r\n                retval.power.negate();\r\n                retval = _.multiply(d, retval); //put back the coeff\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.den);\r\n                for(var x in symbol.symbols) {\r\n                    var s = symbol.symbols[x];\r\n                    if(s.power < 0 || s.group === EX && s.power.multiplier.lessThan(0))\r\n                        retval = _.multiply(retval, symbol.symbols[x].clone().invert());\r\n                }\r\n            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.den);\r\n            }\r\n            return retval;\r\n        },\r\n        getNum: function () {\r\n            var retval, symbol;\r\n            symbol = this.clone();\r\n            //e.g. 1/(x*(x+1))\r\n            if(symbol.group === CB && symbol.power.lessThan(0))\r\n                symbol = _.expand(symbol);\r\n            //if the symbol already is the denominator... DONE!!!\r\n            if(symbol.power.greaterThan(0) && symbol.group !== CB || symbol.group === EX && symbol.power.multiplier.greaterThan(0)) {\r\n                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n            }\r\n            else if(symbol.group === CB) {\r\n                retval = _.parse(symbol.multiplier.num);\r\n                symbol.each(function (x) {\r\n                    if(x.power > 0 || x.group === EX && x.power.multiplier > 0) {\r\n                        retval = _.multiply(retval, x.clone());\r\n                    }\r\n                });\r\n            }\r\n//            else if(symbol.group === EX && this.previousGroup === S) {\r\n//                retval = _.multiply(_.parse(symbol.multiplier.num), symbol.toUnitMultiplier());\r\n//            }\r\n            else {\r\n                retval = _.parse(symbol.multiplier.num);\r\n            }\r\n            return retval;\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        }\r\n    };\r\n\r\n//Parser =======================================================================\r\n    //Uses modified Shunting-yard algorithm. http://en.wikipedia.org/wiki/Shunting-yard_algorithm\r\n    function Parser() {\r\n        //Point to the local parser instead of the global one\r\n        var _ = this;\r\n        var bin = {};\r\n        var preprocessors = {names: [], actions: []};\r\n\r\n//Parser.classes ===============================================================\r\n        function Slice(upper, lower) {\r\n            this.start = upper;\r\n            this.end = lower;\r\n        }\r\n        ;\r\n        Slice.prototype.isConstant = function () {\r\n            return this.start.isConstant() && this.end.isConstant();\r\n        };\r\n        Slice.prototype.text = function () {\r\n            return text(this.start) + ':' + text(this.end);\r\n        };\r\n\r\n        /**\r\n         * Class used to collect arguments for functions\r\n         * @returns {Parser.Collection}\r\n         */\r\n        function Collection() {\r\n            this.elements = [];\r\n        }\r\n        Collection.prototype.append = function (e) {\r\n            this.elements.push(e);\r\n        };\r\n        Collection.prototype.getItems = function () {\r\n            return this.elements;\r\n        };\r\n        Collection.prototype.toString = function () {\r\n            return _.pretty_print(this.elements);\r\n        };\r\n        Collection.create = function (e) {\r\n            var collection = new Collection();\r\n            if(e)\r\n                collection.append(e);\r\n            return collection;\r\n        };\r\n\r\n        function Token(node, node_type, column) {\r\n            this.type = node_type;\r\n            this.value = node;\r\n            if(column !== undefined)\r\n                this.column = column + 1;\r\n            if(node_type === Token.OPERATOR) {\r\n                //copy everything over from the operator\r\n                var operator = operators[node];\r\n                for(var x in operator)\r\n                    this[x] = operator[x];\r\n\r\n            }\r\n            else if(node_type === Token.FUNCTION) {\r\n                this.precedence = Token.MAX_PRECEDENCE; //leave enough roon\r\n                this.leftAssoc = false;\r\n            }\r\n        }\r\n        Token.prototype.toString = function () {\r\n            return this.value;\r\n        };\r\n        Token.prototype.toString = function () {\r\n            if(this.is_prefix)\r\n                return '`' + this.value;\r\n            return this.value;\r\n        };\r\n        //some constants\r\n        Token.OPERATOR = 'OPERATOR';\r\n        Token.VARIABLE_OR_LITERAL = 'VARIABLE_OR_LITERAL';\r\n        Token.FUNCTION = 'FUNCTION';\r\n        Token.UNIT = 'UNIT';\r\n        Token.KEYWORD = 'KEYWORD';\r\n        Token.MAX_PRECEDENCE = 999;\r\n        //create link to classes\r\n        this.classes = {\r\n            Collection: Collection,\r\n            Slice: Slice,\r\n            Token: Token\r\n        };\r\n//Parser.modules ===============================================================\r\n        //object for functions which handle complex number\r\n        var complex = {\r\n            prec: undefined,\r\n            cos: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cos(r) * Math.cosh(i));\r\n                im = _.parse(Math.sin(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sin: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(r) * Math.cosh(i));\r\n                im = _.parse(Math.cos(r) * Math.sinh(i));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tan: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sin(2 * r) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                im = _.parse(Math.sinh(2 * i) / (Math.cos(2 * r) + Math.cosh(2 * i)));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sec: function (r, i) {\r\n                var t = this.removeDen(this.cos(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csc: function (r, i) {\r\n                var t = this.removeDen(this.sin(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            cot: function (r, i) {\r\n                var t = this.removeDen(this.tan(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acos: function (r, i) {\r\n                var symbol, sq, a, b, c, squared;\r\n                symbol = this.fromArray([r, i]);\r\n                squared = _.pow(symbol.clone(), new Symbol(2));\r\n                sq = _.expand(squared); //z*z\r\n                a = _.multiply(sqrt(_.subtract(new Symbol(1), sq)), Symbol.imaginary());\r\n                b = _.expand(_.add(symbol.clone(), a));\r\n                c = log(b);\r\n                return _.expand(_.multiply(Symbol.imaginary().negate(), c));\r\n            },\r\n            asin: function (r, i) {\r\n                return _.subtract(_.parse('pi/2'), this.acos(r, i));\r\n            },\r\n            atan: function (r, i) {\r\n                // Handle i and -i\r\n                if(r.equals(0) && (i.equals(1) || i.equals(-1))) {\r\n                    // Just copy Wolfram Alpha for now. The parenthesis \r\n                    return _.parse(`${Symbol.infinity()}*${Settings.IMAGINARY}*${i}`);\r\n                }\r\n                var a, b, c, symbol;\r\n                symbol = complex.fromArray([r, i]);\r\n                a = _.expand(_.multiply(Symbol.imaginary(), symbol.clone()));\r\n                b = log(_.expand(_.subtract(new Symbol(1), a.clone())));\r\n                c = log(_.expand(_.add(new Symbol(1), a.clone())));\r\n                return _.expand(_.multiply(_.divide(Symbol.imaginary(), new Symbol(2)), _.subtract(b, c)));\r\n            },\r\n            asec: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.acos.apply(this, d);\r\n            },\r\n            acsc: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.asin.apply(this, d);\r\n            },\r\n            acot: function (r, i) {\r\n                var d = this.removeDen([r, i]);\r\n                d[1].negate();\r\n                return this.atan.apply(this, d);\r\n            },\r\n            //Hyperbolic trig\r\n            cosh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.cosh(r) * Math.cos(i));\r\n                im = _.parse(Math.sinh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sinh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(r) * Math.cos(i));\r\n                im = _.parse(Math.cosh(r) * Math.sin(i));\r\n                return _.add(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            tanh: function (r, i) {\r\n                var re, im;\r\n                re = _.parse(Math.sinh(2 * r) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                im = _.parse(Math.sin(2 * i) / (Math.cos(2 * i) + Math.cosh(2 * r)));\r\n                return _.subtract(re, _.multiply(im, Symbol.imaginary()));\r\n            },\r\n            sech: function (r, i) {\r\n                var t = this.removeDen(this.cosh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            csch: function (r, i) {\r\n                var t = this.removeDen(this.sinh(r, i));\r\n                return _.subtract(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            coth: function (r, i) {\r\n                var t = this.removeDen(this.tanh(r, i));\r\n                return _.add(t[0], _.multiply(t[1], Symbol.imaginary()));\r\n            },\r\n            acosh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(z.clone(), new Symbol(1)));\r\n                b = sqrt(_.subtract(z.clone(), new Symbol(1)));\r\n                return _.expand(log(_.add(z, _.expand(_.multiply(a, b)))));\r\n            },\r\n            asinh: function (r, i) {\r\n                var a, z;\r\n                z = this.fromArray([r, i]);\r\n                a = sqrt(_.add(new Symbol(1), _.expand(_.pow(z.clone(), new Symbol(2)))));\r\n                return _.expand(log(_.add(z, a)));\r\n            },\r\n            atanh: function (r, i) {\r\n                var a, b, z;\r\n                z = this.fromArray([r, i]);\r\n                a = log(_.add(z.clone(), new Symbol(1)));\r\n                b = log(_.subtract(new Symbol(1), z));\r\n                return _.expand(_.divide(_.subtract(a, b), new Symbol(2)));\r\n            },\r\n            asech: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.acosh.apply(this, t);\r\n            },\r\n            acsch: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.asinh.apply(this, t);\r\n            },\r\n            acoth: function (r, i) {\r\n                var t = this.removeDen([r, i]);\r\n                t[1].negate();\r\n                return this.atanh.apply(this, t);\r\n            },\r\n            sqrt: function (symbol) {\r\n                var re, im, h, a, d;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n                h = Symbol.hyp(re, im);\r\n                a = _.add(re.clone(), h);\r\n                d = sqrt(_.multiply(new Symbol(2), a.clone()));\r\n                return _.add(_.divide(a.clone(), d.clone()), _.multiply(_.divide(im, d), Symbol.imaginary()));\r\n            },\r\n            log: function (r, i) {\r\n                var re, im, phi;\r\n                re = log(Symbol.hyp(r, i));\r\n                phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal())) : Math.atan2(i, r);\r\n                im = _.parse(phi);\r\n                return _.add(re, _.multiply(Symbol.imaginary(), im));\r\n            },\r\n            erf(symbol, n) {\r\n                //Do nothing for now. Revisit this in the future.\r\n                return _.symfunction('erf', [symbol]);\r\n\r\n                n = n || 30;\r\n\r\n                var f = function (R, I) {\r\n                    return block('PARSE2NUMBER', function () {\r\n                        var retval = new Symbol(0);\r\n                        for(var i = 0; i < n; i++) {\r\n                            var a, b;\r\n                            a = _.parse(bigDec.exp(bigDec(i).toPower(2).neg().dividedBy(bigDec(n).pow(2).plus(bigDec(R).toPower(2).times(4)))));\r\n                            b = _.parse(format('2*({1})-e^(-(2*{0}*{1}*{2}))*(2*{1}*cosh({2}*{3})-{0}*{3}*sinh({3}*{2}))', Settings.IMAGINARY, R, I, i));\r\n                            retval = _.add(retval, _.multiply(a, b));\r\n                        }\r\n                        return _.multiply(retval, new Symbol(2));\r\n                    }, true);\r\n                };\r\n                var re, im, a, b, c, k;\r\n                re = symbol.realpart();\r\n                im = symbol.imagpart();\r\n\r\n                k = _.parse(format('(e^(-{0}^2))/pi', re));\r\n                a = _.parse(format('(1-e^(-(2*{0}*{1}*{2})))/(2*{1})', Settings.IMAGINARY, re, im));\r\n                b = f(re.toString(), im.toString());\r\n\r\n                return _.add(_.parse(Math2.erf(re.toString())), _.multiply(k, _.add(a, b)));\r\n            },\r\n            removeDen: function (symbol) {\r\n                var den, r, i, re, im;\r\n                if(isArray(symbol)) {\r\n                    r = symbol[0];\r\n                    i = symbol[1];\r\n                }\r\n                else {\r\n                    r = symbol.realpart();\r\n                    i = symbol.imagpart();\r\n                }\r\n\r\n                den = Math.pow(r, 2) + Math.pow(i, 2);\r\n                re = _.parse(r / den);\r\n                im = _.parse(i / den);\r\n                return [re, im];\r\n            },\r\n            fromArray: function (arr) {\r\n                return _.add(arr[0], _.multiply(Symbol.imaginary(), arr[1]));\r\n            },\r\n            evaluate: function (symbol, f) {\r\n                var re, im, sign;\r\n\r\n                sign = symbol.power.sign();\r\n                //remove it from under the denominator\r\n                symbol.power = symbol.power.abs();\r\n                //expand\r\n                if(symbol.power.greaterThan(1))\r\n                    symbol = _.expand(symbol);\r\n                //remove the denominator\r\n                if(sign < 0) {\r\n                    var d = this.removeDen(symbol);\r\n                    re = d[0];\r\n                    im = d[1];\r\n                }\r\n                else {\r\n                    re = symbol.realpart();\r\n                    im = symbol.imagpart();\r\n                }\r\n\r\n                if(re.isConstant('all') && im.isConstant('all'))\r\n                    return this[f].call(this, re, im);\r\n\r\n                return _.symfunction(f, [symbol]);\r\n            }\r\n        };\r\n        //object for functions which handle trig\r\n        var trig = this.trig = {\r\n            //container for trigonometric function\r\n            cos: function (symbol) {\r\n                if(symbol.equals('pi') && symbol.multiplier.den.equals(2))\r\n                    return new Symbol(0);\r\n\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(new Symbol(Settings.PI / 2)))\r\n                        return new Symbol(0);\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.cos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.cos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cos');\r\n                    }\r\n                }\r\n                if(symbol.equals(0))\r\n                    return new Symbol(1);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = Number(m.num), d = Number(m.den);\r\n                        if(d === 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d === 3) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d === 6) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cos', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cos', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            sin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(symbol % Math.PI === 0) {\r\n                            return new Symbol(0);\r\n                        }\r\n\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.sin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.sin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sin');\r\n                }\r\n\r\n                if(symbol.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n                if(symbol.equals('pi'))\r\n                    retval = new Symbol(0);\r\n                else if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)/2');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('1/sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/2');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('sin', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            tan: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % Math.PI === 0 && symbol.isLinear()) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.tan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.tan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'tan');\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(0);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('tan is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('tan', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('tan', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            sec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.cos(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.sec(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'sec');\r\n                    return _.parse(format('1/cos({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier.abs();\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 1 or -1 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        retval = new Symbol(even(m) ? 1 : -1);\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            throw new UndefinedError('sec is undefined for ' + symbol.toString());\r\n                        else if(d == 3) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('sec', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(c && (q === 2 || q === 3))\r\n                    retval.negate();\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('sec', [symbol]);\r\n\r\n                return retval;\r\n            },\r\n            csc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.sin(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.csc(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'csc');\r\n                    return _.parse(format('1/sin({0})', symbol));\r\n                }\r\n\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        sign = symbol.multiplier.sign(),\r\n                        m = symbol.multiplier.abs();\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return for 0 for multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('csc is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 3) {\r\n                            retval = _.parse('2/sqrt(3)');\r\n                            c = true\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = _.parse('sqrt(2)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = new Symbol(2);\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.multiply(new Symbol(sign), _.symfunction('csc', [symbol]));\r\n\r\n                if(c && (q === 3 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            cot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol % (Math.PI/2) === 0) {\r\n                        return new Symbol(0);\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(new bigDec(1).dividedBy(bigDec.tan(symbol.multiplier.toDecimal())));\r\n                        }\r\n\r\n                        return new Symbol(Math2.cot(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'cot');\r\n                    return _.parse(format('1/tan({0})', symbol));\r\n                }\r\n                var retval,\r\n                        c = false,\r\n                        q = getQuadrant(symbol.multiplier.toDecimal()),\r\n                        m = symbol.multiplier;\r\n\r\n                symbol.multiplier = m;\r\n\r\n                if(symbol.isPi() && symbol.isLinear()) {\r\n                    //return 0 for all multiples of pi\r\n                    if(isInt(m)) {\r\n                        throw new UndefinedError('cot is undefined for ' + symbol.toString());\r\n                    }\r\n                    else {\r\n                        var n = m.num, d = m.den;\r\n                        if(d == 2)\r\n                            retval = new Symbol(0);\r\n                        else if(d == 3) {\r\n                            retval = _.parse('1/sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else if(d == 4) {\r\n                            retval = new Symbol(1);\r\n                            c = true;\r\n                        }\r\n                        else if(d == 6) {\r\n                            retval = _.parse('sqrt(3)');\r\n                            c = true;\r\n                        }\r\n                        else\r\n                            retval = _.symfunction('cot', [symbol]);\r\n                    }\r\n                }\r\n\r\n                if(!retval)\r\n                    retval = _.symfunction('cot', [symbol]);\r\n\r\n                if(c && (q === 2 || q === 4))\r\n                    retval.negate();\r\n\r\n                return retval;\r\n            },\r\n            acos: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var x = symbol.toString();\r\n                            return expand(evaluate(`pi/2-asin(${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.acos(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.acos(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acos');\r\n                }\r\n                return _.symfunction('acos', arguments);\r\n            },\r\n            asin: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle values in the complex domain\r\n                        if(symbol.gt(1) || symbol.lt(-1)) {\r\n                            var i = Settings.IMAGINARY;\r\n                            var x = symbol.multiplier.toDecimal();\r\n                            return expand(evaluate(`${i}*log(sqrt(1-${x}^2)-${i}*${x})`));\r\n                        }\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.asin(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.asin(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'asin');\r\n                }\r\n                return _.symfunction('asin', arguments);\r\n            },\r\n            atan: function (symbol) {\r\n                var retval;\r\n                if(symbol.equals(0))\r\n                    retval = new Symbol(0);\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        // Handle big numbers\r\n                        if(Settings.USE_BIG) {\r\n                            return new Symbol(bigDec.atan(symbol.multiplier.toDecimal()));\r\n                        }\r\n\r\n                        return new Symbol(Math.atan(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'atan');\r\n                    return _.symfunction('atan', arguments);\r\n                }\r\n                else if(symbol.equals(-1))\r\n                    retval = _.parse('-pi/4');\r\n                else\r\n                    retval = _.symfunction('atan', arguments);\r\n                return retval;\r\n            },\r\n            asec: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(0)) {\r\n                        throw new OutOfFunctionDomainError('Input is out of the domain of sec!');\r\n                    }\r\n                    if(symbol.isConstant()) {\r\n                        return trig.acos(symbol.invert());\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'asec');\r\n                    }\r\n                }\r\n                return _.symfunction('asec', arguments);\r\n            },\r\n            acsc: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return trig.asin(symbol.invert());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acsc');\r\n                }\r\n                return _.symfunction('acsc', arguments);\r\n            },\r\n            acot: function (symbol) {\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new _.add(_.parse('pi/2'), trig.atan(symbol).negate());\r\n                    }\r\n\r\n                    if(symbol.isImaginary())\r\n                        return complex.evaluate(symbol, 'acot');\r\n                }\r\n                return _.symfunction('acot', arguments);\r\n            },\r\n            atan2: function (a, b) {\r\n                if(a.equals(0) && b.equals(0))\r\n                    throw new UndefinedError('atan2 is undefined for 0, 0');\r\n\r\n                if(Settings.PARSE2NUMBER && a.isConstant() && b.isConstant()) {\r\n                    return new Symbol(Math.atan2(a, b));\r\n                }\r\n                return _.symfunction('atan2', arguments);\r\n            }\r\n        };\r\n        //object for functions which handle hyperbolic trig\r\n        var trigh = this.trigh = {\r\n            //container for hyperbolic trig function\r\n            cosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.cosh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'cosh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('cosh', arguments);\r\n            },\r\n            sinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.sinh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sinh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('sinh', arguments);\r\n            },\r\n            tanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.tanh(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'tanh');\r\n                    }\r\n                }\r\n\r\n                return retval = _.symfunction('tanh', arguments);\r\n            },\r\n            sech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant()) {\r\n                        return new Symbol(Math.sech(symbol.valueOf()));\r\n                    }\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'sech');\r\n                    }\r\n                    return _.parse(format('1/cosh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('sech', arguments);\r\n            },\r\n            csch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.csch(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'csch');\r\n                    }\r\n                    return _.parse(format('1/sinh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('csch', arguments);\r\n            },\r\n            coth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.isConstant())\r\n                        return new Symbol(Math.coth(symbol.valueOf()));\r\n                    if(symbol.isImaginary()) {\r\n                        return complex.evaluate(symbol, 'coth');\r\n                    }\r\n                    return _.parse(format('1/tanh({0})', symbol));\r\n                }\r\n\r\n                return retval = _.symfunction('coth', arguments);\r\n            },\r\n            acosh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acosh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2-1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acosh', arguments);\r\n                return retval;\r\n            },\r\n            asinh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asinh');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '(({0})+sqrt(({0})^2+1))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('asinh', arguments);\r\n                return retval;\r\n            },\r\n            atanh: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'atanh');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    retval = evaluate(_.parse(format('(1/2)*' + Settings.LOG + '((1+({0}))/(1-({0})))', symbol.toString())));\r\n                }\r\n                else\r\n                    retval = _.symfunction('atanh', arguments);\r\n                return retval;\r\n            },\r\n            asech: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'asech');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(log(_.add(symbol.clone().invert(), sqrt(_.subtract(_.pow(symbol, new Symbol(-2)), new Symbol(1))))));\r\n                else\r\n                    retval = _.symfunction('asech', arguments);\r\n                return retval;\r\n            },\r\n            acsch: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acsch');\r\n                else if(Settings.PARSE2NUMBER)\r\n                    retval = evaluate(_.parse(format(Settings.LOG + '((1+sqrt(1+({0})^2))/({0}))', symbol.toString())));\r\n                else\r\n                    retval = _.symfunction('acsch', arguments);\r\n                return retval;\r\n            },\r\n            acoth: function (symbol) {\r\n                var retval;\r\n                if(Settings.PARSE2NUMBER && symbol.isImaginary())\r\n                    retval = complex.evaluate(symbol, 'acoth');\r\n                else if(Settings.PARSE2NUMBER) {\r\n                    if(symbol.equals(1))\r\n                        retval = Symbol.infinity();\r\n                    else\r\n                        retval = evaluate(\r\n                                _.divide(\r\n                                        log(_.divide(_.add(symbol.clone(), new Symbol(1)), _.subtract(symbol.clone(), new Symbol(1)))),\r\n                                        new Symbol(2)));\r\n                }\r\n                else\r\n                    retval = _.symfunction('acoth', arguments);\r\n                return retval;\r\n            }\r\n        };\r\n        //list of supported units\r\n        this.units = {};\r\n        //list all the supported operators\r\n        var operators = {\r\n            '\\\\': {\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; //bypass the slash\r\n                }\r\n            },\r\n            '!!': {\r\n                precedence: 7,\r\n                operator: '!!',\r\n                action: 'dfactorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return _.symfunction(Settings.DOUBLEFACTORIAL, [e]); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '!': {\r\n                precedence: 7,\r\n                operator: '!',\r\n                action: 'factorial',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return factorial(e); //wrap it in a factorial function\r\n                }\r\n            },\r\n            '^': {\r\n                precedence: 6,\r\n                operator: '^',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '**': {\r\n                precedence: 6,\r\n                operator: '**',\r\n                action: 'pow',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            },\r\n            '%': {\r\n                precedence: 4,\r\n                operator: '%',\r\n                action: 'percent',\r\n                prefix: false,\r\n                postfix: true,\r\n                leftAssoc: true,\r\n                overloaded: true,\r\n                overloadAction: 'mod',\r\n                overloadLeftAssoc: false,\r\n                operation: function (x) {\r\n                    return _.divide(x, new Symbol(100));\r\n                }\r\n            },\r\n            '*': {\r\n                precedence: 4,\r\n                operator: '*',\r\n                action: 'multiply',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '/': {\r\n                precedence: 4,\r\n                operator: '/',\r\n                action: 'divide',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '+': {\r\n                precedence: 3,\r\n                operator: '+',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            'plus': {\r\n                precedence: 3,\r\n                operator: 'plus',\r\n                action: 'add',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x;\r\n                }\r\n            },\r\n            '-': {\r\n                precedence: 3,\r\n                operator: '-',\r\n                action: 'subtract',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                operation: function (x) {\r\n                    return x.negate();\r\n                }\r\n            },\r\n            '=': {\r\n                precedence: 2,\r\n                operator: '=',\r\n                action: 'equals',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '==': {\r\n                precedence: 1,\r\n                operator: '==',\r\n                action: 'eq',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<': {\r\n                precedence: 1,\r\n                operator: '<',\r\n                action: 'lt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '<=': {\r\n                precedence: 1,\r\n                operator: '<=',\r\n                action: 'lte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '>': {\r\n                precedence: 1,\r\n                operator: '>',\r\n                action: 'gt',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            '=>': {\r\n                precedence: 1,\r\n                operator: '=>',\r\n                action: 'gte',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ',': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'comma',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false\r\n            },\r\n            ':': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: false,\r\n                vectorFn: 'slice'\r\n            },\r\n            ':=': {\r\n                precedence: 0,\r\n                operator: ',',\r\n                action: 'function_assign',\r\n                prefix: false,\r\n                postfix: false,\r\n                leftAssoc: true\r\n            }\r\n        };\r\n        //brackets\r\n        var brackets = {\r\n            '(': {\r\n                type: 'round',\r\n                id: 1,\r\n                is_open: true,\r\n                is_close: false\r\n            },\r\n            ')': {\r\n                type: 'round',\r\n                id: 2,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '[': {\r\n                type: 'square',\r\n                id: 3,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'vector'\r\n            },\r\n            ']': {\r\n                type: 'square',\r\n                id: 4,\r\n                is_open: false,\r\n                is_close: true\r\n            },\r\n            '{': {\r\n                type: 'curly',\r\n                id: 5,\r\n                is_open: true,\r\n                is_close: false,\r\n                maps_to: 'Set'\r\n            },\r\n            '}': {\r\n                type: 'curly',\r\n                id: 6,\r\n                is_open: false,\r\n                is_close: true\r\n            }\r\n        };\r\n        // Supported functions.\r\n        // Format: function_name: [mapped_function, number_of_parameters]\r\n        var functions = this.functions = {\r\n            'cos': [trig.cos, 1],\r\n            'sin': [trig.sin, 1],\r\n            'tan': [trig.tan, 1],\r\n            'sec': [trig.sec, 1],\r\n            'csc': [trig.csc, 1],\r\n            'cot': [trig.cot, 1],\r\n            'acos': [trig.acos, 1],\r\n            'asin': [trig.asin, 1],\r\n            'atan': [trig.atan, 1],\r\n            'arccos': [trig.acos, 1],\r\n            'arcsin': [trig.asin, 1],\r\n            'arctan': [trig.atan, 1],\r\n            'asec': [trig.asec, 1],\r\n            'acsc': [trig.acsc, 1],\r\n            'acot': [trig.acot, 1],\r\n            'atan2': [trig.atan2, 2],\r\n            'acoth': [trigh.acoth, 1],\r\n            'asech': [trigh.asech, 1],\r\n            'acsch': [trigh.acsch, 1],\r\n            'sinh': [trigh.sinh, 1],\r\n            'cosh': [trigh.cosh, 1],\r\n            'tanh': [trigh.tanh, 1],\r\n            'asinh': [trigh.asinh, 1],\r\n            'sech': [trigh.sech, 1],\r\n            'csch': [trigh.csch, 1],\r\n            'coth': [trigh.coth, 1],\r\n            'acosh': [trigh.acosh, 1],\r\n            'atanh': [trigh.atanh, 1],\r\n            'log10': [, 1],\r\n            'exp': [exp, 1],\r\n            'radians': [radians, 1],\r\n            'degrees': [degrees, 1],\r\n            'min': [min, -1],\r\n            'max': [max, -1],\r\n            'erf': [, 1],\r\n            'floor': [, 1],\r\n            'ceil': [, 1],\r\n            'trunc': [, 1],\r\n            'Si': [, 1],\r\n            'step': [, 1],\r\n            'rect': [, 1],\r\n            'sinc': [sinc, 1],\r\n            'tri': [, 1],\r\n            'sign': [sign, 1],\r\n            'Ci': [, 1],\r\n            'Ei': [, 1],\r\n            'Shi': [, 1],\r\n            'Chi': [, 1],\r\n            'Li': [, 1],\r\n            'fib': [, 1],\r\n            'fact': [factorial, 1],\r\n            'factorial': [factorial, 1],\r\n            'continued_fraction': [continued_fraction, [1, 2]],\r\n            'dfactorial': [, 1],\r\n            'gamma_incomplete': [, [1, 2]],\r\n            'round': [round, [1, 2]],\r\n            'scientific': [scientific, [1, 2]],\r\n            'mod': [mod, 2],\r\n            'pfactor': [pfactor, 1],\r\n            'vector': [vector, -1],\r\n            'matrix': [matrix, -1],\r\n            'Set': [set, -1],\r\n            'imatrix': [imatrix, -1],\r\n            'parens': [parens, -1],\r\n            'sqrt': [sqrt, 1],\r\n            'cbrt': [cbrt, 1],\r\n            'nthroot': [nthroot, 2],\r\n            'log': [log, [1, 2]],\r\n            'expand': [expandall, 1],\r\n            'abs': [abs, 1],\r\n            'invert': [invert, 1],\r\n            'determinant': [determinant, 1],\r\n            'size': [size, 1],\r\n            'transpose': [transpose, 1],\r\n            'dot': [dot, 2],\r\n            'cross': [cross, 2],\r\n            'vecget': [vecget, 2],\r\n            'vecset': [vecset, 3],\r\n            'vectrim': [vectrim, [1, 2]],\r\n            'matget': [matget, 3],\r\n            'matset': [matset, 4],\r\n            'matgetrow': [matgetrow, 2],\r\n            'matsetrow': [matsetrow, 3],\r\n            'matgetcol': [matgetcol, 2],\r\n            'matsetcol': [matsetcol, 3],\r\n            'rationalize': [rationalize, 1],\r\n            'IF': [IF, 3],\r\n            'is_in': [is_in, 2],\r\n            //imaginary support\r\n            'realpart': [realpart, 1],\r\n            'imagpart': [imagpart, 1],\r\n            'conjugate': [conjugate, 1],\r\n            'arg': [arg, 1],\r\n            'polarform': [polarform, 1],\r\n            'rectform': [rectform, 1],\r\n            'sort': [sort, [1, 2]],\r\n            'integer_part': [, 1],\r\n            'union': [union, 2],\r\n            'contains': [contains, 2],\r\n            'intersection': [intersection, 2],\r\n            'difference': [difference, 2],\r\n            'intersects': [intersects, 2],\r\n            'is_subset': [is_subset, 2],\r\n            //system support\r\n            'print': [print, -1]\r\n        };\r\n\r\n        //error handler\r\n        this.error = err;\r\n        //this function is used to comb through the function modules and find a function given its name\r\n        var findFunction = function (fname) {\r\n            var fmodules = Settings.FUNCTION_MODULES,\r\n                    l = fmodules.length;\r\n            for(var i = 0; i < l; i++) {\r\n                var fmodule = fmodules[i];\r\n                if(fname in fmodule)\r\n                    return fmodule[fname];\r\n            }\r\n            err('The function ' + fname + ' is undefined!');\r\n        };\r\n\r\n        /**\r\n         * This method gives the ability to override operators with new methods.\r\n         * @param {String} which\r\n         * @param {Function} with_what\r\n         */\r\n        this.override = function (which, with_what) {\r\n            if(!bin[which])\r\n                bin[which] = [];\r\n            bin[which].push(this[which]);\r\n            this[which] = with_what;\r\n        };\r\n\r\n        /**\r\n         * Restores a previously overridden operator\r\n         * @param {String} what\r\n         */\r\n        this.restore = function (what) {\r\n            if(this[what])\r\n                this[what] = bin[what].pop();\r\n        };\r\n\r\n        /**\r\n         * This method is supposed to behave similarly to the override method but it does not override\r\n         * the existing function rather it only extends it\r\n         * @param {String} what\r\n         * @param {Function} with_what\r\n         * @param {boolean} force_call\r\n         */\r\n        this.extend = function (what, with_what, force_call) {\r\n            var _ = this,\r\n                    extended = this[what];\r\n            if(typeof extended === 'function' && typeof with_what === 'function') {\r\n                var f = this[what];\r\n                this[what] = function (a, b) {\r\n                    if(isSymbol(a) && isSymbol(b) && !force_call)\r\n                        return f.call(_, a, b);\r\n                    else\r\n                        return with_what.call(_, a, b, f);\r\n                };\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Generates library's representation of a function. It's a fancy way of saying a symbol with\r\n         * a few extras. The most important thing is that that it gives a fname and\r\n         * an args property to the symbols in addition to changing its group to FN\r\n         * @param {String} fn_name\r\n         * @param {Array} params\r\n         * @returns {Symbol}\r\n         */\r\n        this.symfunction = function (fn_name, params) {\r\n            //call the proper function and return the result;\r\n            var f = new Symbol(fn_name);\r\n            f.group = FN;\r\n            if(typeof params === 'object')\r\n                params = [].slice.call(params);//ensure an array\r\n            f.args = params;\r\n            f.fname = fn_name === PARENTHESIS ? '' : fn_name;\r\n            f.updateHash();\r\n            return f;\r\n        };\r\n\r\n        /**\r\n         * An internal function call for the Parser. This will either trigger a real\r\n         * function call if it can do so or just return a symbolic representation of the\r\n         * function using symfunction.\r\n         * @param {String} fn_name\r\n         * @param {Array} args\r\n         * @param {int} allowed_args\r\n         * @returns {Symbol}\r\n         */\r\n        this.callfunction = function (fn_name, args, allowed_args) {\r\n            var fn_settings = functions[fn_name];\r\n\r\n            if(!fn_settings)\r\n                err('Nerdamer currently does not support the function ' + fn_name);\r\n\r\n            var num_allowed_args = fn_settings[1] || allowed_args, //get the number of allowed arguments\r\n                    fn = fn_settings[0], //get the mapped function\r\n                    retval;\r\n            //We want to be able to call apply on the arguments or create a symfunction. Both require\r\n            //an array so make sure to wrap the argument in an array.\r\n            if(!(args instanceof Array))\r\n                args = args !== undefined ? [args] : [];\r\n\r\n            if(num_allowed_args !== -1) {\r\n                var is_array = isArray(num_allowed_args),\r\n                        min_args = is_array ? num_allowed_args[0] : num_allowed_args,\r\n                        max_args = is_array ? num_allowed_args[1] : num_allowed_args,\r\n                        num_args = args.length;\r\n\r\n                var error_msg = fn_name + ' requires a {0} of {1} arguments. {2} provided!';\r\n\r\n                if(num_args < min_args)\r\n                    err(format(error_msg, 'minimum', min_args, num_args));\r\n                if(num_args > max_args)\r\n                    err(format(error_msg, 'maximum', max_args, num_args));\r\n            }\r\n\r\n            /*\r\n             * The following are very important to the how nerdamer constructs functions!\r\n             * Assumption 1 - if fn is undefined then handling of the function is purely numeric. This\r\n             *     enables us to reuse Math, Math2, ..., any function from Settings.FUNCTIONS_MODULES entry\r\n             * Assumption 2 - if fn is defined then that function takes care of EVERYTHING including symbolics\r\n             * Assumption 3 - if the user calls symbolics on a function that returns a numeric value then\r\n             *     they are expecting a symbolic output.\r\n             */\r\n            //check if arguments are all numers\r\n            var numericArgs = allNumbers(args);\r\n            //Big number support. Check if Big number is requested and the arguments are all numeric and, not imaginary\r\n//            if (Settings.USE_BIG && numericArgs) {\r\n//                retval = Big[fn_name].apply(undefined, args);\r\n//            }\r\n//            else {\r\n            if(!fn) {\r\n                //Remember assumption 1. No function defined so it MUST be numeric in nature\r\n                fn = findFunction(fn_name);\r\n                if(Settings.PARSE2NUMBER && numericArgs)\r\n                    retval = bigConvert(fn.apply(fn, args));\r\n                else\r\n                    retval = _.symfunction(fn_name, args);\r\n            }\r\n            else {\r\n                //Remember assumption 2. The function is defined so it MUST handle all aspects including numeric values\r\n                retval = fn.apply(fn_settings[2], args);\r\n            }\r\n//            }\r\n\r\n            return retval;\r\n        };\r\n        /**\r\n         * Build a regex based on the operators currently loaded. These operators are to be ignored when\r\n         * substituting spaces for multiplication\r\n         */\r\n        this.operator_filter_regex = (function () {\r\n            //we only want the operators which are singular since those are the ones\r\n            //that nerdamer uses anyway\r\n            var ostr = '^\\\\' + Object.keys(operators).filter(function (x) {\r\n                if(x.length === 1)\r\n                    return x;\r\n            }).join('\\\\');\r\n            //create a regex which captures all spaces between characters except those\r\n            //have an operator on one end\r\n            return new RegExp('([' + ostr + '])\\\\s+([' + ostr + '])');\r\n        })();\r\n\r\n        /**\r\n         * Replaces nerdamer.setOperator\r\n         * @param {object} operator\r\n         * @param {boolean} shift\r\n         */\r\n        this.setOperator = function (operator, action, shift) {\r\n            var name = operator.operator; //take the name to be the symbol\r\n            operators[name] = operator;\r\n            if(action)\r\n                this[operator.action] = action;\r\n            //make the parser aware of the operator\r\n            _[name] = operator.operation;\r\n            //make the action available to the parser if infix\r\n            if(!operator.action && !(operator.prefix || operator.postif)) {\r\n                operator.action = name;\r\n            }\r\n            //if this operator is exclusive then all successive operators should be shifted\r\n            if(shift === 'over' || shift === 'under') {\r\n                var precedence = operator.precedence;\r\n\r\n                for(var x in operators) {\r\n                    var o = operators[x];\r\n                    var condition = shift === 'over' ? o.precedence >= precedence : o.precedence > precedence;\r\n                    if(condition)\r\n                        o.precedence++;\r\n                }\r\n                ;\r\n            }\r\n        };\r\n\r\n        /**\r\n         * Gets an opererator by its symbol\r\n         * @param {String} operator\r\n         * @returns {Object}\r\n         */\r\n        this.getOperator = function (operator) {\r\n            return operators[operator];\r\n        };\r\n\r\n        this.aliasOperator = function (o, n) {\r\n            var t = {};\r\n            var operator = operators[o];\r\n            //copy everything over to the new operator\r\n            for(var x in operator) {\r\n                t[x] = operator[x];\r\n            }\r\n            //update the symbol\r\n            t.operator = n;\r\n\r\n            this.setOperator(t);\r\n        };\r\n\r\n        /**\r\n         * Returns the list of operators. Caution! Can break parser!\r\n         * @returns {object}\r\n         */\r\n        this.getOperators = function () {\r\n            //will replace this with some cloning action in the future\r\n            return operators;\r\n        };\r\n\r\n        this.getBrackets = function () {\r\n            return brackets;\r\n        };\r\n        /*\r\n         * Preforms preprocessing on the string. Useful for making early modification before\r\n         * sending to the parser\r\n         * @param {String} e\r\n         */\r\n        var prepare_expression = function (e) {\r\n            /*\r\n             * Since variables cannot start with a number, the assumption is made that when this occurs the\r\n             * user intents for this to be a coefficient. The multiplication symbol in then added. The same goes for\r\n             * a side-by-side close and open parenthesis\r\n             */\r\n            e = String(e);\r\n            //apply preprocessors\r\n            for(var i = 0; i < preprocessors.actions.length; i++)\r\n                e = preprocessors.actions[i].call(this, e);\r\n\r\n            //e = e.split(' ').join('');//strip empty spaces\r\n            //replace multiple spaces with one space\r\n            e = e.replace(/\\s+/g, ' ');\r\n\r\n            //only even bother to check if the string contains e. This regex is painfully slow and might need a better solution. e.g. hangs on (0.06/3650))^(365)\r\n            if(/e/gi.test(e)) {\r\n                e = e.replace(/\\-*\\d+\\.*\\d*e\\+?\\-?\\d+/gi, function (x) {\r\n                    return scientificToDecimal(x);\r\n                });\r\n            }\r\n            //replace scientific numbers\r\n\r\n            //allow omission of multiplication after coefficients\r\n            e = e.replace(Settings.IMPLIED_MULTIPLICATION_REGEX, function () {\r\n                var str = arguments[4],\r\n                        group1 = arguments[1],\r\n                        group2 = arguments[2],\r\n                        start = arguments[3],\r\n                        first = str.charAt(start),\r\n                        before = '',\r\n                        d = '*';\r\n                if(!first.match(/[\\+\\-\\/\\*]/))\r\n                    before = str.charAt(start - 1);\r\n                if(before.match(/[a-z]/i))\r\n                    d = '';\r\n                return group1 + d + group2;\r\n            })\r\n                    .replace(/([a-z0-9_]+)/gi, function (match, a) {\r\n                        if(Settings.USE_MULTICHARACTER_VARS === false && !(a in functions)) {\r\n                            if(!isNaN(a))\r\n                                return a;\r\n                            return a.split('').join('*');\r\n                        }\r\n                        return a;\r\n                    })\r\n                    //allow omission of multiplication sign between brackets\r\n                    .replace(/\\)\\(/g, ')*(') || '0';\r\n            //replace x(x+a) with x*(x+a)\r\n            while(true) {\r\n                var e_org = e; //store the original\r\n                e = e.replace(/([a-z0-9_]+)(\\()|(\\))([a-z0-9]+)/gi, function (match, a, b, c, d) {\r\n                    var g1 = a || c,\r\n                            g2 = b || d;\r\n                    if(g1 in functions) //create a passthrough for functions\r\n                        return g1 + g2;\r\n                    return g1 + '*' + g2;\r\n                });\r\n                //if the original equals the replace we're done\r\n                if(e_org === e)\r\n                    break;\r\n            }\r\n            return e;\r\n        };\r\n        //delay setting of constants until Settings is ready\r\n        this.initConstants = function () {\r\n            this.CONSTANTS = {\r\n                E: new Symbol(Settings.E),\r\n                PI: new Symbol(Settings.PI)\r\n            };\r\n        };\r\n        /*\r\n         * Debugging method used to better visualize vector and arrays\r\n         * @param {object} o\r\n         * @returns {String}\r\n         */\r\n        this.pretty_print = function (o) {\r\n            if(Array.isArray(o)) {\r\n                var s = o.map(x => _.pretty_print(x)).join(', ');\r\n                if(o.type === 'vector')\r\n                    return 'vector<' + s + '>';\r\n                return '(' + s + ')';\r\n            }\r\n            return o.toString();\r\n        };\r\n        this.peekers = {\r\n            pre_operator: [],\r\n            post_operator: [],\r\n            pre_function: [],\r\n            post_function: []\r\n        };\r\n\r\n        this.callPeekers = function (name) {\r\n            if(Settings.callPeekers) {\r\n                var peekers = this.peekers[name];\r\n                //remove the first items and stringify\r\n                var args = arguments2Array(arguments).slice(1).map(stringify);\r\n                //call each one of the peekers\r\n                for(var i = 0; i < peekers.length; i++) {\r\n                    peekers[i].apply(null, args);\r\n                }\r\n            }\r\n        };\r\n        /*\r\n         * Tokenizes the string\r\n         * @param {String} e\r\n         * @returns {Token[]}\r\n         */\r\n        this.tokenize = function (e) {\r\n            //cast to String\r\n            e = String(e);\r\n            //remove multiple white spaces and spaces at beginning and end of string\r\n            e = e.trim().replace(/\\s+/g, ' ');\r\n            //remove spaces before and after brackets\r\n            for(var x in brackets) {\r\n                var regex = new RegExp(brackets[x].is_close ? '\\\\s+\\\\' + x : '\\\\' + x + '\\\\s+', 'g');\r\n                e = e.replace(regex, x);\r\n            }\r\n\r\n            var col = 0; //the column position\r\n            var L = e.length; //expression length\r\n            var lpos = 0; //marks beginning of next token\r\n            var tokens = []; //the tokens container\r\n            var scopes = [tokens]; //initiate with the tokens as the highest scope\r\n            var target = scopes[0]; //the target to which the tokens are added. This can swing up or down\r\n            var depth = 0;\r\n            var open_brackets = [];\r\n            var has_space = false; //marks if an open space character was found\r\n            var SPACE = ' ';\r\n            var EMPTY_STRING = '';\r\n            var COMMA = ',';\r\n            var MINUS = '-';\r\n            var MULT = '*';\r\n            //Possible source of bug. Review\r\n            /*\r\n             //gets the next space\r\n             var next_space = function(from) {\r\n             for(var i=from; i<L; i++) {\r\n             if(e.charAt(i) === ' ')\r\n             return i;\r\n             }\r\n             \r\n             return L; //assume the end of the string instead\r\n             };\r\n             */\r\n            /**\r\n             * Adds a scope to tokens\r\n             * @param {String} scope_type\r\n             * @param {int} column\r\n             * @returns {undefined}\r\n             */\r\n            var addScope = function (scope_type, column) {\r\n                var new_scope = []; //create a new scope\r\n                if(scope_type !== undefined) {\r\n                    new_scope.type = scope_type;\r\n                }\r\n                new_scope.column = column; //mark the column of the scope\r\n                scopes.push(new_scope); //add it to the list of scopes\r\n                target.push(new_scope); //add it to the tokens list since now it's a scope\r\n                target = new_scope; //point to it\r\n                depth++; //go down one in scope\r\n            };\r\n            /**\r\n             * Goes up in scope by one\r\n             * @returns {undefined}\r\n             */\r\n            var goUp = function () {\r\n                scopes.pop(); //remove the scope from the scopes stack\r\n                target = scopes[--depth]; //point the above scope\r\n            };\r\n            /**\r\n             * Extracts all the operators from the expression string starting at postion start_at\r\n             * @param {int} start_at\r\n             * @returns {String}\r\n             */\r\n            var get_operator_str = function (start_at) {\r\n                start_at = start_at !== undefined ? start_at : col;\r\n                //mark the end of the operator as the start since we're just going\r\n                //to be walking along the string\r\n                var end = start_at + 1;\r\n                //just keep moving along\r\n                while(e.charAt(end++) in operators) {\r\n                }\r\n                //remember that we started at one position ahead. The beginning operator is what triggered\r\n                //this function to be called in the first place. String.CharAt is zero based so we now\r\n                //have to correct two places. The initial increment + the extra++ at the end of end during\r\n                //the last iteration.\r\n                return e.substring(start_at, end - 1);\r\n            };\r\n            /**\r\n             * Breaks operator up in to several different operators as defined in operators\r\n             * @param {String} operator_str\r\n             * @returns {String[]}\r\n             */\r\n            var chunkify = function (operator_str) {\r\n                var start = col - operator_str.length; //start of operator\r\n                var _operators = [];\r\n                var operator = operator_str.charAt(0);\r\n                //grab the largest possible chunks but start at 2 since we already know\r\n                //that the first character is an operator\r\n\r\n                for(var i = 1, L = operator_str.length; i < L; i++) {\r\n                    var ch = operator_str.charAt(i);\r\n                    var o = operator + ch;\r\n                    //since the operator now is undefined then the last operator\r\n                    //was the largest possible combination.\r\n                    if(!(o in operators)) {\r\n                        _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                        operator = ch;\r\n                    }\r\n                    else\r\n                        operator = o;//now the operator is the larger chunk\r\n                }\r\n                //add the last operator\r\n                _operators.push(new Token(operator, Token.OPERATOR, start + i));\r\n                return _operators;\r\n            };\r\n\r\n            /**\r\n             * Is used to add a token to the tokens array. Makes sure that no empty token is added\r\n             * @param {int} at\r\n             * @param {String} token\r\n             * @returns {undefined}\r\n             */\r\n            var add_token = function (at, token) {\r\n                //grab the token if we're not supplied one\r\n                if(token === undefined)\r\n                    token = e.substring(lpos, at);\r\n                //only add it if it's not an empty string\r\n                if(token in _.units)\r\n                    target.push(new Token(token, Token.UNIT, lpos));\r\n                else if(token !== '')\r\n                    target.push(new Token(token, Token.VARIABLE_OR_LITERAL, lpos));\r\n            };\r\n            /**\r\n             * Adds a function to the output\r\n             * @param {String} f\r\n             * @returns {undefined}\r\n             */\r\n            var add_function = function (f) {\r\n                target.push(new Token(f, Token.FUNCTION, lpos));\r\n            };\r\n            /**\r\n             * Tokens are found between operators so this marks the location of where the last token was found\r\n             * @param {int} position\r\n             * @returns {undefined}\r\n             */\r\n            var set_last_position = function (position) {\r\n                lpos = position + 1;\r\n            };\r\n            /**\r\n             * When a operator is found and added, especially a combo operator, then the column location\r\n             * has to be adjusted to the end of the operator\r\n             * @returns {undefined}\r\n             */\r\n            var adjust_column_position = function () {\r\n                lpos = lpos + operator_str.length - 2;\r\n                col = lpos - 1;\r\n            };\r\n            for(; col < L; col++) {\r\n                var ch = e.charAt(col);\r\n                if(ch in operators) {\r\n                    add_token(col);\r\n                    //is the last token numeric?\r\n                    var last_token_is_numeric = target[0] && isNumber(target[0]);\r\n                    //is this character multiplication?\r\n                    var is_multiplication = last_token_is_numeric && ch === MULT;\r\n                    //if we're in a new scope then go up by one but if the space\r\n                    //is right befor an operator then it makes no sense to go up in scope\r\n                    //consider sin -x. The last position = current position at the minus sign\r\n                    //this means that we're going for sin(x) -x which is wrong\r\n                    //Ignore comma since comma is still part of the existing scope.\r\n                    if(has_space && lpos < col && !(ch === COMMA || is_multiplication)) {\r\n                        has_space = false;\r\n                        goUp();\r\n                    }\r\n                    //mark the last position that a\r\n                    set_last_position(col + 1);\r\n                    var operator_str = get_operator_str(col);\r\n\r\n                    adjust_column_position();\r\n                    target.push.apply(target, chunkify(operator_str));\r\n                }\r\n                else if(ch in brackets) {\r\n                    var bracket = brackets[ch];\r\n\r\n                    if(bracket.is_open) {\r\n                        //mark the bracket\r\n                        open_brackets.push([bracket, lpos]);\r\n                        var f = e.substring(lpos, col);\r\n                        if(f in functions) {\r\n                            add_function(f);\r\n                        }\r\n                        else if(f !== '') {\r\n                            //assume multiplication\r\n                            //TODO: Add the multiplication to stack\r\n                            target.push(new Token(f, Token.VARIABLE_OR_LITERAL, lpos));\r\n                        }\r\n                        //go down one in scope\r\n                        addScope(bracket.maps_to, col);\r\n                    }\r\n                    else if(bracket.is_close) {\r\n                        //get the matching bracket\r\n                        var pair = open_brackets.pop();\r\n                        //throw errors accordingly\r\n                        //missing open bracket\r\n                        if(!pair)\r\n                            throw new ParityError('Missing open bracket for bracket at: ' + (col + 1));\r\n                        //incorrect pair\r\n                        else if(pair[0].id !== bracket.id - 1)\r\n                            throw new ParityError('Parity error');\r\n\r\n                        add_token(col);\r\n                        goUp();\r\n                    }\r\n                    set_last_position(col);\r\n                }\r\n                else if(ch === SPACE) {\r\n                    var prev = e.substring(lpos, col); //look back\r\n                    var nxt = e.charAt(col + 1); //look forward\r\n                    if(has_space) {\r\n\r\n                        if(prev in operators) {\r\n                            target.push(new Token(prev, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, prev);\r\n                            //we're at the closing space\r\n                            goUp(); //go up in scope if we're at a space\r\n\r\n                            //assume multiplication if it's not an operator except for minus\r\n                            var is_operator = nxt in operators;\r\n\r\n                            if((is_operator && operators[nxt].value === MINUS) || !is_operator) {\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                            }\r\n                        }\r\n                        has_space = false; //remove the space\r\n                    }\r\n                    else {\r\n                        //we're at the closing space\r\n                        //check if it's a function\r\n                        var f = e.substring(lpos, col);\r\n\r\n                        if(f in functions) {\r\n                            //there's no need to go up in scope if the next character is an operator\r\n                            has_space = true; //mark that a space was found\r\n                            add_function(f);\r\n                            addScope();\r\n                        }\r\n                        else if(f in operators) {\r\n                            target.push(new Token(f, Token.OPERATOR, col));\r\n                        }\r\n                        else {\r\n                            add_token(undefined, f);\r\n                            //peek ahead to the next character\r\n                            var nxt = e.charAt(col + 1);\r\n\r\n                            //If it's a number then add the multiplication operator to the stack but make sure that the next character\r\n                            //is not an operator\r\n\r\n                            if(prev !== EMPTY_STRING && nxt !== EMPTY_STRING && !(prev in operators) && !(nxt in operators))\r\n                                target.push(new Token(MULT, Token.OPERATOR, col));\r\n                        }\r\n                        //Possible source of bug. Review\r\n                        /*\r\n                         //space can mean multiplication so add the symbol if the is encountered\r\n                         if(/\\d+|\\d+\\.?\\d*e[\\+\\-]*\\d+/i.test(f)) {\r\n                         var next = e.charAt(col+1);\r\n                         var next_is_operator = next in operators;\r\n                         var ns = next_space(col+1);\r\n                         var next_word = e.substring(col+1, ns);\r\n                         //the next can either be a prefix operator or no operator\r\n                         if((next_is_operator && operators[next].prefix) || !(next_is_operator || next_word in operators))\r\n                         target.push(new Token('*', Token.OPERATOR, col));\r\n                         }\r\n                         */\r\n                    }\r\n                    set_last_position(col); //mark this location\r\n                }\r\n            }\r\n            //check that all brackets were closed\r\n            if(open_brackets.length) {\r\n                var b = open_brackets.pop();\r\n                throw new ParityError('Missing closed bracket for bracket at ' + (b[1] + 1));\r\n            }\r\n            //add the last token\r\n            add_token(col);\r\n\r\n            return tokens;\r\n        };\r\n        /*\r\n         * Puts token array in Reverse Polish Notation\r\n         * @param {Token[]} tokens\r\n         * @returns {Token[]}\r\n         */\r\n        this.toRPN = function (tokens) {\r\n            var fn = tokens.type;\r\n            var l = tokens.length, i;\r\n            var output = [];\r\n            var stack = [];\r\n            var prefixes = [];\r\n            var collapse = function (target, destination) {\r\n                while(target.length)\r\n                    destination.push(target.pop());\r\n            };\r\n            //mark all the prefixes and add them to the stack\r\n            for(i = 0; i < l; i++) {\r\n                var token = tokens[i];\r\n                if(token.type !== Token.OPERATOR)\r\n                    break;\r\n                if(!token.prefix)\r\n                    throw new OperatorError('Not a prefix operator');\r\n                token.is_prefix = true;\r\n                stack.push(token);\r\n            }\r\n            //begin with remaining tokens\r\n            for(; i < l; i++) {\r\n                var e = tokens[i];\r\n                if(e.type === Token.OPERATOR) {\r\n                    var operator = e;\r\n\r\n                    //create the option for the operator being overloaded\r\n                    if(operator.overloaded) {\r\n                        var next = tokens[i + 1];\r\n                        //if it's followed by a number or variable then we assume it's not a postfix operator\r\n                        if(next && next.type === Token.VARIABLE_OR_LITERAL) {\r\n                            operator.postfix = false;\r\n                            //override the original function with the overload function\r\n                            operator.action = operator.overloadAction;\r\n                            operator.leftAssoc = operator.overloadLeftAssoc;\r\n                        }\r\n                    }\r\n\r\n                    //if the stack is not empty\r\n                    while(stack.length) {\r\n                        var last = stack[stack.length - 1];\r\n                        //if (there is an operator at the top of the operator stack with greater precedence)\r\n                        //or (the operator at the top of the operator stack has equal precedence and is left associative)) ~ wikipedia\r\n                        //the !prefixes.length makes sure that the operator on stack isn't prematurely taken fromt he stack.\r\n                        if(!(last.precedence > operator.precedence || !operator.leftAssoc && last.precedence === operator.precedence))\r\n                            break;\r\n                        output.push(stack.pop());\r\n                    }\r\n\r\n                    //change the behavior of the operator if it's a vector and we've been asked to do so\r\n                    if((fn === 'vector' || fn === 'set') && 'vectorFn' in operator)\r\n                        operator.action = operator.vectorFn;\r\n\r\n\r\n                    //if the operator is a postfix operator then we're ready to go since it belongs\r\n                    //to the preceding token. However the output cannot be empty. It must have either\r\n                    //an operator or a variable/literal\r\n                    if(operator.postfix) {\r\n                        var previous = tokens[i - 1];\r\n                        if(!previous)\r\n                            throw new OperatorError(\"Unexpected prefix operator '\" + e.value + \"'! at \" + e.column);\r\n                        else if(previous.type === Token.OPERATOR) {\r\n                            //a postfix can only be followed by a postfix\r\n                            if(!previous.postfix)\r\n                                throw new OperatorError(\"Unexpected prefix operator '\" + previous.value + \"'! at \" + previous.column);\r\n                        }\r\n                    }\r\n                    else {\r\n                        //we must be at an infix so point the operator this\r\n                        do {\r\n                            //the first one is an infix operator all others have to be prefix operators so jump to the end\r\n                            var next = tokens[i + 1]; //take a look ahead\r\n                            var next_is_operator = next ? next.type === Token.OPERATOR : false; //check if it's an operator\r\n                            if(next_is_operator) {\r\n                                //if it's not a prefix operator then it not in the right place\r\n                                if(!next.prefix) {\r\n                                    throw new OperatorError('A prefix operator was expected at ' + next.column);\r\n                                }\r\n                                //mark it as a confirmed prefix\r\n                                next.is_prefix = true;\r\n                                //add it to the prefixes\r\n                                prefixes.push(next);\r\n                                i++;\r\n                            }\r\n                        }\r\n                        while(next_is_operator)\r\n                    }\r\n\r\n                    //if it's a prefix it should be on a special stack called prefixes\r\n                    //we do this to hold on to prefixes because of left associative operators.\r\n                    //they belong to the variable/literal but if placed on either the stack\r\n                    //or output there's no way of knowing this. I might be wrong so I welcome\r\n                    //any discussion about this.\r\n\r\n                    if(operator.is_prefix) //ADD ALL EXCEPTIONS FOR ADDING TO PREFIX STACK HERE. !!!\r\n                        prefixes.push(operator);\r\n                    else\r\n                        stack.push(operator);\r\n                    //move the prefixes to the stack\r\n                    while(prefixes.length) {\r\n                        if(operator.leftAssoc || !operator.leftAssoc && prefixes[prefixes.length - 1].precedence >= operator.precedence) //revisit for commas\r\n                            stack.push(prefixes.pop());\r\n                        else\r\n                            break;\r\n                    }\r\n                }\r\n                else if(e.type === Token.VARIABLE_OR_LITERAL) {\r\n                    //move prefixes to stack at beginning of scope\r\n                    if(output.length === 0)\r\n                        collapse(prefixes, stack);\r\n                    //done with token\r\n                    output.push(e);\r\n                    var last_on_stack = stack[stack.length - 1];\r\n                    //then move all the prefixes to the output\r\n                    if(!last_on_stack || !last_on_stack.leftAssoc)\r\n                        collapse(prefixes, output);\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    stack.push(e);\r\n                }\r\n                else if(e.type === Token.UNIT) {\r\n                    //if it's a unit it belongs on the stack since it's tied to the previous token\r\n                    output.push(e);\r\n                }\r\n                //if it's an additonal scope then put that into RPN form\r\n                if(Array.isArray(e)) {\r\n                    output.push(this.toRPN(e));\r\n                    if(e.type)\r\n                        output.push(new Token(e.type, Token.FUNCTION, e.column)); //since it's hidden it needs no column\r\n\r\n                }\r\n            }\r\n            //collapse the remainder of the stack and prefixes to output\r\n            collapse(stack, output);\r\n            collapse(prefixes, output);\r\n\r\n            return output;\r\n        };\r\n        /*\r\n         * Parses the tokens\r\n         * @param {Tokens[]} rpn\r\n         * @param {object} substitutions\r\n         * @returns {Symbol}\r\n         */\r\n        this.parseRPN = function (rpn, substitutions) {\r\n            try {\r\n                //default substitutions\r\n                substitutions = substitutions || {};\r\n                //prepare the substitutions.\r\n                //we first parse them out as-is\r\n                for(var x in substitutions)\r\n                    substitutions[x] = _.parse(substitutions[x], {});\r\n\r\n                //Although technically constants,\r\n                //pi and e are only available when evaluating the expression so add to the subs.\r\n                //Doing this avoids rounding errors\r\n                //link e and pi\r\n                if(Settings.PARSE2NUMBER) {\r\n                    //use the value provided if the individual for some strange reason prefers this.\r\n                    //one reason could be to sub e but not pi or vice versa\r\n                    if(!('e' in substitutions))\r\n                        substitutions.e = new Symbol(Settings.E);\r\n                    if((!('pi' in substitutions)))\r\n                        substitutions.pi = new Symbol(Settings.PI);\r\n                }\r\n\r\n                var Q = [];\r\n                for(var i = 0, l = rpn.length; i < l; i++) {\r\n                    var e = rpn[i];\r\n\r\n                    //Arrays indicate a new scope so parse that out\r\n                    if(Array.isArray(e)) {\r\n                        e = this.parseRPN(e, substitutions);\r\n                    }\r\n\r\n                    if(e) {\r\n                        if(e.type === Token.OPERATOR) {\r\n                            if(e.is_prefix || e.postfix)\r\n                                //resolve the operation assocated with the prefix\r\n                                Q.push(e.operation(Q.pop()));\r\n                            else {\r\n                                var b = Q.pop();\r\n                                var a = Q.pop();\r\n                                //Throw an error if the RH value is empty. This cannot be a postfix since we already checked\r\n                                if(typeof a === 'undefined')\r\n                                    throw new OperatorError(e + ' is not a valid postfix operator at ' + e.column);\r\n\r\n                                var is_comma = e.action === 'comma';\r\n                                //convert Sets to Vectors on all operations at this point. Sets are only recognized functions or individually\r\n                                if(a instanceof Set && !is_comma)\r\n                                    a = Vector.fromSet(a);\r\n\r\n                                if(b instanceof Set && !is_comma)\r\n                                    b = Vector.fromSet(b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('pre_operator', a, b, e);\r\n\r\n                                var ans = _[e.action](a, b);\r\n\r\n                                //call all the pre-operators\r\n                                this.callPeekers('post_operator', ans, a, b, e);\r\n\r\n                                Q.push(ans);\r\n                            }\r\n                        }\r\n                        else if(e.type === Token.FUNCTION) {\r\n                            var args = Q.pop();\r\n                            var parent = args.parent; //make a note of the parent\r\n                            if(!(args instanceof Collection))\r\n                                args = Collection.create(args);\r\n                            //the return value may be a vector. If it is then we check\r\n                            //Q to see if there's another vector on the stack. If it is then\r\n                            //we check if has elements. If it does then we know that we're dealing\r\n                            //with an \"getter\" object and return the requested values\r\n\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            //call the function. This is the _.callfunction method in nerdamer\r\n                            var fn_name = e.value;\r\n                            var fn_args = args.getItems();\r\n\r\n                            //call the pre-function peekers\r\n                            this.callPeekers('pre_function', fn_name, fn_args);\r\n\r\n                            var ret = _.callfunction(fn_name, fn_args);\r\n\r\n                            //call the post-function peekers\r\n                            this.callPeekers('post_function', ret, fn_name, fn_args);\r\n\r\n                            var last = Q[Q.length - 1];\r\n                            var next = rpn[i + 1];\r\n                            var next_is_comma = next && next.type === Token.OPERATOR && next.value === ',';\r\n\r\n                            if(!next_is_comma && ret instanceof Vector && last && last.elements && !(last instanceof Collection)) {\r\n                                //remove the item from the queue\r\n                                var item = Q.pop();\r\n\r\n                                var getter = ret.elements[0];\r\n                                //check if it's symbolic. If so put it back and add the item to the stack\r\n                                if(!getter.isConstant()) {\r\n                                    item.getter = getter;\r\n                                    Q.push(item);\r\n                                    Q.push(ret);\r\n                                }\r\n                                else if(getter instanceof Slice) {\r\n                                    //if it's a Slice return the slice\r\n                                    Q.push(Vector.fromArray(item.elements.slice(getter.start, getter.end)));\r\n                                }\r\n                                else {\r\n                                    var index = Number(getter);\r\n                                    var il = item.elements.length;\r\n                                    //support for negative indices\r\n                                    if(index < 0)\r\n                                        index = il + index;\r\n                                    //it it's still out of bounds\r\n                                    if(index < 0 || index >= il) //index should no longer be negative since it's been reset above\r\n                                        //range error\r\n                                        throw new OutOfRangeError('Index out of range ' + (e.column + 1));\r\n\r\n                                    var element = item.elements[index];\r\n                                    //cyclic but we need to mark this for future reference\r\n                                    item.getter = index;\r\n                                    element.parent = item;\r\n\r\n                                    Q.push(element);\r\n                                }\r\n                            }\r\n                            else {\r\n                                //extend the parent reference\r\n                                if(parent)\r\n                                    ret.parent = parent;\r\n                                Q.push(ret);\r\n                            }\r\n\r\n                        }\r\n                        else {\r\n                            var subbed;\r\n                            var v = e.value;\r\n\r\n                            if(v in Settings.ALIASES)\r\n                                e = _.parse(Settings.ALIASES[e]);\r\n                            //wrap it in a symbol if need be\r\n                            else if(e.type === Token.VARIABLE_OR_LITERAL)\r\n                                e = new Symbol(v);\r\n                            else if(e.type === Token.UNIT) {\r\n                                e = new Symbol(v);\r\n                                e.isUnit = true;\r\n                            }\r\n\r\n                            //make substitutions\r\n                            //Always constants first. This avoids the being overridden\r\n                            if(v in _.CONSTANTS) {\r\n                                subbed = e;\r\n                                e = new Symbol(_.CONSTANTS[v]);\r\n                            }\r\n                            //next substitutions. This allows declared variable to be overridden\r\n                            //check if the values match to avoid erasing the multiplier.\r\n                            //Example:/e = 3*a. substutiting a for a will wipe out the multiplier.\r\n                            else if(v in substitutions && v !== substitutions[v].toString()) {\r\n                                subbed = e;\r\n                                e = substitutions[v].clone();\r\n                            }\r\n                            //next declare variables\r\n                            else if(v in VARS) {\r\n                                subbed = e;\r\n                                e = VARS[v].clone();\r\n                            }\r\n                            //make notation of what it was before\r\n                            if(subbed)\r\n                                e.subbed = subbed;\r\n\r\n                            Q.push(e);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                var retval = Q[0];\r\n\r\n                if(['undefined', 'string', 'number'].indexOf(typeof retval) !== -1) {\r\n                    throw new UnexpectedTokenError('Unexpected token!');\r\n                }\r\n\r\n                return retval;\r\n            }\r\n            catch(error) {\r\n                var rethrowErrors = [OutOfFunctionDomainError];\r\n                // Rethrow certain errors in the same class to preserve them\r\n                rethrowErrors.forEach(function (E) {\r\n                    if(error instanceof E) {\r\n                        throw new E(error.message + ': ' + e.column);\r\n                    }\r\n                });\r\n\r\n                throw new ParseError(error.message + ': ' + e.column);\r\n            }\r\n        };\r\n        /**\r\n         * This is the method that triggers the parsing of the string. It generates a parse tree but processes\r\n         * it right away. The operator functions are called when their respective operators are reached. For instance\r\n         * + with cause this.add to be called with the left and right hand values. It works by walking along each\r\n         * character of the string and placing the operators on the stack and values on the output. When an operator\r\n         * having a lower order than the last is reached then the stack is processed from the last operator on the\r\n         * stack.\r\n         * @param {String} token\r\n         */\r\n\r\n        function Node(token) {\r\n            this.type = token.type;\r\n            this.value = token.value;\r\n            //the incoming token may already be a Node type\r\n            this.left = token.left;\r\n            this.right = token.right;\r\n        }\r\n\r\n        Node.prototype.toString = function () {\r\n            var left = this.left ? this.left.toString() + '---' : '';\r\n            var right = this.right ? '---' + this.right.toString() : '';\r\n            return left + '(' + this.value + ')' + right;\r\n        };\r\n\r\n        Node.prototype.toHTML = function (depth, indent) {\r\n            depth = depth || 0;\r\n            indent = typeof indent === 'undefined' ? 4 : indent;\r\n            var tab = function (n) {\r\n                return ' '.repeat(indent * n);\r\n            };\r\n            var html = '';\r\n            var left = this.left ? tab(depth + 1) + '<li>\\n' + this.left.toHTML(depth + 2, indent) + tab(depth + 1) + '</li> \\n' : '';\r\n            var right = this.right ? tab(depth + 1) + '<li>\\n' + this.right.toHTML(depth + 2, indent) + tab(depth + 1) + '</li>\\n' : '';\r\n            var html = tab(depth) + '<div class=\"' + this.type.toLowerCase() + '\"><span>' + this.value + '</span></div>' + tab(depth) + '\\n';\r\n            if(left || right) {\r\n                html += tab(depth) + '<ul>\\n' + left + right + tab(depth) + '</ul>\\n';\r\n            }\r\n            html += '';\r\n            return html;\r\n        };\r\n\r\n        this.tree = function (tokens) {\r\n            var Q = [];\r\n            for(var i = 0; i < tokens.length; i++) {\r\n                var e = tokens[i];\r\n                //Arrays indicate a new scope so parse that out\r\n                if(Array.isArray(e)) {\r\n                    e = this.tree(e);\r\n                    //if it's a comma then it's just arguments\r\n                    Q.push(e);\r\n                    continue;\r\n                }\r\n                if(e.type === Token.OPERATOR) {\r\n                    if(e.is_prefix || e.postfix) {\r\n                        //prefixes go to the left, postfix to the right\r\n                        var location = e.is_prefix ? 'left' : 'right';\r\n                        var last = Q.pop();\r\n                        e = new Node(e);\r\n                        e[location] = last;\r\n                        Q.push(e);\r\n                    }\r\n                    else {\r\n                        e = new Node(e);\r\n                        e.right = Q.pop();\r\n                        e.left = Q.pop();\r\n                        Q.push(e);\r\n                    }\r\n                }\r\n                else if(e.type === Token.FUNCTION) {\r\n                    e = new Node(e);\r\n                    var args = Q.pop();\r\n                    e.right = args;\r\n                    if(e.value === 'object') {\r\n                        //check if Q has a value\r\n                        var last = Q[Q.length - 1];\r\n                        if(last) {\r\n                            while(last.right) {\r\n                                last = last.right;\r\n                            }\r\n                            last.right = e;\r\n                            continue;\r\n                        }\r\n                    }\r\n\r\n                    Q.push(e);\r\n                }\r\n                else {\r\n                    Q.push(new Node(e));\r\n                }\r\n            }\r\n\r\n            return Q[0];\r\n        };\r\n        this.parse = function (e, substitutions) {\r\n            e = prepare_expression(e);\r\n            substitutions = substitutions || {};\r\n            //three passes but easier to debug\r\n            var tokens = this.tokenize(e);\r\n            var rpn = this.toRPN(tokens);\r\n            return this.parseRPN(rpn, substitutions);\r\n        };\r\n        /**\r\n         * TODO: Switch to Parser.tokenize for this method\r\n         * Reads a string into an array of Symbols and operators\r\n         * @param {String} expression_string\r\n         * @returns {Array}\r\n         */\r\n        this.toObject = function (expression_string) {\r\n            var objectify = function (tokens) {\r\n                var output = [];\r\n                for(var i = 0, l = tokens.length; i < l; i++) {\r\n                    var token = tokens[i];\r\n                    var v = token.value;\r\n                    if(token.type === Token.VARIABLE_OR_LITERAL) {\r\n                        output.push(new Symbol(v));\r\n                    }\r\n                    else if(token.type === Token.FUNCTION) {\r\n                        //jump ahead since the next object are the arguments\r\n                        i++;\r\n                        //create a symbolic function and stick it on output\r\n                        var f = _.symfunction(v, objectify(tokens[i]));\r\n                        f.isConversion = true;\r\n                        output.push(f);\r\n                    }\r\n                    else if(token.type === Token.OPERATOR) {\r\n                        output.push(v);\r\n                    }\r\n                    else {\r\n                        output.push(objectify(token));\r\n                    }\r\n                }\r\n\r\n                return output;\r\n            };\r\n            return objectify(_.tokenize(expression_string));\r\n        };\r\n\r\n        // A helper method for toTeX\r\n        var chunkAtCommas = function (arr) {\r\n            var j, k = 0, chunks = [[]];\r\n            for(var j = 0, l = arr.length; j < l; j++) {\r\n                if(arr[j] === ',') {\r\n                    k++;\r\n                    chunks[k] = [];\r\n                }\r\n                else {\r\n                    chunks[k].push(arr[j]);\r\n                }\r\n            }\r\n            return chunks;\r\n        };\r\n\r\n        // Helper method for toTeX\r\n        var rem_brackets = function (str) {\r\n            return str.replace(/^\\\\left\\((.+)\\\\right\\)$/g, function (str, a) {\r\n                if(a)\r\n                    return a;\r\n                return str;\r\n            });\r\n        };\r\n\r\n        var remove_redundant_powers = function (arr) {\r\n            // The filtered array\r\n            var narr = [];\r\n\r\n            while(arr.length) {\r\n                // Remove the element from the front\r\n                var e = arr.shift();\r\n                var next = arr[0];\r\n                var next_is_array = isArray(next);\r\n                var next_is_minus = next === '-';\r\n\r\n                // Remove redundant plusses \r\n                if(e === '^') {\r\n                    if(next === '+') {\r\n                        arr.shift();\r\n                    }\r\n                    else if(next_is_array && next[0] === '+') {\r\n                        next.shift();\r\n                    }\r\n\r\n                    // Remove redundant parentheses\r\n                    if(next_is_array && next.length === 1) {\r\n                        arr.unshift(arr.shift()[0]);\r\n                    }\r\n                }\r\n\r\n                // Check if it's a negative power\r\n                if(e === '^' && (next_is_array && next[0] === '-' || next_is_minus)) {\r\n                    // If so:\r\n                    // - Remove it from the new array, place a one and a division sign in that array and put it back\r\n                    var last = narr.pop();\r\n                    // Check if it's something multiplied by\r\n                    var before = narr[narr.length - 1];\r\n                    var before_last = '1';\r\n\r\n                    if(before === '*') {\r\n                        narr.pop();\r\n                        // For simplicity we just pop it. \r\n                        before_last = narr.pop();\r\n                    }\r\n                    // Implied multiplication\r\n                    else if(isArray(before)) {\r\n                        before_last = narr.pop();\r\n                    }\r\n\r\n                    narr.push(before_last, '/', last, e);\r\n\r\n                    // Remove the negative sign from the power \r\n                    if(next_is_array) {\r\n                        next.shift();\r\n                    }\r\n                    else {\r\n                        arr.shift();\r\n                    }\r\n\r\n                    // Remove it from the array so we don't end up with redundant parentheses if we can\r\n                    if(next_is_array && next.length === 1) {\r\n                        narr.push(arr.shift()[0]);\r\n                    }\r\n                }\r\n                else {\r\n                    narr.push(e);\r\n                }\r\n            }\r\n\r\n            return narr;\r\n        };\r\n        /*\r\n         * Convert expression or object to LaTeX\r\n         * @param {String} expression_or_obj\r\n         * @param {object} opt\r\n         * @returns {String}\r\n         */\r\n        this.toTeX = function (expression_or_obj, opt) {\r\n            opt = opt || {};\r\n            // Add decimal option as per issue #579. Consider passing an object to Latex.latex as option instead of string\r\n            var decimals = opt.decimals === true ? 'decimals' : undefined;\r\n\r\n            var obj = typeof expression_or_obj === 'string' ? this.toObject(expression_or_obj) : expression_or_obj,\r\n                    TeX = [],\r\n                    cdot = typeof opt.cdot === 'undefined' ? '\\\\cdot' : opt.cdot; //set omit cdot to true by default\r\n\r\n            // Remove negative powers as per issue #570\r\n            obj = remove_redundant_powers(obj);\r\n\r\n            if(isArray(obj)) {\r\n                var nobj = [], a, b;\r\n                //first handle ^\r\n                for(var i = 0; i < obj.length; i++) {\r\n                    a = obj[i];\r\n\r\n                    if(obj[i + 1] === '^') {\r\n                        b = obj[i + 2];\r\n                        nobj.push(LaTeX.braces(this.toTeX([a])) + '^' + LaTeX.braces(this.toTeX([b])));\r\n                        i += 2;\r\n                    }\r\n                    else {\r\n                        nobj.push(a);\r\n                    }\r\n                }\r\n                obj = nobj;\r\n            }\r\n\r\n            for(var i = 0, l = obj.length; i < l; i++) {\r\n                var e = obj[i];\r\n\r\n                // Convert * to cdot\r\n                if(e === '*') {\r\n                    e = cdot;\r\n                }\r\n\r\n                if(isSymbol(e)) {\r\n                    if(e.group === FN) {\r\n                        var fname = e.fname, f;\r\n\r\n                        if(fname === SQRT) {\r\n                            f = '\\\\sqrt' + LaTeX.braces(this.toTeX(e.args));\r\n                        }\r\n                        else if(fname === ABS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'abs');\r\n                        }\r\n                        else if(fname === PARENTHESIS) {\r\n                            f = LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n                        else if(fname === Settings.LOG10) {\r\n                            f = '\\\\' + Settings.LOG10_LATEX + '\\\\left( ' + this.toTeX(e.args) + '\\\\right)';\r\n                        }\r\n                        else if(fname === 'integrate') {\r\n                            /* Retrive [Expression, x] */\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            /* Build TeX */\r\n                            var expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[1]);\r\n                            f = '\\\\int ' + expr + '\\\\, d' + dx;\r\n                        }\r\n                        else if(fname === 'defint') {\r\n                            var chunks = chunkAtCommas(e.args),\r\n                                    expr = LaTeX.braces(this.toTeX(chunks[0])),\r\n                                    dx = this.toTeX(chunks[3]),\r\n                                    lb = this.toTeX(chunks[1]),\r\n                                    ub = this.toTeX(chunks[2]);\r\n                            f = '\\\\int\\\\limits_{' + lb + '}^{' + ub + '} ' + expr + '\\\\, d' + dx;\r\n\r\n                        }\r\n                        else if(fname === 'diff') {\r\n                            var chunks = chunkAtCommas(e.args);\r\n                            var dx = '', expr = LaTeX.braces(this.toTeX(chunks[0]));\r\n                            /* Handle cases: one argument provided, we need to guess the variable, and assume n = 1 */\r\n                            if(chunks.length === 1) {\r\n                                var vars = [];\r\n                                for(j = 0; j < chunks[0].length; j++) {\r\n                                    if(chunks[0][j].group === 3) {\r\n                                        vars.push(chunks[0][j].value);\r\n                                    }\r\n                                }\r\n                                vars.sort();\r\n                                dx = vars.length > 0 ? ('\\\\frac{d}{d ' + vars[0] + '}') : '\\\\frac{d}{d x}';\r\n                            }\r\n                            /* If two arguments, we have expression and variable, we assume n = 1 */\r\n                            else if(chunks.length === 2) {\r\n                                dx = '\\\\frac{d}{d ' + chunks[1] + '}';\r\n                            }\r\n                            /* If we have more than 2 arguments, we assume we've got everything */\r\n                            else {\r\n                                dx = '\\\\frac{d^{' + chunks[2] + '}}{d ' + this.toTeX(chunks[1]) + '^{' + chunks[2] + '}}';\r\n                            }\r\n\r\n                            f = dx + '\\\\left(' + expr + '\\\\right)';\r\n\r\n                        }\r\n                        else if(fname === 'sum' || fname === 'product') {\r\n                            // Split e.args into 4 parts based on locations of , symbols.\r\n                            var argSplit = [[], [], [], []], j = 0, i;\r\n                            for(i = 0; i < e.args.length; i++) {\r\n                                if(e.args[i] === ',') {\r\n                                    j++;\r\n                                    continue;\r\n                                }\r\n                                argSplit[j].push(e.args[i]);\r\n                            }\r\n                            // Then build TeX string.\r\n                            f = (fname === 'sum' ? '\\\\sum_' : '\\\\prod_') + LaTeX.braces(this.toTeX(argSplit[1]) + ' = ' + this.toTeX(argSplit[2]));\r\n                            f += '^' + LaTeX.braces(this.toTeX(argSplit[3])) + LaTeX.braces(this.toTeX(argSplit[0]));\r\n                        }\r\n                        else if(fname === 'limit') {\r\n                            var args = chunkAtCommas(e.args).map(function (x) {\r\n                                if(Array.isArray(x))\r\n                                    return _.toTeX(x.join(''));\r\n                                return _.toTeX(String(x));\r\n                            });\r\n                            f = '\\\\lim_' + LaTeX.braces(args[1] + '\\\\to ' + args[2]) + ' ' + LaTeX.braces(args[0]);\r\n                        }\r\n                        else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                            f = this.toTeX(e.args) + (fname === FACTORIAL ? '!' : '!!');\r\n                        }\r\n                        else {\r\n                            f = LaTeX.latex(e, decimals);\r\n                            //f = '\\\\mathrm'+LaTeX.braces(fname.replace(/_/g, '\\\\_')) + LaTeX.brackets(this.toTeX(e.args), 'parens');\r\n                        }\r\n\r\n                        TeX.push(f);\r\n                    }\r\n                    else {\r\n                        TeX.push(LaTeX.latex(e, decimals));\r\n                    }\r\n                }\r\n                else if(isArray(e)) {\r\n                    TeX.push(LaTeX.brackets(this.toTeX(e)));\r\n                }\r\n                else {\r\n                    if(e === '/')\r\n                        TeX.push(LaTeX.frac(rem_brackets(TeX.pop()), rem_brackets(this.toTeX([obj[++i]]))));\r\n                    else\r\n                        TeX.push(e);\r\n                }\r\n            }\r\n\r\n            return TeX.join(' ');\r\n        };\r\n\r\n//Parser.functions ==============================================================\r\n        /* Although parens is not a \"real\" function it is important in some cases when the\r\n         * symbol must carry parenthesis. Once set you don't have to worry about it anymore\r\n         * as the parser will get rid of it at the first opportunity\r\n         */\r\n        function parens(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                return symbol;\r\n            }\r\n            return _.symfunction('parens', [symbol]);\r\n        }\r\n\r\n        function abs(symbol) {\r\n\r\n            //|-∞| = ∞\r\n            if(symbol.isInfinity) {\r\n                return Symbol.infinity();\r\n            }\r\n            if(symbol.multiplier.lessThan(0))\r\n                symbol.multiplier.negate();\r\n\r\n            if(symbol.isImaginary()) {\r\n                var re = symbol.realpart();\r\n                var im = symbol.imagpart();\r\n                if(re.isConstant() && im.isConstant())\r\n                    return sqrt(_.add(_.pow(re, new Symbol(2)), _.pow(im, new Symbol(2))));\r\n            }\r\n            else if(isNumericSymbol(symbol) || even(symbol.power)) {\r\n                return symbol;\r\n            }\r\n\r\n            if(symbol.isComposite()) {\r\n                var ms = [];\r\n                symbol.each(function (x) {\r\n                    ms.push(x.multiplier);\r\n                });\r\n                var gcd = Math2.QGCD.apply(null, ms);\r\n                if(gcd.lessThan(0)) {\r\n                    symbol.multiplier = symbol.multiplier.multiply(new Frac(-1));\r\n                    symbol.distributeMultiplier();\r\n                }\r\n            }\r\n\r\n            //convert |n*x| to n*|x|\r\n            var m = _.parse(symbol.multiplier);\r\n            symbol.toUnitMultiplier();\r\n\r\n            return _.multiply(m, _.symfunction(ABS, [symbol]));\r\n        }\r\n        /**\r\n         * The factorial function\r\n         * @param {Symbol} symbol\r\n         * @return {Symbol}\r\n         */\r\n        function factorial(symbol) {\r\n            var retval;\r\n            if(isVector(symbol)) {\r\n                var V = new Vector();\r\n                symbol.each(function (x, i) {\r\n                    //i start at one.\r\n                    V.set(i - 1, factorial(x));\r\n                });\r\n                return V;\r\n            }\r\n            if(isMatrix(symbol)) {\r\n                var M = new Matrix();\r\n                symbol.each(function (x, i, j) {\r\n                    //i start at one.\r\n                    M.set(i, j, factorial(x));\r\n                });\r\n                return M;\r\n            }\r\n            if(Settings.PARSE2NUMBER && symbol.isConstant()) {\r\n                if(isInt(symbol)) {\r\n                    retval = Math2.bigfactorial(symbol);\r\n                }\r\n                else {\r\n                    retval = Math2.gamma(symbol.multiplier.add(new Frac(1)).toDecimal());\r\n                }\r\n\r\n                retval = bigConvert(retval);\r\n                return retval;\r\n            }\r\n            else if(symbol.isConstant()) {\r\n                var den = symbol.getDenom();\r\n                if(den.equals(2)) {\r\n                    var num = symbol.getNum();\r\n                    var a, b, c, n;\r\n\r\n                    if(!symbol.multiplier.isNegative()) {\r\n                        n = _.add(num, new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                        b = _.pow(new Symbol(4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                    }\r\n                    else {\r\n                        n = _.subtract(num.negate(), new Symbol(1)).multiplier.divide(new Frac(2));\r\n                        a = _.pow(new Symbol(-4), new Symbol(n)).multiplier.multiply(Math2.bigfactorial(n));\r\n                        b = Math2.bigfactorial(new Frac(2).multiply(n));\r\n                    }\r\n                    c = a.divide(b);\r\n                    return _.multiply(_.parse('sqrt(pi)'), new Symbol(c));\r\n                }\r\n            }\r\n            return _.symfunction(FACTORIAL, [symbol]);\r\n        }\r\n        ;\r\n        /**\r\n         * Returns the continued fraction of a number\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} n\r\n         * @returns {Symbol}\r\n         */\r\n        function continued_fraction(symbol, n) {\r\n            var _symbol = evaluate(symbol);\r\n            if(_symbol.isConstant()) {\r\n                var cf = Math2.continuedFraction(_symbol, n);\r\n                //convert the fractions array to a new Vector\r\n                var fractions = Vector.fromArray(cf.fractions.map(function (x) {\r\n                    return new Symbol(x);\r\n                }));\r\n                return Vector.fromArray([new Symbol(cf.sign), new Symbol(cf.whole), fractions]);\r\n            }\r\n            return _.symfunction('continued_fraction', arguments);\r\n        }\r\n        /**\r\n         * Returns the error function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function erf(symbol) {\r\n            var _symbol = evaluate(symbol);\r\n\r\n            if(_symbol.isConstant()) {\r\n                return Math2.erf(_symbol);\r\n            }\r\n            else if(_symbol.isImaginary()) {\r\n                return complex.erf(symbol);\r\n            }\r\n            return _.symfunction('erf', arguments);\r\n        }\r\n        ;\r\n        /**\r\n         * The mod function\r\n         * @param {Symbol} symbol1\r\n         * @param {Symbol} symbol2\r\n         * @returns {Symbol}\r\n         */\r\n        function mod(symbol1, symbol2) {\r\n            if(symbol1.isConstant() && symbol2.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                retval.multiplier = retval.multiplier.multiply(symbol1.multiplier.mod(symbol2.multiplier));\r\n                return retval;\r\n            }\r\n            //try to see if division has remainder of zero\r\n            var r = _.divide(symbol1.clone(), symbol2.clone());\r\n            if(isInt(r))\r\n                return new Symbol(0);\r\n            return _.symfunction('mod', [symbol1, symbol2]);\r\n        }\r\n        /**\r\n         * A branghing function\r\n         * @param {Boolean} condition\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        function IF(condition, a, b) {\r\n            if(typeof condition !== 'boolean')\r\n                if(isNumericSymbol(condition))\r\n                    condition = !!Number(condition);\r\n            if(condition)\r\n                return a;\r\n            return b;\r\n        }\r\n        /**\r\n         *\r\n         * @param {Matrix|Vector|Set|Collection} obj\r\n         * @param {Symbol} item\r\n         * @returns {Boolean}\r\n         */\r\n        function is_in(obj, item) {\r\n            if(isMatrix(obj)) {\r\n                for(var i = 0, l = obj.rows(); i < l; i++) {\r\n                    for(var j = 0, l2 = obj.cols(); j < l2; j++) {\r\n                        var element = obj.elements[i][j];\r\n                        if(element.equals(item))\r\n                            return new Symbol(1);\r\n                    }\r\n                }\r\n            }\r\n            else if(obj.elements) {\r\n                for(var i = 0, l = obj.elements.length; i < l; i++) {\r\n                    if(obj.elements[i].equals(item))\r\n                        return new Symbol(1);\r\n                }\r\n            }\r\n\r\n            return new Symbol(0);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for sinc\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sinc(symbol) {\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant()) {\r\n                    return new Symbol(Math2.sinc(symbol));\r\n                }\r\n                return _.parse(format('sin({0})/({0})', symbol));\r\n            }\r\n            return _.symfunction('sinc', [symbol]);\r\n        }\r\n\r\n        /**\r\n         * A symbolic extension for exp. This will auto-convert all instances of exp(x) to e^x.\r\n         * Thanks @ Happypig375\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function exp(symbol) {\r\n            if(symbol.fname === Settings.LOG && symbol.isLinear()) {\r\n                return _.pow(symbol.args[0], Symbol.create(symbol.multiplier));\r\n            }\r\n            return _.parse(format('e^({0})', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value degrees to radians\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function radians(symbol) {\r\n            return _.parse(format('({0})*pi/180', symbol));\r\n        }\r\n\r\n        /**\r\n         * Converts value from radians to degrees\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function degrees(symbol) {\r\n            return _.parse(format('({0})*180/pi', symbol));\r\n        }\r\n\r\n        function nroots(symbol) {\r\n            var a, b;\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                a = Symbol.unwrapPARENS(_.parse(symbol).toLinear());\r\n                b = _.parse(symbol.power);\r\n            }\r\n            else if(symbol.group === P) {\r\n                a = _.parse(symbol.value);\r\n                b = _.parse(symbol.power);\r\n            }\r\n\r\n            if(a && b && a.group === N && b.group === N) {\r\n                var _roots = [];\r\n                var parts = Symbol.toPolarFormArray(symbol);\r\n                var r = _.parse(a).abs().toString();\r\n                //https://en.wikipedia.org/wiki/De_Moivre%27s_formula\r\n                var x = arg(a).toString();\r\n                var n = b.multiplier.den.toString();\r\n                var p = b.multiplier.num.toString();\r\n\r\n                var formula = \"(({0})^({1})*(cos({3})+({2})*sin({3})))^({4})\";\r\n                for(var i = 0; i < n; i++) {\r\n                    var t = evaluate(_.parse(format(\"(({0})+2*pi*({1}))/({2})\", x, i, n))).multiplier.toDecimal();\r\n                    _roots.push(evaluate(_.parse(format(formula, r, n, Settings.IMAGINARY, t, p))));\r\n                }\r\n                return Vector.fromArray(_roots);\r\n            }\r\n            else if(symbol.isConstant(true)) {\r\n                var sign = symbol.sign();\r\n                var x = evaluate(symbol.abs());\r\n                var root = _.sqrt(x);\r\n\r\n                var _roots = [root.clone(), root.negate()];\r\n\r\n                if(sign < 0)\r\n                    _roots = _roots.map(function (x) {\r\n                        return _.multiply(x, Symbol.imaginary());\r\n                    });\r\n            }\r\n            else {\r\n                _roots = [_.parse(symbol)];\r\n            }\r\n\r\n            return Vector.fromArray(_roots);\r\n        }\r\n\r\n        /**\r\n         * Rationalizes a symbol\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rationalize(symbol) {\r\n            if(symbol.isComposite()) {\r\n                var retval = new Symbol(0);\r\n                var num, den, retnum, retden, a, b, n, d;\r\n                symbol.each(function (x) {\r\n                    num = x.getNum();\r\n                    den = x.getDenom();\r\n                    retnum = retval.getNum();\r\n                    retden = retval.getDenom();\r\n                    a = _.multiply(den, retnum);\r\n                    b = _.multiply(num, retden);\r\n                    n = _.expand(_.add(a, b));\r\n                    d = _.multiply(retden, den);\r\n                    retval = _.divide(n, d);\r\n                }, true);\r\n\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         * The square root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function sqrt(symbol) {\r\n            if(!isSymbol(symbol)) {\r\n                symbol = _.parse(symbol);\r\n            }\r\n            \r\n            // Exit early for EX\r\n            if(symbol.group === EX) {\r\n                return _.symfunction(SQRT, [symbol]);\r\n            }\r\n\r\n            if(symbol.fname === '' && symbol.power.equals(1))\r\n                symbol = symbol.args[0];\r\n\r\n            var is_negative = symbol.multiplier.sign() < 0;\r\n\r\n            if(Settings.PARSE2NUMBER) {\r\n                if(symbol.isConstant() && !is_negative) {\r\n                    return new Symbol(bigDec.sqrt(symbol.multiplier.toDecimal()));\r\n                }\r\n                else if(symbol.isImaginary()) {\r\n                    return complex.sqrt(symbol);\r\n                }\r\n                else if(symbol.group === S) {\r\n                    return _.symfunction('sqrt', [symbol]);\r\n                }\r\n            }\r\n\r\n            var img, retval,\r\n                    isConstant = symbol.isConstant();\r\n\r\n            if(symbol.group === CB && symbol.isLinear()) {\r\n                var m = sqrt(Symbol(symbol.multiplier));\r\n                for(var s in symbol.symbols) {\r\n                    var x = symbol.symbols[s];\r\n                    m = _.multiply(m, sqrt(x));\r\n                }\r\n\r\n                retval = m;\r\n            }\r\n            //if the symbol is already sqrt then it's that symbol^(1/4) and we can unwrap it\r\n            else if(symbol.fname === SQRT) {\r\n                var s = symbol.args[0];\r\n                var ms = symbol.multiplier;\r\n                s.setPower(symbol.power.multiply(new Frac(0.25)));\r\n                retval = s;\r\n                //grab the multiplier\r\n                if(!ms.equals(1))\r\n                    retval = _.multiply(sqrt(_.parse(ms)), retval);\r\n            }\r\n            //if the symbol is a fraction then we don't keep can unwrap it. For instance\r\n            //no need to keep sqrt(x^(1/3))\r\n            else if(!symbol.power.isInteger()) {\r\n                symbol.setPower(symbol.power.multiply(new Frac(0.5)));\r\n                retval = symbol;\r\n            }\r\n            else if(symbol.multiplier < 0 && symbol.group === S) {\r\n                var a = _.parse(symbol.multiplier).negate();\r\n                var b = _.parse(symbol).toUnitMultiplier().negate();\r\n                retval = _.multiply(_.symfunction(Settings.SQRT, [b]), sqrt(a));\r\n            }\r\n            else {\r\n\r\n                //Related to issue #401. Since sqrt(a)*sqrt(b^-1) relates in issues, we'll change the form\r\n                //to sqrt(a)*sqrt(b)^1 for better simplification\r\n                //the sign of the power\r\n                var sign = symbol.power.sign();\r\n                //remove the sign\r\n                symbol.power = symbol.power.abs();\r\n\r\n                //if the symbols is imagary then we place in the imaginary part. We'll return it\r\n                //as a product\r\n                if(isConstant && symbol.multiplier.lessThan(0)) {\r\n                    img = Symbol.imaginary();\r\n                    symbol.multiplier = symbol.multiplier.abs();\r\n                }\r\n\r\n                var q = symbol.multiplier.toDecimal(),\r\n                        qa = Math.abs(q),\r\n                        t = Math.sqrt(qa);\r\n\r\n                var m;\r\n                //it's a perfect square so take the square\r\n                if(isInt(t)) {\r\n                    m = new Symbol(t);\r\n                }\r\n                else if(isInt(q)) {\r\n                    var factors = Math2.ifactor(q);\r\n                    var tw = 1;\r\n                    for(var x in factors) {\r\n                        var n = factors[x],\r\n                                nn = (n - (n % 2)); //get out the whole numbers\r\n                        if(nn) { //if there is a whole number ...\r\n                            var w = Math.pow(x, nn);\r\n                            tw *= Math.pow(x, nn / 2); //add to total wholes\r\n                            q /= w; //reduce the number by the wholes\r\n                        }\r\n                    }\r\n                    m = _.multiply(_.symfunction(SQRT, [new Symbol(q)]), new Symbol(tw));\r\n                }\r\n                else {\r\n                    //reduce the numerator and denominator using prime factorization\r\n                    var c = [new Symbol(symbol.multiplier.num), new Symbol(symbol.multiplier.den)];\r\n                    var r = [new Symbol(1), new Symbol(1)];\r\n                    var sq = [new Symbol(1), new Symbol(1)];\r\n                    for(var i = 0; i < 2; i++) {\r\n                        var n = c[i];\r\n                        //get the prime factors and loop through each.\r\n                        pfactor(n).each(function (x) {\r\n                            x = Symbol.unwrapPARENS(x);\r\n                            var b = x.clone().toLinear();\r\n                            var p = Number(x.power);\r\n                            //We'll consider it safe to use the native Number since 2^1000 is already a pretty huge number\r\n                            var rem = p % 2; //get the remainder. This will be 1 if 3 since sqrt(n^2) = n where n is positive\r\n                            var w = (p - rem) / 2; //get the whole numbers of n/2\r\n                            r[i] = _.multiply(r[i], _.pow(b, new Symbol(w)));\r\n                            sq[i] = _.multiply(sq[i], sqrt(_.pow(b, new Symbol(rem))));\r\n                        });\r\n                    }\r\n                    m = _.divide(_.multiply(r[0], sq[0]), _.multiply(r[1], sq[1]));\r\n                }\r\n\r\n\r\n                //strip the multiplier since we already took the sqrt\r\n                symbol = symbol.toUnitMultiplier(true);\r\n                //if the symbol is one just return one and not the sqrt function\r\n                if(symbol.isOne()) {\r\n                    retval = symbol;\r\n                }\r\n                else if(even(symbol.power.toString())) {\r\n                    //just raise it to the 1/2\r\n                    retval = _.pow(symbol.clone(), new Symbol(0.5));\r\n                }\r\n                else {\r\n                    retval = _.symfunction(SQRT, [symbol]);\r\n                }\r\n\r\n                //put back the sign that was removed earlier\r\n                if(sign < 0)\r\n                    retval.power.negate();\r\n\r\n                if(m)\r\n                    retval = _.multiply(m, retval);\r\n\r\n                if(img)\r\n                    retval = _.multiply(img, retval);\r\n            }\r\n\r\n            if(is_negative && Settings.PARSE2NUMBER)\r\n                return _.parse(retval);\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * The cube root function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function cbrt(symbol) {\r\n            if(!symbol.isConstant(true)) {\r\n                var retval;\r\n\r\n                var n = symbol.power / 3;\r\n                //take the cube root of the multplier\r\n                var m = _.pow(_.parse(symbol.multiplier), new Symbol(1 / 3));\r\n                //strip the multiplier\r\n                var sym = symbol.toUnitMultiplier();\r\n\r\n                //simplify the power\r\n                if(isInt(n)) {\r\n                    retval = _.pow(sym.toLinear(), _.parse(n));\r\n                }\r\n                else {\r\n                    if(sym.group === CB) {\r\n                        retval = new Symbol(1);\r\n                        sym.each(function (x) {\r\n                            retval = _.multiply(retval, cbrt(x));\r\n                        });\r\n                    }\r\n                    else {\r\n                        retval = _.symfunction('cbrt', [sym]);\r\n                    }\r\n                }\r\n\r\n                return _.multiply(m, retval);\r\n            }\r\n            return nthroot(symbol, new Symbol(3));\r\n        }\r\n\r\n        function scientific(symbol, sigfigs) {\r\n            //Just set the flag and keep it moving. Symbol.toString will deal with how to\r\n            //display this\r\n            symbol.scientific = sigfigs || 10;\r\n            return symbol;\r\n        }\r\n\r\n        /**\r\n         *\r\n         * @param {Symbol} num - the number being raised\r\n         * @param {Symbol} p - the exponent\r\n         * @param {type} prec - the precision wanted\r\n         * @param {bool} asbig - true if a bigDecimal is wanted\r\n         * @returns {Symbol}\r\n         */\r\n        function nthroot(num, p, prec, asbig) {\r\n            //clone p and convert to a number if possible\r\n            p = evaluate(_.parse(p));\r\n\r\n            //cannot calculate if p = 0. nthroot(0, 0) => 0^(1/0) => undefined\r\n            if(p.equals(0)) {\r\n                throw new UndefinedError('Unable to calculate nthroots of zero');\r\n            }\r\n\r\n            //Stop computation if it negative and even since we have an imaginary result\r\n            if(num < 0 && even(p))\r\n                throw new Error('Cannot calculate nthroot of negative number for even powers');\r\n\r\n            //return non numeric values unevaluated\r\n            if(!num.isConstant(true)) {\r\n                return _.symfunction('nthroot', arguments);\r\n            }\r\n\r\n            //evaluate numeric values\r\n            if(num.group !== N) {\r\n                num = evaluate(num);\r\n            }\r\n\r\n            //default is to return a big value\r\n            if(typeof asbig === 'undefined')\r\n                asbig = true;\r\n\r\n            prec = prec || 25;\r\n\r\n            var sign = num.sign();\r\n            var retval;\r\n            var ans;\r\n\r\n            if(sign < 0) {\r\n                num = abs(num); //remove the sign\r\n            }\r\n\r\n            if(isInt(num) && p.isConstant()) {\r\n\r\n                if(num < 18446744073709551616) {\r\n                    //2^64\r\n                    ans = Frac.create(Math.pow(num, 1 / p));\r\n                }\r\n                else {\r\n                    ans = Math2.nthroot(num, p);\r\n                }\r\n\r\n                var retval;\r\n                if(asbig) {\r\n                    retval = new Symbol(ans);\r\n                }\r\n                retval = new Symbol(ans.toDecimal(prec));\r\n\r\n                return _.multiply(new Symbol(sign), retval);\r\n            }\r\n        }\r\n\r\n        function pfactor(symbol) {\r\n            //Fix issue #458 | nerdamer(\"sqrt(1-(3.3333333550520926e-7)^2)\").evaluate().text()\r\n            //More Big Number issues >:(\r\n            if(symbol.greaterThan(9.999999999998891e+41) || symbol.equals(-1))\r\n                return symbol;\r\n            //Fix issue #298\r\n            if(symbol.equals(Math.PI))\r\n                return new Symbol(Math.PI);\r\n            //evaluate the symbol to merge constants\r\n            symbol = evaluate(symbol.clone());\r\n\r\n            if(symbol.isConstant()) {\r\n                var retval = new Symbol(1);\r\n                var m = symbol.toString();\r\n                if(isInt(m)) {\r\n                    var factors = Math2.ifactor(m);\r\n                    for(var factor in factors) {\r\n                        var p = factors[factor];\r\n                        retval = _.multiply(retval, _.symfunction('parens', [new Symbol(factor).setPower(new Frac(p))]));\r\n                    }\r\n                }\r\n                else {\r\n                    var n = pfactor(new Symbol(symbol.multiplier.num));\r\n                    var d = pfactor(new Symbol(symbol.multiplier.den));\r\n                    retval = _.multiply(_.symfunction('parens', [n]), _.symfunction('parens', [d]).invert());\r\n                }\r\n            }\r\n            else\r\n                retval = _.symfunction('pfactor', arguments);\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Get's the real part of a complex number. Return number if real\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function realpart(symbol) {\r\n            return symbol.realpart();\r\n        }\r\n\r\n        /**\r\n         * Get's the imaginary part of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function imagpart(symbol) {\r\n            return symbol.imagpart();\r\n        }\r\n\r\n        /**\r\n         * Computes the conjugate of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function conjugate(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            return _.add(re, _.multiply(im.negate(), Symbol.imaginary()));\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant())\r\n                return new Symbol(Math.atan2(im, re));\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the arugment of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function arg(symbol) {\r\n            var re = symbol.realpart();\r\n            var im = symbol.imagpart();\r\n            if(re.isConstant() && im.isConstant()) {\r\n                if(im.equals(0) && re.equals(-1)) {\r\n                    return _.parse('pi');\r\n                }\r\n                else if(im.equals(1) && re.equals(0)) {\r\n                    return _.parse('pi/2');\r\n                }\r\n                else if(im.equals(1) && re.equals(1)) {\r\n                    return _.parse('pi/4');\r\n                }\r\n                return new Symbol(Math.atan2(im, re));\r\n            }\r\n            return _.symfunction('atan2', [im, re]);\r\n        }\r\n\r\n        /**\r\n         * Returns the polarform of a complex number\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function polarform(symbol) {\r\n            var p, r, e, theta;\r\n            p = Symbol.toPolarFormArray(symbol);\r\n            theta = p[1];\r\n            r = p[0];\r\n            e = _.parse(format('e^({0}*({1}))', Settings.IMAGINARY, theta));\r\n            return _.multiply(r, e);\r\n        }\r\n\r\n        /**\r\n         * Returns the rectangular form of a complex number. Does not work for symbolic coefficients\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function rectform(symbol) {\r\n            //TODO: e^((i*pi)/4)\r\n            var original = symbol.clone();\r\n            try {\r\n                var f, p, q, s, h, d, n;\r\n                f = decompose_fn(symbol, 'e', true);\r\n                p = _.divide(f.x.power, Symbol.imaginary());\r\n                q = evaluate(trig.tan(p));\r\n                s = _.pow(f.a, new Symbol(2));\r\n                d = q.getDenom(true);\r\n                n = q.getNum();\r\n                h = Symbol.hyp(n, d);\r\n                //check\r\n                if(h.equals(f.a)) {\r\n                    return _.add(d, _.multiply(Symbol.imaginary(), n));\r\n                }\r\n                else {\r\n                    return original;\r\n                }\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n        }\r\n\r\n        function symMinMax(f, args) {\r\n            args.map(function (x) {\r\n                x.numVal = evaluate(x).multiplier;\r\n            });\r\n            var l, a, b, a_val, b_val;\r\n            while(true) {\r\n                l = args.length;\r\n                if(l < 2)\r\n                    return args[0];\r\n                a = args.pop();\r\n                b = args[l - 2];\r\n                if(f === 'min' ? a.numVal < b.numVal : a.numVal > b.numVal) {\r\n                    args.pop();\r\n                    args.push(a);\r\n                }\r\n            }\r\n        }\r\n\r\n        /**\r\n         * Returns maximum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function max() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.max.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('max', args);\r\n            return _.symfunction('max', args);\r\n        }\r\n\r\n        /**\r\n         * Returns minimum of a set of numbers\r\n         * @returns {Symbol}\r\n         */\r\n        function min() {\r\n            var args = [].slice.call(arguments);\r\n            if(allSame(args))\r\n                return args[0];\r\n            if(allNumbers(args))\r\n                return new Symbol(Math.min.apply(null, args));\r\n            if(Settings.SYMBOLIC_MIN_MAX && allConstants(args))\r\n                return symMinMax('min', args);\r\n            return _.symfunction('min', args);\r\n        }\r\n\r\n        /**\r\n         * Returns the sign of a number\r\n         * @param {Symbol} x\r\n         * @returns {Symbol}\r\n         */\r\n        function sign(x) {\r\n            if(x.isConstant(true))\r\n                return new Symbol(Math.sign(evaluate(x)));\r\n            return _.symfunction('sign', arguments);\r\n        }\r\n\r\n        function sort(symbol, opt) {\r\n            opt = opt ? opt.toString() : 'asc';\r\n            var getval = function (e) {\r\n                if(e.group === N)\r\n                    return e.multiplier;\r\n                if(e.group === FN) {\r\n                    if(e.fname === '')\r\n                        return getval(e.args[0]);\r\n                    return e.fname;\r\n                }\r\n                if(e.group === S)\r\n                    return e.power;\r\n\r\n                return e.value;\r\n            };\r\n            var symbols = isVector(symbol) ? symbol.elements : symbol.collectSymbols();\r\n            return new Vector(symbols.sort(function (a, b) {\r\n                var aval = getval(a),\r\n                        bval = getval(b);\r\n                if(opt === 'desc')\r\n                    return bval - aval;\r\n                return aval - bval;\r\n            }));\r\n        }\r\n\r\n        /**\r\n         * The log function\r\n         * @param {Symbol} symbol\r\n         * @param {Symbol} base\r\n         * @returns {Symbol}\r\n         */\r\n        function log(symbol, base) {\r\n\r\n            if(symbol.equals(1)) {\r\n                return new Symbol(0);\r\n            }\r\n\r\n            var retval;\r\n\r\n            if(symbol.fname === SQRT && symbol.multiplier.equals(1)) {\r\n                retval = _.divide(log(symbol.args[0]), new Symbol(2));\r\n\r\n                if(symbol.power.sign() < 0) {\r\n                    retval.negate();\r\n                }\r\n\r\n                // Exit early\r\n                return retval;\r\n            }\r\n\r\n            //log(0) is undefined so complain\r\n            if(symbol.equals(0)) {\r\n                throw new UndefinedError(Settings.LOG + '(0) is undefined!');\r\n            }\r\n\r\n            //deal with imaginary values\r\n            if(symbol.isImaginary()) {\r\n                return complex.evaluate(symbol, Settings.LOG);\r\n            }\r\n\r\n            if(symbol.isConstant() && typeof base !== 'undefined' && base.isConstant()) {\r\n                var log_sym = Math.log(symbol);\r\n                var log_base = Math.log(base);\r\n                retval = new Symbol(log_sym / log_base);\r\n            }\r\n            else if(symbol.group === EX && symbol.power.multiplier.lessThan(0) || symbol.power.toString() === '-1') {\r\n                symbol.power.negate();\r\n                //move the negative outside but keep the positive inside :)\r\n                retval = log(symbol).negate();\r\n            }\r\n            else if(symbol.value === 'e' && symbol.multiplier.equals(1)) {\r\n                var p = symbol.power;\r\n                retval = isSymbol(p) ? p : new Symbol(p);\r\n            }\r\n            else if(symbol.group === FN && symbol.fname === 'exp') {\r\n                var s = symbol.args[0];\r\n                if(symbol.multiplier.equals(1))\r\n                    retval = _.multiply(s, new Symbol(symbol.power));\r\n                else\r\n                    retval = _.symfunction(Settings.LOG, [symbol]);\r\n            }\r\n            else if(Settings.PARSE2NUMBER && isNumericSymbol(symbol)) {\r\n                // Parse for safety.\r\n                symbol = _.parse(symbol);\r\n\r\n                var img_part;\r\n                if(symbol.multiplier.lessThan(0)) {\r\n                    symbol.negate();\r\n                    img_part = _.multiply(new Symbol(Math.PI), new Symbol('i'));\r\n                }\r\n\r\n                retval = new Symbol(Math.log(symbol.multiplier.toDecimal()));\r\n\r\n                if(img_part) {\r\n                    retval = _.add(retval, img_part);\r\n                }\r\n\r\n            }\r\n            else {\r\n                var s;\r\n                if(!symbol.power.equals(1) && !symbol.contains('e')) {\r\n                    s = symbol.group === EX ? symbol.power : new Symbol(symbol.power);\r\n                    symbol.toLinear();\r\n                }\r\n                //log(a,a) = 1 since the base is allowed to be changed.\r\n                //This was pointed out by Happypig375 in issue #280\r\n                if(arguments.length > 1 && allSame(arguments)) {\r\n                    retval = new Symbol(1);\r\n                }\r\n                else {\r\n                    retval = _.symfunction(Settings.LOG, arguments);\r\n                }\r\n\r\n                if(s)\r\n                    retval = _.multiply(s, retval);\r\n            }\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * Round a number up to s decimal places\r\n         * @param {Number} x\r\n         * @param {int} s - the number of decimal places\r\n         * @returns {undefined}\r\n         */\r\n        function round(x, s) {\r\n            var sIsConstant = s && s.isConstant() || typeof s === 'undefined';\r\n            if(x.isConstant() && sIsConstant) {\r\n                var v, e, exp, retval;\r\n                v = x;\r\n                //round the coefficient of then number but not the actual decimal value\r\n                //we know this because a negative number was passed\r\n                if(s && s.lessThan(0)) {\r\n                    s = abs(s);\r\n                    //convert the number to exponential form\r\n                    e = Number(x).toExponential().toString().split('e');\r\n                    //point v to the coefficient of then number\r\n                    v = e[0];\r\n                    //set the expontent\r\n                    exp = e[1];\r\n                }\r\n                //round the number to the requested precision\r\n                retval = new Symbol(nround(v, Number(s || 0)));\r\n                //if there's a exponent then put it back\r\n                return _.multiply(retval, _.pow(new Symbol(10), new Symbol(exp || 0)))\r\n            }\r\n\r\n\r\n            return _.symfunction('round', arguments);\r\n        }\r\n\r\n        /**\r\n         * Gets the quadrant of the trig function\r\n         * @param {Frac} m\r\n         * @returns {Int}\r\n         */\r\n        function getQuadrant(m) {\r\n            var v = m % 2, quadrant;\r\n\r\n            if(v < 0)\r\n                v = 2 + v; //put it in terms of pi\r\n\r\n            if(v >= 0 && v <= 0.5)\r\n                quadrant = 1;\r\n            else if(v > 0.5 && v <= 1)\r\n                quadrant = 2;\r\n            else if(v > 1 && v <= 1.5)\r\n                quadrant = 3;\r\n            else\r\n                quadrant = 4;\r\n            return quadrant;\r\n        }\r\n\r\n        /*\r\n         * Serves as a bridge between numbers and bigNumbers\r\n         * @param {Frac|Number} n\r\n         * @returns {Symbol}\r\n         */\r\n        function bigConvert(n) {\r\n            if(!isFinite(n)) {\r\n                var sign = Math.sign(n);\r\n                var r = new Symbol(String(Math.abs(n)));\r\n                r.multiplier = r.multiplier.multiply(new Frac(sign));\r\n                return r;\r\n            }\r\n            if(isSymbol(n))\r\n                return n;\r\n            if(typeof n === 'number') {\r\n                try {\r\n                    n = Frac.simple(n);\r\n                }\r\n                catch(e) {\r\n                    n = new Frac(n);\r\n                }\r\n            }\r\n\r\n            var symbol = new Symbol(0);\r\n            symbol.multiplier = n;\r\n            return symbol;\r\n        }\r\n        ;\r\n\r\n        function clean(symbol) {\r\n            // handle functions with numeric values\r\n            // handle denominator within denominator\r\n            // handle trig simplifications\r\n            var g = symbol.group, retval;\r\n            //Now let's get to work\r\n            if(g === CP) {\r\n                var num = symbol.getNum(),\r\n                        den = symbol.getDenom() || new Symbol(1),\r\n                        p = Number(symbol.power),\r\n                        factor = new Symbol(1);\r\n                if(Math.abs(p) === 1) {\r\n                    den.each(function (x) {\r\n                        if(x.group === CB) {\r\n                            factor = _.multiply(factor, clean(x.getDenom()));\r\n                        }\r\n                        else if(x.power.lessThan(0)) {\r\n                            factor = _.multiply(factor, clean(x.clone().toUnitMultiplier()));\r\n                        }\r\n                    });\r\n\r\n                    var new_den = new Symbol(0);\r\n                    //now divide out the factor and add to new den\r\n                    den.each(function (x) {\r\n                        new_den = _.add(_.divide(x, factor.clone()), new_den);\r\n                    });\r\n\r\n                    factor.invert(); //invert so it can be added to the top\r\n                    var new_num;\r\n                    if(num.isComposite()) {\r\n                        new_num = new Symbol(0);\r\n                        num.each(function (x) {\r\n                            new_num = _.add(_.multiply(clean(x), factor.clone()), new_num);\r\n                        });\r\n                    }\r\n                    else\r\n                        new_num = _.multiply(factor, num);\r\n\r\n                    retval = _.divide(new_num, new_den);\r\n                }\r\n            }\r\n            else if(g === CB) {\r\n                retval = new Symbol(1);\r\n                symbol.each(function (x) {\r\n                    retval = _.multiply(retval, _.clean(x));\r\n                });\r\n            }\r\n            else if(g === FN) {\r\n                if(symbol.args.length === 1 && symbol.args[0].isConstant())\r\n                    retval = block('PARSE2NUMBER', function () {\r\n                        return _.parse(symbol);\r\n                    }, true);\r\n            }\r\n\r\n            if(!retval)\r\n                retval = symbol;\r\n\r\n            return retval;\r\n        }\r\n\r\n        /**\r\n         * A wrapper for the expand function\r\n         * @param {Symbol} symbol\r\n         * @returns {Symbol}\r\n         */\r\n        function expandall(symbol, opt) {\r\n            opt = opt || {\r\n                expand_denominator: true,\r\n                expand_functions: true\r\n            };\r\n            return expand(symbol, opt);\r\n        }\r\n        /**\r\n         * Expands a symbol\r\n         * @param symbol\r\n         */\r\n        // Old expand\r\n        function expand(symbol, opt) {\r\n            if(Array.isArray(symbol)) {\r\n                return symbol.map(function (x) {\r\n                    return expand(x, opt);\r\n                });\r\n            }\r\n            opt = opt || {};\r\n            //deal with parenthesis\r\n            if(symbol.group === FN && symbol.fname === '') {\r\n                var f = expand(symbol.args[0], opt);\r\n                var x = expand(_.pow(f, _.parse(symbol.power)), opt);\r\n                return _.multiply(_.parse(symbol.multiplier), x).distributeMultiplier();\r\n            }\r\n            // We can expand these groups so no need to waste time. Just return and be done.\r\n            if([N, P, S].indexOf(symbol.group) !== -1) {\r\n                return symbol; //nothing to do\r\n            }\r\n\r\n            var original = symbol.clone();\r\n\r\n            // Set up a try-catch block. If anything goes wrong then we simply return the original symbol\r\n            try {\r\n                // Store the power and multiplier\r\n                var m = symbol.multiplier.toString();\r\n                var p = Number(symbol.power);\r\n                var retval = symbol;\r\n\r\n                // Handle (a+b)^2 | (x+x^2)^2\r\n                if(symbol.isComposite() && isInt(symbol.power) && symbol.power > 0) {\r\n                    var n = p - 1;\r\n                    // Strip the expression of it's multiplier and power. We'll call it f. The power will be p and the multiplier m.\r\n                    var f = new Symbol(0);\r\n\r\n                    symbol.each(function (x) {\r\n                        f = _.add(f, expand(_.parse(x), opt));\r\n                    });\r\n\r\n                    var expanded = _.parse(f);\r\n\r\n                    for(var i = 0; i < n; i++) {\r\n                        expanded = mix(expanded, f, opt);\r\n                    }\r\n\r\n                    retval = _.multiply(_.parse(m), expanded).distributeMultiplier();\r\n                }\r\n                else if(symbol.group === FN && opt.expand_functions === true) {\r\n                    var args = [];\r\n                    // Expand function the arguments\r\n                    symbol.args.forEach(function (x) {\r\n                        args.push(expand(x, opt));\r\n                    });\r\n                    // Put back the power and multiplier\r\n                    retval = _.pow(_.symfunction(symbol.fname, args), _.parse(symbol.power));\r\n                    retval = _.multiply(retval, _.parse(symbol.multiplier));\r\n                }\r\n                else if(symbol.isComposite() && isInt(symbol.power) && symbol.power < 0 && opt.expand_denominator === true) {\r\n                    // Invert it. Expand it and then re-invert it.\r\n                    symbol = symbol.invert();\r\n                    retval = expand(symbol, opt);\r\n                    retval.invert();\r\n                }\r\n                else if(symbol.group === CB) {\r\n                    var rank = function (s) {\r\n                        switch(s.group) {\r\n                            case CP:\r\n                                return 0;\r\n                            case PL:\r\n                                return 1;\r\n                            case CB:\r\n                                return 2;\r\n                            case FN:\r\n                                return 3;\r\n                            default:\r\n                                return 4;\r\n                        }\r\n                    };\r\n                    // Consider (a+b)(c+d). The result will be (a*c+a*d)+(b*c+b*d).\r\n                    // We start by moving collecting the symbols. We want others>FN>CB>PL>CP\r\n                    var symbols = symbol.collectSymbols().sort(function (a, b) {\r\n                        return rank(b) - rank(a);\r\n                    })\r\n                            // Distribute the power to each symbol and expand\r\n                            .map(function (s) {\r\n                                var x = _.pow(s, _.parse(p));\r\n                                var e = expand(x, opt);\r\n                                return e;\r\n                            });\r\n\r\n                    var f = symbols.pop();\r\n\r\n                    // If the first symbols isn't a composite then we're done\r\n                    if(f.isComposite() && f.isLinear()) {\r\n                        symbols.forEach(function (s) {\r\n                            f = mix(f, s, opt);\r\n                        });\r\n\r\n                        // If f is of group PL or CP then we can expand some more\r\n                        if(f.isComposite()) {\r\n                            if(f.power > 1) {\r\n                                f = expand(_.pow(f, _.parse(f.power)), opt);\r\n                            }\r\n                            // Put back the multiplier\r\n                            retval = _.multiply(_.parse(m), f).distributeMultiplier();\r\n                            ;\r\n                        }\r\n                        else {\r\n                            // Everything is expanded at this point so if it's still a CB\r\n                            // then just return the symbol\r\n                            retval = f;\r\n                        }\r\n                    }\r\n                    else {\r\n                        // Just multiply back in the expanded form of each\r\n                        retval = f;\r\n                        symbols.forEach(function (s) {\r\n                            retval = _.multiply(retval, s);\r\n                        });\r\n                        // Put back the multiplier\r\n                        retval = _.multiply(retval, _.parse(m)).distributeMultiplier();\r\n                    }\r\n\r\n                    // TODO: This exists solely as a quick fix for sqrt(11)*sqrt(33) not simplifying.\r\n                    if(retval.group === CB) {\r\n                        retval = _.parse(retval);\r\n                    }\r\n                }\r\n                else {\r\n                    // Otherwise just return the expression\r\n                    retval = symbol;\r\n                }\r\n                // Final cleanup and return\r\n                return retval;\r\n            }\r\n            catch(e) {\r\n                return original;\r\n            }\r\n\r\n            return original;\r\n        }\r\n\r\n        /**\r\n         * Returns an identity matrix of nxn\r\n         * @param {Number} n\r\n         * @returns {Matrix}\r\n         */\r\n        function imatrix(n) {\r\n            return Matrix.identity(n);\r\n        }\r\n\r\n        /**\r\n         * Retrieves and item from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @returns {Vector|Symbol}\r\n         */\r\n        function vecget(vector, index) {\r\n            if(index.isConstant() && isInt(index))\r\n                return vector.elements[index];\r\n            return _.symfunction('vecget', arguments);\r\n        }\r\n\r\n        /**\r\n         * Removes duplicates from a vector\r\n         * @param {Vector} vector\r\n         * @param {Number} tolerance\r\n         * @returns {Vector}\r\n         */\r\n        function vectrim(vector, tolerance) {\r\n            tolerance = typeof tolerance === 'undefined' ? 1e-14 : tolerance;\r\n\r\n            vector = vector.clone();\r\n\r\n            tolerance = Number(tolerance);\r\n            //place algebraic solutions first\r\n            vector.elements.sort(function (a, b) {\r\n                return b.group - a.group;\r\n            });\r\n            //depending on the start point we may have duplicates so we need to clean those up a bit.\r\n            //start by creating an object with the solution and the numeric value. This way we don't destroy algebraic values\r\n            vector.elements = removeDuplicates(vector.elements, function (a, b) {\r\n                var diff = Number(_.subtract(evaluate(a), evaluate(b)).abs());\r\n                return diff <= tolerance;\r\n            });\r\n\r\n            return vector;\r\n        }\r\n\r\n        /**\r\n         * Set a value for a vector at a given index\r\n         * @param {Vector} vector\r\n         * @param {Number} index\r\n         * @param {Symbol} value\r\n         * @returns {Vector}\r\n         */\r\n        function vecset(vector, index, value) {\r\n            if(!index.isConstant)\r\n                return _.symfunction('vecset', arguments);\r\n            vector.elements[index] = value;\r\n            return vector;\r\n        }\r\n\r\n        function matget(matrix, i, j) {\r\n            if(i.isConstant() && j.isConstant())\r\n                return matrix.elements[i][j];\r\n            return _.symfunction('matget', arguments);\r\n        }\r\n\r\n        function matgetrow(matrix, i) {\r\n            if(i.isConstant())\r\n                return new Matrix(matrix.elements[i]);\r\n            return _.symfunction('matgetrow', arguments);\r\n        }\r\n\r\n        function matsetrow(matrix, i, x) {\r\n            //handle symbolics\r\n            if(!i.isConstant())\r\n                return _.symfunction('matsetrow', arguments);\r\n            if(matrix.elements[i].length !== x.elements.length)\r\n                throw new DimensionError('Matrix row must match row dimensions!');\r\n            var M = matrix.clone();\r\n            M.elements[i] = x.clone().elements;\r\n            return M;\r\n        }\r\n\r\n        function matgetcol(matrix, col_index) {\r\n            //handle symbolics\r\n            if(!col_index.isConstant())\r\n                return _.symfunction('matgetcol', arguments);\r\n            col_index = Number(col_index);\r\n            var M = Matrix.fromArray([]);\r\n            matrix.each(function (x, i, j) {\r\n                if(j === col_index) {\r\n                    M.elements.push([x.clone()]);\r\n                }\r\n            });\r\n            return M;\r\n        }\r\n\r\n        function matsetcol(matrix, j, col) {\r\n            //handle symbolics\r\n            if(!j.isConstant())\r\n                return _.symfunction('matsetcol', arguments);\r\n            j = Number(j);\r\n            if(matrix.rows() !== col.elements.length)\r\n                throw new DimensionError('Matrix columns must match number of columns!');\r\n            col.each(function (x, i) {\r\n                matrix.set(i - 1, j, x.elements[0].clone());\r\n            });\r\n            return matrix;\r\n        }\r\n\r\n\r\n        function matset(matrix, i, j, value) {\r\n            matrix.elements[i][j] = value;\r\n            return matrix;\r\n        }\r\n\r\n        //the constructor for vectors\r\n        function vector() {\r\n            return new Vector([].slice.call(arguments));\r\n        }\r\n\r\n        //the constructor for matrices\r\n        function matrix() {\r\n            return Matrix.fromArray(arguments);\r\n        }\r\n\r\n        //the constructor for sets\r\n        function set() {\r\n            return Set.fromArray(arguments);\r\n        }\r\n\r\n        function determinant(symbol) {\r\n            if(isMatrix(symbol)) {\r\n                return symbol.determinant();\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        function size(symbol) {\r\n            var retval;\r\n            if(isMatrix(symbol))\r\n                retval = [new Symbol(symbol.cols()), new Symbol(symbol.rows())];\r\n            else if(isVector(symbol) || isSet(symbol))\r\n                retval = new Symbol(symbol.elements.length);\r\n            else\r\n                err('size expects a matrix or a vector');\r\n            return retval;\r\n        }\r\n\r\n        function dot(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.dot(vec2);\r\n            err('function dot expects 2 vectors');\r\n        }\r\n\r\n        function cross(vec1, vec2) {\r\n            if(isVector(vec1) && isVector(vec2))\r\n                return vec1.cross(vec2);\r\n            err('function cross expects 2 vectors');\r\n        }\r\n\r\n        function transpose(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.transpose();\r\n            err('function transpose expects a matrix');\r\n        }\r\n\r\n        function invert(mat) {\r\n            if(isMatrix(mat))\r\n                return mat.invert();\r\n            err('invert expects a matrix');\r\n        }\r\n\r\n        //basic set functions\r\n        function union(set1, set2) {\r\n            return set1.union(set2);\r\n        }\r\n\r\n        function intersection(set1, set2) {\r\n            return set1.intersection(set2);\r\n        }\r\n\r\n        function contains(set1, e) {\r\n            return set1.contains(e);\r\n        }\r\n\r\n        function difference(set1, set2) {\r\n            return set1.difference(set2);\r\n        }\r\n\r\n        function intersects(set1, set2) {\r\n            return new Symbol(Number(set1.intersects(set2)));\r\n        }\r\n\r\n        function is_subset(set1, set2) {\r\n            return new Symbol(Number(set1.is_subset(set2)));\r\n        }\r\n\r\n        function print() {\r\n            arguments2Array(arguments).map(function (x) {\r\n                console.log(x.toString());\r\n            });\r\n        }\r\n\r\n        function testSQRT(symbol) {\r\n            //wrap the symbol in sqrt. This eliminates one more check down the line.\r\n            if(!isSymbol(symbol.power) && symbol.power.absEquals(0.5)) {\r\n                var sign = symbol.power.sign();\r\n                //don't devide the power directly. Notice the use of toString. This makes it possible\r\n                //to use a bigNumber library in the future\r\n                var retval = sqrt(symbol.group === P ? new Symbol(symbol.value) : symbol.toLinear());\r\n                //place back the sign of the power\r\n                if(sign < 0)\r\n                    retval.invert();\r\n                return retval;\r\n            }\r\n            return symbol;\r\n        }\r\n\r\n        //try to reduce a symbol by pulling its power\r\n        function testPow(symbol) {\r\n            if(symbol.group === P) {\r\n                var v = symbol.value;\r\n\r\n                var fct = primeFactors(v)[0];\r\n\r\n                //safety\r\n                if(!fct) {\r\n                    warn('Unable to compute prime factors. This should not happen. Please review and report.');\r\n                    return symbol;\r\n                }\r\n\r\n                var n = new Frac(Math.log(v) / Math.log(fct)),\r\n                        p = n.multiply(symbol.power);\r\n\r\n                //we don't want a more complex number than before\r\n                if(p.den > symbol.power.den)\r\n                    return symbol;\r\n\r\n                if(isInt(p))\r\n                    symbol = Symbol(Math.pow(fct, p));\r\n                else\r\n                    symbol = new Symbol(fct).setPower(p);\r\n            }\r\n\r\n            return symbol;\r\n        }\r\n\r\n        //Link the functions to the parse so they're available outside of the library.\r\n        //This is strictly for convenience and may be deprecated.\r\n        this.expand = expand;\r\n        this.round = round;\r\n        this.clean = clean;\r\n        this.sqrt = sqrt;\r\n        this.cbrt = cbrt;\r\n        this.abs = abs;\r\n        this.log = log;\r\n        this.rationalize = rationalize;\r\n        this.nthroot = nthroot;\r\n        this.arg = arg;\r\n        this.conjugate = conjugate;\r\n        this.imagpart = imagpart;\r\n        this.realpart = realpart;\r\n\r\n        //TODO:\r\n        //Utilize the function below instead of the linked function\r\n        this.getFunction = function (name) {\r\n            return functions[name][0];\r\n        };\r\n\r\n//Parser.methods ===============================================================\r\n        this.addPreprocessor = function (name, action, order, shift_cells) {\r\n            var names = preprocessors.names;\r\n            var actions = preprocessors.actions;\r\n            if((typeof action !== 'function')) //the person probably forgot to specify a name\r\n                throw new PreprocessorError('Incorrect parameters. Function expected!');\r\n            if(!order) {\r\n                names.push(name);\r\n                actions.push(action);\r\n            }\r\n            else {\r\n                if(shift_cells) {\r\n                    names.splice(order, 0, name);\r\n                    actions.splice(order, 0, action);\r\n                }\r\n                else {\r\n                    names[order] = name;\r\n                    actions[order] = action;\r\n                }\r\n            }\r\n        };\r\n\r\n        this.getPreprocessors = function () {\r\n            var preprocessors = {};\r\n            for(var i = 0, l = preprocessors.names.length; i < l; i++) {\r\n                var name = preprocessors.names[i];\r\n                preprocessors[name] = {\r\n                    order: i,\r\n                    action: preprocessors.actions[i]\r\n                };\r\n            }\r\n            return preprocessors;\r\n        };\r\n\r\n        this.removePreprocessor = function (name, shift_cells) {\r\n            var i = preprocessors.names.indexOf(name);\r\n            if(shift_cells) {\r\n                remove(preprocessors.names, i);\r\n                remove(preprocessors.actions, i);\r\n            }\r\n            else {\r\n                preprocessors.names[i] = undefined;\r\n                preprocessors.actions[i] = undefined;\r\n            }\r\n        };\r\n\r\n        //The loader for functions which are not part of Math2\r\n        this.mapped_function = function () {\r\n            var subs = {},\r\n                    params = this.params;\r\n\r\n            for(var i = 0; i < params.length; i++) {\r\n                subs[params[i]] = String(arguments[i]);\r\n            }\r\n\r\n            return _.parse(this.body, subs);\r\n        };\r\n        /**\r\n         * Adds two symbols\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.add = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with two symbols\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward the adding of symbols with units to the Unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.add(a, b);\r\n                }\r\n                //handle Infinity\r\n                //https://www.encyclopediaofmath.org/index.php/Infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    var aneg = a.multiplier.lessThan(0),\r\n                            bneg = b.multiplier.lessThan(0);\r\n\r\n                    if(a.isInfinity && b.isInfinity && aneg !== bneg) {\r\n                        throw new UndefinedError('(' + a + ')+(' + b + ') is not defined!');\r\n                    }\r\n\r\n                    var inf = Symbol.infinity();\r\n                    if(bneg)\r\n                        inf.negate();\r\n                    return inf;\r\n                }\r\n\r\n                if(a.isComposite() && a.isLinear() && b.isComposite() && b.isLinear()) {\r\n                    a.distributeMultiplier();\r\n                    b.distributeMultiplier();\r\n                    // Fix for issue #606\r\n                    if(b.length > a.length && a.group === b.group) {\r\n                        [a, b] = [b, a];\r\n                    }\r\n                }\r\n                \r\n                //no need to waste time on zeroes\r\n                if(a.multiplier.equals(0))\r\n                    return b;\r\n                if(b.multiplier.equals(0))\r\n                    return a;\r\n\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var result = new Symbol(a.multiplier.add(b.multiplier).toDecimal(Settings.PRECISION));\r\n                    return result;\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        ap = a.power.toString(),\r\n                        bp = b.power.toString();\r\n\r\n                //always keep the greater group on the left.\r\n                if(g1 < g2 || (g1 === g2 && ap > bp && bp > 0)) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                /*note to self: Please don't forget about this dilemma ever again. In this model PL and CB goes crazy\r\n                 * because it doesn't know which one to prioritize. */\r\n                //correction to PL dilemma\r\n                if(g1 === CB && g2 === PL && a.value === b.value) {\r\n                    //swap\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;\r\n                    g1 = a.group;\r\n                    g2 = b.group;\r\n                    ap = a.power.toString();\r\n                    bp = b.power.toString();\r\n                }\r\n\r\n                var powEQ = ap === bp,\r\n                        v1 = a.value,\r\n                        v2 = b.value,\r\n                        aIsComposite = a.isComposite(),\r\n                        bIsComposite = b.isComposite(),\r\n                        h1, h2, result;\r\n\r\n                if(aIsComposite)\r\n                    h1 = text(a, 'hash');\r\n                if(bIsComposite)\r\n                    h2 = text(b, 'hash');\r\n\r\n                if(g1 === CP && g2 === CP && b.isLinear() && !a.isLinear() && h1 !== h2) {\r\n                    return this.add(b, a);\r\n                }\r\n\r\n                //PL & PL should compare hashes and not values e.g. compare x+x^2 with x+x^3 and not x with x\r\n                if(g1 === PL && g2 === PL) {\r\n                    v1 = h1;\r\n                    v2 = h2;\r\n                }\r\n\r\n                var PN = g1 === P && g2 === N,\r\n                        PNEQ = a.value === b.multiplier.toString(),\r\n                        valEQ = (v1 === v2 || h1 === h2 && h1 !== undefined || (PN && PNEQ));\r\n\r\n                //equal values, equal powers\r\n                if(valEQ && powEQ && g1 === g2) {\r\n                    //make sure to convert N to something P can work with\r\n                    if(PN)\r\n                        b = b.convert(P);//CL\r\n\r\n                    //handle PL\r\n                    if(g1 === PL && (g2 === S || g2 === P)) {\r\n                        a.distributeMultiplier();\r\n                        result = a.attach(b);\r\n                    }\r\n                    else {\r\n                        result = a;//CL\r\n                        if(a.multiplier.isOne() && b.multiplier.isOne() && g1 === CP && a.isLinear() && b.isLinear()) {\r\n                            for(var s in b.symbols) {\r\n                                var x = b.symbols[s];\r\n                                result.attach(x);\r\n                            }\r\n                        }\r\n                        else\r\n                            result.multiplier = result.multiplier.add(b.multiplier);\r\n                    }\r\n                }\r\n                //equal values uneven powers\r\n                else if(valEQ && g1 !== PL) {\r\n                    //break the tie for e.g. (x+1)+((x+1)^2+(x+1)^3)\r\n                    if(g1 === CP && g2 === PL) {\r\n                        b.insert(a, 'add');\r\n                        result = b;\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(PL).attach([a, b]);\r\n                        //update the hash\r\n                        result.value = g1 === PL ? h1 : v1;\r\n                    }\r\n                }\r\n                else if(aIsComposite && a.isLinear()) {\r\n                    var canIterate = g1 === g2,\r\n                            bothPL = g1 === PL && g2 === PL;\r\n\r\n                    //we can only iterate group PL if they values match\r\n                    if(bothPL)\r\n                        canIterate = a.value === b.value;\r\n                    //distribute the multiplier over the entire symbol\r\n                    a.distributeMultiplier();\r\n\r\n                    if(b.isComposite() && b.isLinear() && canIterate) {\r\n                        b.distributeMultiplier();\r\n                        //CL\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            a.attach(x);\r\n                        }\r\n                        result = a;\r\n                    }\r\n                    //handle cases like 2*(x+x^2)^2+2*(x+x^2)^3+4*(x+x^2)^2\r\n                    else if(bothPL && a.value !== h2 || g1 === PL && !valEQ) {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n\r\n                    }\r\n                    else {\r\n                        result = a.attach(b);\r\n                    }\r\n                }\r\n                else {\r\n                    if(g1 === FN && a.fname === SQRT && g2 !== EX && b.power.equals(0.5)) {\r\n                        var m = b.multiplier.clone();\r\n                        b = sqrt(b.toUnitMultiplier().toLinear());\r\n                        b.multiplier = m;\r\n                    }\r\n                    //fix for issue #3 and #159\r\n                    if(a.length === 2 && b.length === 2 && even(a.power) && even(b.power)) {\r\n                        result = _.add(expand(a), expand(b));\r\n                    }\r\n                    else {\r\n                        result = Symbol.shell(CP).attach([a, b]);\r\n                        result.updateHash();\r\n                    }\r\n                }\r\n\r\n                if(result.multiplier.equals(0))\r\n                    result = new Symbol(0);\r\n\r\n                //make sure to remove unnecessary wraps\r\n                if(result.length === 1) {\r\n                    var m = result.multiplier;\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(m);\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //keep symbols to the right\r\n                if(bIsSymbol && !aIsSymbol) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var bIsMatrix = isMatrix(b);\r\n\r\n                if(aIsSymbol && bIsMatrix) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.add(a.clone(), e));\r\n                    });\r\n\r\n                    b = M\r\n                }\r\n                else {\r\n                    if(isMatrix(a) && bIsMatrix) {\r\n                        b = a.add(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.add(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.add(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return _.add(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.add(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the - operator. Not the prefix operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.subtract = function (a, b) {\r\n            var aIsSymbol = aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b), t;\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.subtract(a, b);\r\n                }\r\n                return this.add(a, b.negate());\r\n            }\r\n            else {\r\n                if(bIsSymbol && isVector(a)) {\r\n                    b = a.map(function (x) {\r\n                        return _.subtract(x, b.clone());\r\n                    });\r\n                }\r\n                else if(aIsSymbol && isVector(b)) {\r\n                    b = b.map(function (x) {\r\n                        return _.subtract(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVector(a) && isVector(b)) {\r\n                    if(a.dimensions() === b.dimensions())\r\n                        b = a.subtract(b);\r\n                    else\r\n                        _.error('Unable to subtract vectors. Dimensions do not match.');\r\n                }\r\n                else if(isMatrix(a) && isVector(b)) {\r\n                    if(b.elements.length === a.rows()) {\r\n                        var M = new Matrix(), l = a.cols();\r\n                        b.each(function (e, i) {\r\n                            var row = [];\r\n                            for(var j = 0; j < l; j++) {\r\n                                row.push(_.subtract(a.elements[i - 1][j].clone(), e.clone()));\r\n                            }\r\n                            M.elements.push(row);\r\n                        });\r\n                        return M;\r\n                    }\r\n                    else\r\n                        err('Dimensions must match!');\r\n                }\r\n                else if(isVector(a) && isMatrix(b)) {\r\n                    var M = b.clone().negate();\r\n                    return _.add(M, a);\r\n                }\r\n                else if(isMatrix(a) && isMatrix(b)) {\r\n                    b = a.subtract(b);\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(x, b.clone()));\r\n                    });\r\n                    b = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.each(function (x, i, j) {\r\n                        M.set(i, j, _.subtract(a.clone(), x));\r\n                    });\r\n                    b = M;\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the * operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.multiply = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            //we're dealing with function assignment here\r\n            if(aIsSymbol && b instanceof Collection) {\r\n                b.elements.push(a);\r\n                return b;\r\n            }\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //if it has a unit then add it and return it right away.\r\n                if(b.isUnit) {\r\n                    var result = a.clone();\r\n                    a.unit = b;\r\n                    return result;\r\n                }\r\n                \r\n                //if it has units then just forward that problem to the unit module\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.multiply(a, b);\r\n                }\r\n\r\n                //handle Infinty\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.equals(0) || b.equals(0))\r\n                        throw new UndefinedError(a + '*' + b + ' is undefined!');\r\n                    //x/infinity\r\n                    if(b.power.lessThan(0)) {\r\n                        if(!a.isInfinity) {\r\n                            return new Symbol(0);\r\n                        }\r\n                        else {\r\n                            throw new UndefinedError('Infinity/Infinity is not defined!');\r\n                        }\r\n                    }\r\n\r\n                    var sign = a.multiplier.multiply(b.multiplier).sign(),\r\n                            inf = Symbol.infinity();\r\n                    if(a.isConstant() || b.isConstant() || (a.isInfinity && b.isInfinity)) {\r\n                        if(sign < 0)\r\n                            inf.negate();\r\n\r\n                        return inf;\r\n                    }\r\n                }\r\n                //the quickies\r\n                if(a.isConstant() && b.isConstant() && Settings.PARSE2NUMBER) {\r\n                    var t = new bigDec(a.multiplier.toDecimal()).times(new bigDec(b.multiplier.toDecimal())).toFixed();\r\n                    var retval = new Symbol(t);\r\n                    return retval;\r\n                }\r\n\r\n                //don't waste time\r\n                if(a.isOne()) {\r\n                    return b.clone();\r\n                }\r\n                if(b.isOne()) {\r\n                    return a.clone();\r\n                }\r\n\r\n                if(a.multiplier.equals(0) || b.multiplier.equals(0))\r\n                    return new Symbol(0);\r\n\r\n                if(b.group > a.group && !(b.group === CP))\r\n                    return this.multiply(b, a);\r\n                //correction for PL/CB dilemma\r\n                if(a.group === CB && b.group === PL && a.value === b.value) {\r\n                    var t = a;\r\n                    a = b;\r\n                    b = t;//swap\r\n                }\r\n\r\n                var g1 = a.group,\r\n                        g2 = b.group,\r\n                        bnum = b.multiplier.num,\r\n                        bden = b.multiplier.den;\r\n\r\n                if(g1 === FN && a.fname === SQRT && !b.isConstant() && a.args[0].value === b.value && !a.args[0].multiplier.lessThan(0)) {\r\n                    //unwrap sqrt\r\n                    var a_pow = a.power;\r\n                    var a_multiplier = _.parse(a.multiplier);\r\n                    a = _.multiply(a_multiplier, a.args[0].clone());\r\n                    a.setPower(new Frac(0.5).multiply(a_pow));\r\n                    g1 = a.group;\r\n                }\r\n                //simplify n/sqrt(n). Being very specific\r\n                else if(g1 === FN && a.fname === SQRT && a.multiplier.equals(1) && a.power.equals(-1) && b.isConstant() && a.args[0].equals(b)) {\r\n                    a = _.symfunction(SQRT, [b.clone()]);\r\n                    b = new Symbol(1);\r\n                }\r\n                ;\r\n\r\n                var v1 = a.value,\r\n                        v2 = b.value,\r\n                        sign = new Frac(a.sign()),\r\n                        //since P is just a morphed version of N we need to see if they relate\r\n                        ONN = (g1 === P && g2 === N && b.multiplier.equals(a.value)),\r\n                        //don't multiply the multiplier of b since that's equal to the value of a\r\n                        m = ONN ? new Frac(1).multiply(a.multiplier).abs() : a.multiplier.multiply(b.multiplier).abs(),\r\n                        result = a.clone().toUnitMultiplier();\r\n                b = b.clone().toUnitMultiplier(true);\r\n\r\n                //further simplification of sqrt\r\n                if(g1 === FN && g2 === FN) {\r\n                    var u = a.args[0].clone();\r\n                    var v = b.args[0].clone();\r\n                    if(a.fname === SQRT && b.fname === SQRT && a.isLinear() && b.isLinear()) {\r\n\r\n                        var q = _.divide(u, v).invert();\r\n                        if(q.gt(1) && isInt(q)) {\r\n                            //b contains a factor a which can be moved to a\r\n                            result = _.multiply(a.args[0].clone(), sqrt(q.clone()));\r\n                            b = new Symbol(1);\r\n                        }\r\n                    }\r\n                    //simplify factorial but only if\r\n                    //1 - It's division so b will have a negative power\r\n                    //2 - We're not dealing with factorials of numbers\r\n                    else if(a.fname === FACTORIAL && b.fname === FACTORIAL && !u.isConstant() && !v.isConstant() && b.power < 0) {\r\n                        //assume that n = positive\r\n                        var d = _.subtract(u.clone(), v.clone());\r\n\r\n                        //if it's not numeric then we don't know if we can simplify so just return\r\n                        if(d.isConstant()) {\r\n\r\n                            //there will never be a case where d == 0 since this will already have\r\n                            //been handled at the beginning of this function\r\n                            t = new Symbol(1);\r\n                            if(d < 0) {\r\n                                //If d is negative then the numerator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(u.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(u, new Symbol(a.power)), _.pow(t, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                            else {\r\n                                //Otherwise the denominator is larger so expand that\r\n                                for(var i = 0, n = Math.abs(d); i <= n; i++) {\r\n                                    var s = _.add(v.clone(), new Symbol(i));\r\n                                    t = _.multiply(t, s);\r\n                                }\r\n\r\n                                result = _.multiply(_.pow(t, new Symbol(a.power)), _.pow(v, new Symbol(b.power)));\r\n\r\n                                b = new Symbol(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                //if both are PL then their hashes have to match\r\n                if(v1 === v2 && g1 === PL && g1 === g2) {\r\n                    v1 = a.text('hash');\r\n                    v2 = b.text('hash');\r\n                }\r\n\r\n                //same issue with (x^2+1)^x*(x^2+1)\r\n                //EX needs an exception when multiplying because it needs to recognize\r\n                //that (x+x^2)^x has the same hash as (x+x^2). The latter is kept as x\r\n                if(g2 === EX && b.previousGroup === PL && g1 === PL) {\r\n                    v1 = text(a, 'hash', EX);\r\n                }\r\n\r\n                if((v1 === v2 || ONN) && !(g1 === PL && (g2 === S || g2 === P || g2 === FN)) && !(g1 === PL && g2 === CB)) {\r\n                    var p1 = a.power,\r\n                            p2 = b.power,\r\n                            isSymbolP1 = isSymbol(p1),\r\n                            isSymbolP2 = isSymbol(p2),\r\n                            toEX = (isSymbolP1 || isSymbolP2);\r\n                    //TODO: this needs cleaning up\r\n                    if(g1 === PL && g2 !== PL && b.previousGroup !== PL && p1.equals(1)) {\r\n                        result = new Symbol(0);\r\n                        a.each(function (x) {\r\n                            result = _.add(result, _.multiply(x, b.clone()));\r\n                        }, true);\r\n                    }\r\n                    else {\r\n                        //add the powers\r\n                        result.power = toEX ? _.add(\r\n                                !(isSymbol(p1)) ? new Symbol(p1) : p1,\r\n                                !(isSymbol(p2)) ? new Symbol(p2) : p2\r\n                                ) : (g1 === N /*don't add powers for N*/ ? p1 : p1.add(p2));\r\n\r\n                        //eliminate zero power values and convert them to numbers\r\n                        if(result.power.equals(0))\r\n                            result = result.convert(N);\r\n\r\n                        //properly convert to EX\r\n                        if(toEX)\r\n                            result.convert(EX);\r\n\r\n                        //take care of imaginaries\r\n                        if(a.imaginary && b.imaginary) {\r\n                            var isEven = even(result.power % 2);\r\n                            if(isEven) {\r\n                                result = new Symbol(1);\r\n                                m.negate();\r\n                            }\r\n                        }\r\n\r\n                        //cleanup: this causes the LaTeX generator to get confused as to how to render the symbol\r\n                        if(result.group !== EX && result.previousGroup)\r\n                            result.previousGroup = undefined;\r\n                        //the sign for b is floating around. Remember we are assuming that the odd variable will carry\r\n                        //the sign but this isn't true if they're equals symbols\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                }\r\n                else if(g1 === CB && a.isLinear()) {\r\n                    if(g2 === CB)\r\n                        b.distributeExponent();\r\n                    if(g2 === CB && b.isLinear()) {\r\n                        for(var s in b.symbols) {\r\n                            var x = b.symbols[s];\r\n                            result = result.combine(x);\r\n                        }\r\n                        result.multiplier = result.multiplier.multiply(b.multiplier);\r\n                    }\r\n                    else {\r\n                        result.combine(b);\r\n                    }\r\n                }\r\n                else {\r\n                    //the multiplier was already handled so nothing left to do\r\n                    if(g1 !== N) {\r\n                        if(g1 === CB) {\r\n                            result.distributeExponent();\r\n                            result.combine(b);\r\n                        }\r\n                        else if(!b.isOne()) {\r\n                            var bm = b.multiplier.clone();\r\n                            b.toUnitMultiplier();\r\n                            result = Symbol.shell(CB).combine([result, b]);\r\n                            //transfer the multiplier to the outside\r\n                            result.multiplier = result.multiplier.multiply(bm);\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = b.clone().toUnitMultiplier();\r\n                    }\r\n                }\r\n\r\n                if(result.group === P) {\r\n                    var logV = Math.log(result.value),\r\n                            n1 = Math.log(bnum) / logV,\r\n                            n2 = Math.log(bden) / logV,\r\n                            ndiv = m.num / bnum,\r\n                            ddiv = m.den / bden;\r\n                    //we don't want to divide by zero no do we? Strange things happen.\r\n                    if(n1 !== 0 && isInt(n1) && isInt(ndiv)) {\r\n                        result.power = result.power.add(new Frac(n1));\r\n                        m.num /= bnum; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                    if(n2 !== 0 && isInt(n2) && isInt(ddiv)) {\r\n                        result.power = result.power.subtract(new Frac(n2));\r\n                        m.den /= bden; //BigInt? Keep that in mind for the future.\r\n                    }\r\n                }\r\n\r\n                //unpack CB if length is only one\r\n                if(result.length === 1) {\r\n                    var t = result.multiplier;\r\n                    //transfer the multiplier\r\n                    result = firstObject(result.symbols);\r\n                    result.multiplier = result.multiplier.multiply(t);\r\n                }\r\n\r\n                //reduce square root\r\n                var ps = result.power.toString();\r\n                if(even(ps) && result.fname === SQRT) {\r\n                    //grab the sign of the symbol\r\n                    sign = sign * result.sign();\r\n                    var p = result.power;\r\n                    result = result.args[0];\r\n                    result = _.multiply(new Symbol(m), _.pow(result, new Symbol(p.divide(new Frac(2)))));\r\n                    //flip it back to the correct sign\r\n                    if(sign < 0)\r\n                        result.negate()\r\n                }\r\n                else {\r\n                    result.multiplier = result.multiplier.multiply(m).multiply(sign);\r\n                    if(result.group === CP && result.isImaginary())\r\n                        result.distributeMultiplier();\r\n                }\r\n\r\n                //back convert group P to a simpler group N if possible\r\n                if(result.group === P && isInt(result.power.toDecimal()))\r\n                    result = result.convert(N);\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                //****** Matrices & Vector *****//\r\n                if(bIsSymbol && !aIsSymbol) { //keep symbols to the right\r\n                    t = a;\r\n                    a = b;\r\n                    b = t; //swap\r\n                    t = bIsSymbol;\r\n                    bIsSymbol = aIsSymbol;\r\n                    aIsSymbol = t;\r\n                }\r\n\r\n                var isMatrixB = isMatrix(b), isMatrixA = isMatrix(a);\r\n                if(aIsSymbol && isMatrixB) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (e, i, j) {\r\n                        M.set(i, j, _.multiply(a.clone(), e));\r\n                    });\r\n\r\n                    b = M;\r\n                }\r\n                else {\r\n                    if(isMatrixA && isMatrixB) {\r\n                        b = a.multiply(b);\r\n                    }\r\n                    else if(aIsSymbol && isVector(b)) {\r\n                        b.each(function (x, i) {\r\n                            i--;\r\n                            b.elements[i] = _.multiply(a.clone(), b.elements[i]);\r\n                        });\r\n                    }\r\n                    else {\r\n                        if(isVector(a) && isVector(b)) {\r\n                            b.each(function (x, i) {\r\n                                i--;\r\n                                b.elements[i] = _.multiply(a.elements[i], b.elements[i]);\r\n                            });\r\n                        }\r\n                        else if(isVector(a) && isMatrix(b)) {\r\n                            //try to convert a to a matrix\r\n                            return this.multiply(b, a);\r\n                        }\r\n                        else if(isMatrix(a) && isVector(b)) {\r\n                            if(b.elements.length === a.rows()) {\r\n                                var M = new Matrix(), l = a.cols();\r\n                                b.each(function (e, i) {\r\n                                    var row = [];\r\n                                    for(var j = 0; j < l; j++) {\r\n                                        row.push(_.multiply(a.elements[i - 1][j].clone(), e.clone()));\r\n                                    }\r\n                                    M.elements.push(row);\r\n                                });\r\n                                return M;\r\n                            }\r\n                            else\r\n                                err('Dimensions must match!');\r\n                        }\r\n                    }\r\n                }\r\n\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the / operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.divide = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //forward to Unit division\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.divide(a, b);\r\n                }\r\n                var result;\r\n                if(b.equals(0))\r\n                    throw new DivisionByZero('Division by zero not allowed!');\r\n\r\n                if(a.isConstant() && b.isConstant()) {\r\n                    result = a.clone();\r\n                    result.multiplier = result.multiplier.divide(b.multiplier);\r\n                }\r\n                else {\r\n                    b.invert();\r\n                    result = _.multiply(a, b);\r\n                }\r\n                return result;\r\n            }\r\n            else {\r\n                //******* Vectors & Matrices *********//\r\n                var isVectorA = isVector(a), isVectorB = isVector(b);\r\n                if(aIsSymbol && isVectorB) {\r\n                    b = b.map(function (x) {\r\n                        return _.divide(a.clone(), x);\r\n                    });\r\n                }\r\n                else if(isVectorA && bIsSymbol) {\r\n                    b = a.map(function (x) {\r\n                        return _.divide(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isVectorA && isVectorB) {\r\n                    if(a.dimensions() === b.dimensions()) {\r\n                        b = b.map(function (x, i) {\r\n                            return _.divide(a.elements[--i], x);\r\n                        });\r\n                    }\r\n                    else\r\n                        _.error('Cannot divide vectors. Dimensions do not match!');\r\n                }\r\n                else {\r\n                    var isMatrixA = isMatrix(a), isMatrixB = isMatrix(b);\r\n                    if(isMatrixA && bIsSymbol) {\r\n                        var M = new Matrix();\r\n                        a.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(x, b.clone()));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(aIsSymbol && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        b.eachElement(function (x, i, j) {\r\n                            M.set(i, j, _.divide(a.clone(), x));\r\n                        });\r\n                        b = M;\r\n                    }\r\n                    else if(isMatrixA && isMatrixB) {\r\n                        var M = new Matrix();\r\n                        if(a.rows() === b.rows() && a.cols() === b.cols()) {\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i][j]));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Dimensions do not match!');\r\n                        }\r\n                    }\r\n                    else if(isMatrixA && isVectorB) {\r\n                        if(a.cols() === b.dimensions()) {\r\n                            var M = new Matrix();\r\n                            a.eachElement(function (x, i, j) {\r\n                                M.set(i, j, _.divide(x, b.elements[i].clone()));\r\n                            });\r\n                            b = M;\r\n                        }\r\n                        else {\r\n                            _.error('Unable to divide matrix by vector.');\r\n                        }\r\n                    }\r\n                }\r\n                return b;\r\n            }\r\n        };\r\n        /**\r\n         * Gets called when the parser finds the ^ operator. See this.add\r\n         * @param {Symbol} a\r\n         * @param {Symbol} b\r\n         * @returns {Symbol}\r\n         */\r\n        this.pow = function (a, b) {\r\n            var aIsSymbol = isSymbol(a),\r\n                    bIsSymbol = isSymbol(b);\r\n            if(aIsSymbol && bIsSymbol) {\r\n                //it has units then it's the Unit module's problem\r\n                if(a.unit || b.unit) {\r\n                    return _.Unit.pow(a, b);\r\n                }\r\n                \r\n                // Handle abs\r\n                if(a.group === FN && a.fname === ABS && even(b)) {\r\n                    var m = a.multiplier.clone();\r\n                    var raised = _.pow(a.args[0], b);\r\n                    raised.multiplier = m;\r\n                    return raised;\r\n                }\r\n                \r\n                // Handle infinity\r\n                if(a.isInfinity || b.isInfinity) {\r\n                    if(a.isInfinity && b.isInfinity)\r\n                        throw new UndefinedError('(' + a + ')^(' + b + ') is undefined!');\r\n\r\n                    if(a.isConstant() && b.isInfinity) {\r\n                        if(a.equals(0)) {\r\n                            if(b.lessThan(0))\r\n                                throw new UndefinedError('0^Infinity is undefined!');\r\n                            return new Symbol(0);\r\n                        }\r\n                        if(a.equals(1))\r\n                            throw new UndefinedError('1^' + b.toString() + ' is undefined!');\r\n                        //a^-oo\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        //a^oo\r\n                        if(!a.lessThan(0))\r\n                            return Symbol.infinity();\r\n                    }\r\n\r\n                    if(a.isInfinity && b.isConstant()) {\r\n                        if(b.equals(0))\r\n                            throw new UndefinedError(a + '^0 is undefined!');\r\n                        if(b.lessThan(0))\r\n                            return new Symbol(0);\r\n                        return _.multiply(Symbol.infinity(), _.pow(new Symbol(a.sign()), b.clone()));\r\n                    }\r\n                }\r\n\r\n                var aIsZero = a.equals(0);\r\n                var bIsZero = b.equals(0);\r\n                if(aIsZero && bIsZero)\r\n                    throw new UndefinedError('0^0 is undefined!');\r\n\r\n                // Return 0 right away if possible\r\n                if(aIsZero && b.isConstant() && b.multiplier.greaterThan(0))\r\n                    return new Symbol(0);\r\n\r\n                if(bIsZero)\r\n                    return new Symbol(1);\r\n\r\n                var bIsConstant = b.isConstant(),\r\n                        aIsConstant = a.isConstant(),\r\n                        bIsInt = b.isInteger(),\r\n                        m = a.multiplier,\r\n                        result = a.clone();\r\n\r\n                // 0^0, 1/0, etc. Complain.\r\n                if(aIsConstant && bIsConstant && a.equals(0) && b.lessThan(0))\r\n                    throw new UndefinedError('Division by zero is not allowed!');\r\n\r\n                // Compute imaginary numbers right away\r\n                if(Settings.PARSE2NUMBER && aIsConstant && bIsConstant && a.sign() < 0 && evenFraction(b)) {\r\n                    var k, re, im;\r\n                    k = Math.PI * b;\r\n                    re = new Symbol(Math.cos(k));\r\n                    im = _.multiply(Symbol.imaginary(), new Symbol(Math.sin(k)));\r\n                    return _.add(re, im);\r\n                }\r\n\r\n                // Imaginary number under negative nthroot or to the n\r\n                if(Settings.PARSE2NUMBER && a.isImaginary() && bIsConstant && isInt(b) && !b.lessThan(0)) {\r\n                    var re, im, r, theta, nre, nim, phi;\r\n                    re = a.realpart();\r\n                    im = a.imagpart();\r\n                    if(re.isConstant('all') && im.isConstant('all')) {\r\n                        phi = Settings.USE_BIG ? Symbol(bigDec.atan2(i.multiplier.toDecimal(), r.multiplier.toDecimal()).times(b.toString())) : Math.atan2(im, re) * b;\r\n                        theta = new Symbol(phi);\r\n                        r = _.pow(Symbol.hyp(re, im), b);\r\n                        nre = _.multiply(r.clone(), _.trig.cos(theta.clone()));\r\n                        nim = _.multiply(r, _.trig.sin(theta));\r\n                        return _.add(nre, _.multiply(Symbol.imaginary(), nim));\r\n                    }\r\n                }\r\n\r\n                // Take care of the symbolic part\r\n                result.toUnitMultiplier();\r\n                //simpifly sqrt\r\n                if(result.group === FN && result.fname === SQRT && !bIsConstant) {\r\n                    var s = result.args[0];\r\n                    s.multiplyPower(new Symbol(0.5));\r\n                    s.multiplier.multiply(result.multiplier);\r\n                    s.multiplyPower(b);\r\n                    result = s;\r\n                }\r\n                else {\r\n                    var sign = m.sign();\r\n                    //handle cases such as (-a^3)^(1/4)\r\n                    if(evenFraction(b) && sign < 0) {\r\n                        // Swaperoo\r\n                        // First put the sign back on the symbol\r\n                        result.negate();\r\n                        // Wrap it in brackets\r\n                        result = _.symfunction(PARENTHESIS, [result]);\r\n                        // Move the sign back the exterior and let nerdamer handle the rest\r\n                        result.negate();\r\n                    }\r\n\r\n                    result.multiplyPower(b);\r\n                }\r\n\r\n                if(aIsConstant && bIsConstant && Settings.PARSE2NUMBER) {\r\n                    var c;\r\n                    //remove the sign\r\n                    if(sign < 0) {\r\n                        a.negate();\r\n                        if(b.multiplier.den.equals(2))\r\n                            //we know that the numerator has to be odd and therefore it's i\r\n                            c = new Symbol(Settings.IMAGINARY);\r\n                        else if(isInt(b.multiplier)) {\r\n                            if(even(b.multiplier))\r\n                                c = new Symbol(1);\r\n                            else\r\n                                c = new Symbol(-1);\r\n                        }\r\n                        else if(!even(b.multiplier.den)) {\r\n                            c = new Symbol(Math.pow(sign, b.multiplier.num));\r\n                        }\r\n                        else {\r\n                            c = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                        }\r\n                    }\r\n\r\n                    result = new Symbol(Math.pow(a.multiplier.toDecimal(), b.multiplier.toDecimal()));\r\n\r\n                    //result = new Symbol(Math2.bigpow(a.multiplier, b.multiplier));\r\n                    //put the back sign\r\n                    if(c)\r\n                        result = _.multiply(result, c);\r\n                }\r\n                else if(bIsInt && !m.equals(1)) {\r\n                    var abs_b = b.abs();\r\n                    // Provide fall back to JS until big number implementation is improved\r\n                    if(abs_b.gt(Settings.MAX_EXP)) {\r\n                        if(b.sign() < 0)\r\n                            return new Symbol(0);\r\n                        return Symbol.infinity();\r\n                    }\r\n                    else {\r\n                        var p = b.multiplier.toDecimal();\r\n                        var sgn = Math.sign(p);\r\n                        p = Math.abs(p);\r\n                        var multiplier = new Frac(1);\r\n                        multiplier.num = m.num.pow(p);\r\n                        multiplier.den = m.den.pow(p);\r\n                        if(sgn < 0)\r\n                            multiplier.invert();\r\n                        //multiplying is justified since after mulltiplyPower if it was of group P it will now be of group N\r\n                        result.multiplier = result.multiplier.multiply(multiplier);\r\n                    }\r\n                }\r\n                else {\r\n                    var sign = a.sign();\r\n                    if(b.isConstant() && a.isConstant() && !b.multiplier.den.equals(1) && sign < 0) {\r\n                        //we know the sign is negative so if the denominator for b == 2 then it's i\r\n                        if(b.multiplier.den.equals(2)) {\r\n                            var i = new Symbol(Settings.IMAGINARY);\r\n                            a.negate();//remove the sign\r\n                            //if the power is negative then i is negative\r\n                            if(b.lessThan(0)) {\r\n                                i.negate();\r\n                                b.negate();//remove the sign from the power\r\n                            }\r\n                            //pull the power normally and put back the imaginary\r\n                            result = _.multiply(_.pow(a, b), i);\r\n                        }\r\n                        else {\r\n                            var aa = a.clone();\r\n                            aa.multiplier.negate();\r\n                            result = _.pow(_.symfunction(PARENTHESIS, [new Symbol(sign)]), b.clone());\r\n                            var _a = _.pow(new Symbol(aa.multiplier.num), b.clone());\r\n                            var _b = _.pow(new Symbol(aa.multiplier.den), b.clone());\r\n                            var r = _.divide(_a, _b);\r\n                            result = _.multiply(result, r);\r\n                        }\r\n                    }\r\n                    else if(Settings.PARSE2NUMBER && b.isImaginary()) {\r\n                        //4^(i + 2) = e^(- (2 - 4 i) π n + (2 + i) log(4))\r\n\r\n                        var re = b.realpart();\r\n                        var im = b.imagpart();\r\n                        /*\r\n                         if(b.group === CP && false) {\r\n                         var ex = _.pow(a.clone(), re);\r\n                         var xi = _.multiply(_.multiply(ex.clone(), trig.sin(im.clone())), Symbol.imaginary());\r\n                         var xa = _.multiply(trig.cos(im), ex);\r\n                         result = _.add(xi, xa);\r\n                         }\r\n                         else {\r\n                         */\r\n                        var aa = a.clone().toLinear();\r\n                        var a1 = _.pow(aa.clone(), re);\r\n                        var log_a = log(aa.clone());\r\n                        var b1 = trig.cos(_.multiply(im.clone(), log_a));\r\n                        var c1 = _.multiply(trig.sin(_.multiply(im, log(aa))), Symbol.imaginary());\r\n                        result = _.multiply(a1, _.add(b1, c1));\r\n                        result = _.expand(_.parse(result));\r\n                        /*\r\n                         }   \r\n                         */\r\n                    }\r\n                    else {\r\n                        //b is a symbol\r\n                        var neg_num = a.group === N && sign < 0,\r\n                            num = testSQRT(new Symbol(neg_num ? m.num : Math.abs(m.num)).setPower(b.clone())),\r\n                            den = testSQRT(new Symbol(m.den).setPower(b.clone()).invert());\r\n\r\n                        //eliminate imaginary if possible\r\n                        if(a.imaginary) {\r\n                            if(bIsInt) {\r\n                                var s, p, n;\r\n                                s = Math.sign(b);\r\n                                p = abs(b);\r\n                                n = p % 4;\r\n                                result = new Symbol(even(n) ? -1 : Settings.IMAGINARY);\r\n                                if(n === 0 || s < 0 && (n === 1) || s > 0 && (n === 3)) {\r\n                                    result.negate();\r\n                                }\r\n                            }\r\n                            else {\r\n                                //assume i = sqrt(-1) -> (-1)^(1/2)\r\n                                var nr = b.multiplier.multiply(Frac.quick(1, 2)),\r\n                                        //the denominator denotes the power so raise to it. It will turn positive it round\r\n                                        tn = Math.pow(-1, nr.num);\r\n                                result = even(nr.den) ? new Symbol(-1).setPower(nr, true) : new Symbol(tn);\r\n                            }\r\n                        }\r\n                        //ensure that the sign is carried by the symbol and not the multiplier\r\n                        //this enables us to check down the line if the multiplier can indeed be transferred\r\n                        if(sign < 0 && !neg_num)\r\n                            result.negate();\r\n\r\n                        //retain the absolute value\r\n                        if(bIsConstant && a.group !== EX) {\r\n                            var evenr = even(b.multiplier.den),\r\n                                    evenp = even(a.power),\r\n                                    n = result.power.toDecimal(),\r\n                                    evennp = even(n);\r\n                            if(evenr && evenp && !evennp) {\r\n                                if(n === 1)\r\n                                    result = _.symfunction(ABS, [result]);\r\n                                else if(!isInt(n)) {\r\n                                    var p = result.power;\r\n                                    result = _.symfunction(ABS, [result.toLinear()]).setPower(p);\r\n                                }\r\n                                else {\r\n                                    result = _.multiply(_.symfunction(ABS, [result.clone().toLinear()]),\r\n                                            result.clone().setPower(new Frac(n - 1)));\r\n                                }\r\n                                //quick workaround. Revisit\r\n                                if(Settings.POSITIVE_MULTIPLIERS && result.fname === ABS)\r\n                                    result = result.args[0];\r\n                            }\r\n                        }\r\n                        //multiply out sqrt\r\n                        if(b.equals(2) && result.group === CB) {\r\n                            var _result = new Symbol(1);\r\n                            result.each(function (sym) {\r\n                                _result = _.multiply(_result, _.pow(sym, b));\r\n                            });\r\n                            result = _result;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                result = testSQRT(result);\r\n\r\n                // Don't multiply until we've tested the remaining symbol\r\n                if(num && den) {\r\n                    result = _.multiply(result, testPow(_.multiply(num, den)));\r\n                }\r\n\r\n                // Reduce square root\r\n                if(result.fname === SQRT) {\r\n                    var isEX = result.group === EX;\r\n                    var t = isEX ? result.power.multiplier.toString() : result.power.toString();\r\n                    if(even(t)) {\r\n                        var pt = isEX ? _.divide(result.power, new Symbol(2)) : new Symbol(result.power.divide(new Frac(2))),\r\n                                m = result.multiplier;\r\n                        result = _.pow(result.args[0], pt);\r\n                        result.multiplier = result.multiplier.multiply(m);\r\n                    }\r\n                }\r\n                // Detect Euler's identity\r\n                else if(!Settings.IGNORE_E && result.isE() && result.group === EX && result.power.contains('pi')\r\n                        && result.power.contains(Settings.IMAGINARY) && b.group === CB) {\r\n                    var theta = b.stripVar(Settings.IMAGINARY);\r\n                    result = _.add(trig.cos(theta), _.multiply(Symbol.imaginary(), trig.sin(theta)));\r\n                }\r\n\r\n                return result;\r\n            }\r\n            else {\r\n                if(isVector(a) && bIsSymbol) {\r\n                    a = a.map(function (x) {\r\n                        return _.pow(x, b.clone());\r\n                    });\r\n                }\r\n                else if(isMatrix(a) && bIsSymbol) {\r\n                    var M = new Matrix();\r\n                    a.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(x, b.clone()));\r\n                    });\r\n                    a = M;\r\n                }\r\n                else if(aIsSymbol && isMatrix(b)) {\r\n                    var M = new Matrix();\r\n                    b.eachElement(function (x, i, j) {\r\n                        M.set(i, j, _.pow(a.clone(), x));\r\n                    });\r\n                    a = M;\r\n                }\r\n                return a;\r\n            }\r\n        };\r\n        // Gets called when the parser finds the , operator.\r\n        // Commas return a Collector object which is roughly an array\r\n        this.comma = function (a, b) {\r\n            if(!(a instanceof Collection))\r\n                a = Collection.create(a);\r\n            a.append(b);\r\n            return a;\r\n        };\r\n        // Link to modulus\r\n        this.mod = function (a, b) {\r\n            return mod(a, b);\r\n        };\r\n        // Used to slice elements from arrays\r\n        this.slice = function (a, b) {\r\n            return new Slice(a, b);\r\n        };\r\n        // The equality setter\r\n        this.equals = function (a, b) {\r\n            // Equality can only be set for group S so complain it's not\r\n            if(a.group !== S && !a.isLinear())\r\n                err('Cannot set equality for ' + a.toString());\r\n            VARS[a.value] = b.clone();\r\n            return b;\r\n        };\r\n        // Percent\r\n        this.percent = function (a) {\r\n            return _.divide(a, new Symbol(100));\r\n        };\r\n        // Set variable\r\n        this.assign = function (a, b) {\r\n            if(a instanceof Collection && b instanceof Collection) {\r\n                a.elements.map(function (x, i) {\r\n                    return _.assign(x, b.elements[i]);\r\n                });\r\n                return Vector.fromArray(b.elements);\r\n            }\r\n            if(a.parent) {\r\n                // It's referring to the parent instead. The current item can be discarded\r\n                var e = a.parent;\r\n                e.elements[e.getter] = b;\r\n                delete e.getter;\r\n                return e;\r\n            }\r\n\r\n            if(a.group !== S)\r\n                throw new NerdamerValueError('Cannot complete operation. Incorrect LH value for ' + a);\r\n            VARS[a.value] = b;\r\n            return b;\r\n        };\r\n        this.function_assign = function (a, b) {\r\n            var f = a.elements.pop();\r\n            return setFunction(f, a.elements, b);\r\n        };\r\n        // Function to quickly convert bools to Symbols\r\n        var bool2Symbol = function (x) {\r\n            return new Symbol(x === true ? 1 : 0);\r\n        };\r\n        //check for equality\r\n        this.eq = function (a, b) {\r\n            return bool2Symbol(a.equals(b));\r\n        };\r\n        //checks for greater than\r\n        this.gt = function (a, b) {\r\n            return bool2Symbol(a.gt(b));\r\n        };\r\n        //checks for greater than equal\r\n        this.gte = function (a, b) {\r\n            return bool2Symbol(a.gte(b));\r\n        };\r\n        //checks for less than\r\n        this.lt = function (a, b) {\r\n            return bool2Symbol(a.lt(b));\r\n        };\r\n        //checks for less than equal\r\n        this.lte = function (a, b) {\r\n            return bool2Symbol(a.lte(b));\r\n        };\r\n        // wraps the factorial\r\n        this.factorial = function (a) {\r\n            return this.symfunction(FACTORIAL, [a]);\r\n        };\r\n        // wraps the double factorial\r\n        this.dfactorial = function (a) {\r\n            return this.symfunction(DOUBLEFACTORIAL, [a]);\r\n        };\r\n    }\r\n    ;\r\n\r\n    /* \"STATIC\" */\r\n    // converts a number to a fraction.\r\n    var Fraction = {\r\n        /**\r\n         * Converts a decimal to a fraction\r\n         * @param {number} value\r\n         * @param {object} opts\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        convert: function (value, opts) {\r\n            var frac;\r\n            if(value === 0) {\r\n                frac = [0, 1];\r\n            }\r\n            else {\r\n                if(value < 1e-6 || value > 1e20) {\r\n                    var qc = this.quickConversion(Number(value));\r\n                    if(qc[1] <= 1e20) {\r\n                        var abs = Math.abs(value);\r\n                        var sign = value / abs;\r\n                        frac = this.fullConversion(abs.toFixed((qc[1] + '').length - 1));\r\n                        frac[0] = frac[0] * sign;\r\n                    }\r\n                    else {\r\n                        frac = qc;\r\n                    }\r\n                }\r\n                else {\r\n                    frac = this.fullConversion(value);\r\n                }\r\n            }\r\n            return frac;\r\n        },\r\n        /**\r\n         * If the fraction is too small or too large this gets called instead of fullConversion method\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        quickConversion: function (value) {\r\n            var stripSign = function (s) {\r\n                // Explicitely convert to a string\r\n                if(typeof s !== 'string') {\r\n                    s = s.toString();\r\n                }\r\n\r\n                var sign = '';\r\n\r\n                // Remove and store the sign\r\n                var start = s.charAt(0);\r\n                if(start === '-') {\r\n                    s = s.substr(1, s.length);\r\n                    sign = '-';\r\n                }\r\n                else if(start === '+') {\r\n                    // Just remove the plus sign\r\n                    s = s.substr(1, s.length);\r\n                }\r\n\r\n                return {\r\n                    sign: sign,\r\n                    value: s\r\n                };\r\n            };\r\n\r\n\r\n            function convert(value) {\r\n                // Explicitely convert to a decimal\r\n                if(Scientific.isScientific(value)) {\r\n                    value = scientificToDecimal(value);\r\n                }\r\n\r\n                // Split the value into the sign and the value\r\n                var nparts = stripSign(value);\r\n\r\n                // Split it at the decimal. We'll refer to it as the coeffient parts\r\n                var cparts = nparts.value.split('.');\r\n\r\n                // Combine the entire number by removing leading zero and adding the decimal part\r\n                // This would be teh same as moving the decimal point to the end\r\n                var num;\r\n                // We're dealing with integers\r\n                if(cparts.length === 1) {\r\n                    num = cparts[0];\r\n                }\r\n                else {\r\n                    num = cparts[0] + cparts[1];\r\n                }\r\n                var n = cparts[1] ? cparts[1].length : 0;\r\n                // Generate the padding for the zeros\r\n                var den = `1${'0'.repeat(n)}`;\r\n\r\n                if(num !== '0') {\r\n                    num = num.replace(/^0+/, '');\r\n                }\r\n                return [nparts.sign + num, den];\r\n            }\r\n\r\n            return convert(value);\r\n        },\r\n        /**\r\n         * Returns a good approximation of a fraction. This method gets called by convert\r\n         * http://mathforum.org/library/drmath/view/61772.html\r\n         * Decimal To Fraction Conversion - A Simpler Version\r\n         * Dr Peterson\r\n         * @param {number} dec\r\n         * @returns {Array} - an array containing the denominator and the numerator\r\n         */\r\n        fullConversion: function (dec) {\r\n            var done = false;\r\n            // you can adjust the epsilon to a larger number if you don't need very high precision\r\n            var n1 = 0, d1 = 1, n2 = 1, d2 = 0, n = 0, q = dec, epsilon = 1e-16;\r\n            while(!done) {\r\n                n++;\r\n                if(n > 10000) {\r\n                    done = true;\r\n                }\r\n                var a = Math.floor(q);\r\n                var num = n1 + a * n2;\r\n                var den = d1 + a * d2;\r\n                var e = (q - a);\r\n                if(e < epsilon) {\r\n                    done = true;\r\n                }\r\n                q = 1 / e;\r\n                n1 = n2;\r\n                d1 = d2;\r\n                n2 = num;\r\n                d2 = den;\r\n                if(Math.abs(num / den - dec) < epsilon || n > 30) {\r\n                    done = true;\r\n                }\r\n            }\r\n            return [num, den];\r\n        }\r\n    };\r\n    //Depends on Fraction\r\n\r\n    //The latex generator\r\n    var LaTeX = {\r\n        parser: (function () {\r\n            // create a parser and strip it from everything except the items that you need\r\n            var keep = ['classes', 'setOperator', 'getOperators', 'getBrackets', 'tokenize', 'toRPN', 'tree', 'units'];\r\n            var parser = new Parser();\r\n            for(var x in parser) {\r\n                if(keep.indexOf(x) === -1)\r\n                    delete parser[x];\r\n            }\r\n            // declare the operators\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\',\r\n                action: 'slash',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            parser.setOperator({\r\n                precedence: 8,\r\n                operator: '\\\\,',\r\n                action: 'slash_comma',\r\n                prefix: true,\r\n                postfix: false,\r\n                leftAssoc: true,\r\n                operation: function (e) {\r\n                    return e; // bypass the slash\r\n                }\r\n            });\r\n            // have braces not map to anything. We want them to be return as-is\r\n            var brackets = parser.getBrackets();\r\n            brackets['{'].maps_to = undefined;\r\n            return parser;\r\n        })(),\r\n        space: '~',\r\n        dot: ' \\\\cdot ',\r\n        // grab a list of supported functions but remove the excluded ones found in exclFN\r\n\r\n        latex: function (symbol, option) {\r\n            // it might be an array\r\n            if(symbol.clone) {\r\n                symbol = symbol.clone(); // leave original as-is\r\n            }\r\n            if(symbol instanceof _.classes.Collection)\r\n                symbol = symbol.elements;\r\n\r\n            if(isArray(symbol)) {\r\n                var LaTeXArray = [];\r\n                for(var i = 0; i < symbol.length; i++) {\r\n                    var sym = symbol[i];\r\n                    //This way I can generate LaTeX on an array of strings.\r\n                    if(!isSymbol(sym))\r\n                        sym = _.parse(sym);\r\n                    LaTeXArray.push(this.latex(sym, option));\r\n                }\r\n                return this.brackets(LaTeXArray.join(', '), 'square');\r\n            }\r\n\r\n            else if(isMatrix(symbol)) {\r\n                var TeX = '\\\\begin{pmatrix}\\n';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    var rowTeX = [],\r\n                            e = symbol.elements[i];\r\n                    for(var j = 0; j < e.length; j++) {\r\n                        rowTeX.push(this.latex(e[j], option));\r\n                    }\r\n                    TeX += rowTeX.join(' & ');\r\n                    if(i < symbol.elements.length - 1) {\r\n                        TeX += '\\\\\\\\\\n';\r\n                    }\r\n                }\r\n                TeX += '\\\\end{pmatrix}';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isVector(symbol)) {\r\n                var TeX = '\\\\left[';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\right]';\r\n                return TeX;\r\n            }\r\n\r\n            else if(isSet(symbol)) {\r\n                var TeX = '\\\\{';\r\n                for(var i = 0; i < symbol.elements.length; i++) {\r\n                    TeX += this.latex(symbol.elements[i], option) + ' ' + (i !== symbol.elements.length - 1 ? ',\\\\,' : '');\r\n                }\r\n                TeX += '\\\\}';\r\n                return TeX;\r\n            }\r\n\r\n            symbol = symbol.clone();\r\n\r\n            var decimal = (option === 'decimal' || option === 'decimals'),\r\n                    power = symbol.power,\r\n                    invert = isNegative(power),\r\n                    negative = symbol.multiplier.lessThan(0);\r\n\r\n            if(symbol.group === P && decimal) {\r\n                return String(symbol.multiplier.toDecimal() * Math.pow(symbol.value, symbol.power.toDecimal()));\r\n            }\r\n            else {\r\n                symbol.multiplier = symbol.multiplier.abs();\r\n\r\n                // if the user wants the result in decimal format then return it as such by placing it at the top part\r\n                var m_array;\r\n\r\n                if(decimal) {\r\n                    var m = String(symbol.multiplier.toDecimal());\r\n                    // if(String(m) === '1' && !decimal) m = '';\r\n                    m_array = [m, ''];\r\n                }\r\n                else {\r\n                    m_array = [symbol.multiplier.num, symbol.multiplier.den];\r\n                }\r\n                // get the value as a two part array\r\n                var v_array = this.value(symbol, invert, option, negative),\r\n                        p;\r\n                // make it all positive since we know whether to push the power to the numerator or denominator already.\r\n                if(invert)\r\n                    power.negate();\r\n                // the power is simple since it requires no additional formatting. We can get it to a\r\n                // string right away. pass in true to neglect unit powers\r\n                if(decimal) {\r\n                    p = isSymbol(power) ? LaTeX.latex(power, option) : String(power.toDecimal());\r\n                    if(String(p) === '1')\r\n                        p = '';\r\n                }\r\n                // get the latex representation\r\n                else if(isSymbol(power))\r\n                    p = this.latex(power, option);\r\n                // get it as a fraction\r\n                else\r\n                    p = this.formatFrac(power, true);\r\n                // use this array to specify if the power is getting attached to the top or the bottom\r\n                var p_array = ['', ''],\r\n                        // stick it to the top or the bottom. If it's negative then the power gets placed on the bottom\r\n                        index = invert ? 1 : 0;\r\n                p_array[index] = p;\r\n\r\n                // special case group P and decimal\r\n                var retval = (negative ? '-' : '') + this.set(m_array, v_array, p_array, symbol.group === CB);\r\n\r\n                return retval.replace(/\\+\\-/gi, '-');\r\n            }\r\n\r\n        },\r\n        // greek mapping\r\n        greek: {\r\n            alpha: '\\\\alpha',\r\n            beta: '\\\\beta',\r\n            gamma: '\\\\gamma',\r\n            delta: '\\\\delta',\r\n            epsilon: '\\\\epsilon',\r\n            zeta: '\\\\zeta',\r\n            eta: '\\\\eta',\r\n            theta: '\\\\theta',\r\n            iota: '\\\\iota',\r\n            kappa: '\\\\kappa',\r\n            lambda: '\\\\lambda',\r\n            mu: '\\\\mu',\r\n            nu: '\\\\nu',\r\n            xi: '\\\\xi',\r\n            omnikron: '\\\\omnikron',\r\n            pi: '\\\\pi',\r\n            rho: '\\\\rho',\r\n            sigma: '\\\\sigma',\r\n            tau: '\\\\tau',\r\n            upsilon: '\\\\upsilon',\r\n            phi: '\\\\phi',\r\n            chi: '\\\\chi',\r\n            psi: '\\\\psi',\r\n            omega: '\\\\omega',\r\n            Gamma: '\\\\Gamma',\r\n            Delta: '\\\\Delta',\r\n            Epsilon: '\\\\Epsilon',\r\n            Theta: '\\\\Theta',\r\n            Lambda: '\\\\Lambda',\r\n            Xi: '\\\\Xi',\r\n            Pi: '\\\\Pi',\r\n            Sigma: '\\\\Sigma',\r\n            Phi: '\\\\Phi',\r\n            Psi: '\\\\Psi',\r\n            Omega: '\\\\Omega'\r\n        },\r\n        symbols: {\r\n            arccos: '\\\\arccos',\r\n            cos: '\\\\cos',\r\n            csc: '\\\\csc',\r\n            exp: '\\\\exp',\r\n            ker: '\\\\ker',\r\n            limsup: '\\\\limsup',\r\n            min: '\\\\min',\r\n            sinh: '\\\\sinh',\r\n            arcsin: '\\\\arcsin',\r\n            cosh: '\\\\cosh',\r\n            deg: '\\\\deg',\r\n            gcd: '\\\\gcd',\r\n            lg: '\\\\lg',\r\n            ln: '\\\\ln',\r\n            Pr: '\\\\Pr',\r\n            sqrt: '\\\\sqrt',\r\n            sup: '\\\\sup',\r\n            arctan: '\\\\arctan',\r\n            cot: '\\\\cot',\r\n            det: '\\\\det',\r\n            hom: '\\\\hom',\r\n            lim: '\\\\lim',\r\n            log: '\\\\log',\r\n            LN: '\\\\LN',\r\n            sec: '\\\\sec',\r\n            tan: '\\\\tan',\r\n            arg: '\\\\arg',\r\n            coth: '\\\\coth',\r\n            dim: '\\\\dim',\r\n            inf: '\\\\inf',\r\n            liminf: '\\\\liminf',\r\n            max: '\\\\max',\r\n            sin: '\\\\sin',\r\n            tanh: '\\\\tanh'\r\n        },\r\n        // get the raw value of the symbol as an array\r\n        value: function (symbol, inverted, option, negative) {\r\n            var group = symbol.group,\r\n                    previousGroup = symbol.previousGroup,\r\n                    v = ['', ''],\r\n                    index = inverted ? 1 : 0;\r\n            /*if(group === N) // do nothing since we want to return top & bottom blank; */\r\n            if(symbol.isInfinity) {\r\n                v[index] = '\\\\infty';\r\n            }\r\n            else if(group === S || group === P || previousGroup === S || previousGroup === P || previousGroup === N) {\r\n                var value = this.formatSubscripts(symbol.value);\r\n                if(value.replace)\r\n                    value = value.replace(/(.+)_$/, '$1\\\\_');\r\n                // split it so we can check for instances of alpha as well as alpha_b\r\n                var t_varray = String(value).split('_');\r\n                var greek = this.greek[t_varray[0]];\r\n                if(greek) {\r\n                    t_varray[0] = greek;\r\n                    value = t_varray.join('_');\r\n                }\r\n                var symbol = this.symbols[t_varray[0]];\r\n                if(symbol) {\r\n                    t_varray[0] = symbol;\r\n                    value = t_varray.join('_');\r\n                }\r\n                v[index] = value;\r\n            }\r\n            else if(group === FN || previousGroup === FN) {\r\n                var name,\r\n                        input = [],\r\n                        fname = symbol.fname;\r\n                // collect the arguments\r\n                for(var i = 0; i < symbol.args.length; i++) {\r\n                    var arg = symbol.args[i], item;\r\n                    if(typeof arg === 'string')\r\n                        item = arg;\r\n                    else {\r\n                        item = this.latex(arg, option);\r\n                    }\r\n                    input.push(item);\r\n                }\r\n\r\n                if(fname === SQRT) {\r\n                    v[index] = '\\\\sqrt' + this.braces(input.join(','));\r\n                }\r\n                else if(fname === ABS) {\r\n                    v[index] = this.brackets(input.join(','), 'abs');\r\n                }\r\n                else if(fname === PARENTHESIS) {\r\n                    v[index] = this.brackets(input.join(','), 'parens');\r\n                }\r\n                else if(fname === 'limit') {\r\n                    v[index] = ' \\\\lim\\\\limits_{' + input[1] + ' \\\\to ' + input[2] + '} ' + input[0];\r\n                }\r\n                else if(fname === 'integrate') {\r\n                    v[index] = '\\\\int' + this.braces(input[0]) + this.braces('d' + input[1]);\r\n                }\r\n                else if(fname === 'defint') {\r\n                    v[index] = '\\\\int\\\\limits_' + this.braces(input[1]) + '^' + this.braces(input[2]) + ' ' + input[0] + ' d' + input[3];\r\n                }\r\n                else if(fname === FACTORIAL || fname === DOUBLEFACTORIAL) {\r\n                    var arg = symbol.args[0];\r\n                    if(arg.power.equals(1) && (arg.isComposite() || arg.isCombination())) {\r\n                        input[0] = this.brackets(input[0]);\r\n                    }\r\n                    v[index] = input[0] + (fname === FACTORIAL ? '!' : '!!');\r\n                }\r\n                else if(fname === 'floor') {\r\n                    v[index] = '\\\\left \\\\lfloor' + this.braces(input[0]) + '\\\\right \\\\rfloor';\r\n                }\r\n                else if(fname === 'ceil') {\r\n                    v[index] = '\\\\left \\\\lceil' + this.braces(input[0]) + '\\\\right \\\\rceil';\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG && input.length > 1) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(input[1]) + this.brackets(input[0]);\r\n                }\r\n                // capture log(a, b)\r\n                else if(fname === Settings.LOG10) {\r\n                    v[index] = '\\\\mathrm' + this.braces(Settings.LOG) + '_' + this.braces(10) + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'sum') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\sum\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'product') {\r\n                    var a = input[0],\r\n                            b = input[1],\r\n                            c = input[2],\r\n                            d = input[3];\r\n                    v[index] = '\\\\prod\\\\limits_{' + this.braces(b) + '=' + this.braces(c) + '}^' + this.braces(d) + ' ' + this.braces(a) + '';\r\n                }\r\n                else if(fname === 'nthroot') {\r\n                    v[index] = '\\\\sqrt[' + input[1] + ']' + this.braces(input[0]);\r\n                }\r\n                else if(fname === 'mod') {\r\n                    v[index] = input[0] + ' \\\\bmod ' + input[1];\r\n                }\r\n                else if(fname === 'realpart') {\r\n                    v[index] = '\\\\operatorname{Re}' + this.brackets(input[0]);\r\n                }\r\n                else if(fname === 'imagpart') {\r\n                    v[index] = '\\\\operatorname{Im}' + this.brackets(input[0]);\r\n                }\r\n                else {\r\n                    var name = fname !== '' ? '\\\\mathrm' + this.braces(fname.replace(/_/g, '\\\\_')) : '';\r\n                    if(symbol.isConversion)\r\n                        v[index] = name + this.brackets(input.join(''), 'parens');\r\n                    else\r\n                        v[index] = name + this.brackets(input.join(','), 'parens');\r\n                }\r\n            }\r\n            else if(symbol.isComposite()) {\r\n                var collected = symbol.collectSymbols().sort(\r\n                        group === CP || previousGroup === CP ?\r\n                        function (a, b) {\r\n                            return b.group - a.group;\r\n                        } :\r\n                        function (a, b) {\r\n                            var x = isSymbol(a.power) ? -1 : a.power;\r\n                            var y = isSymbol(b.power) ? -1 : b.power;\r\n                            return y - x;\r\n                        }\r\n                ),\r\n                        symbols = [],\r\n                        l = collected.length;\r\n                for(var i = 0; i < l; i++) {\r\n                    symbols.push(LaTeX.latex(collected[i], option));\r\n                }\r\n                var value = symbols.join('+');\r\n\r\n                v[index] = !(symbol.isLinear() && symbol.multiplier.equals(1)) || negative ? this.brackets(value, 'parens') : value;\r\n            }\r\n            else if(group === CB || previousGroup === EX || previousGroup === CB) {\r\n                if(group === CB)\r\n                    symbol.distributeExponent();\r\n                // This almost feels a little like cheating but I need to know if I should be wrapping the symbol\r\n                // in brackets or not. We'll do this by checking the value of the numerator and then comparing it\r\n                // to whether the symbol value is \"simple\" or not.\r\n                var denominator = [],\r\n                        numerator = [];\r\n                // Generate a profile\r\n                var den_map = [], num_map = [], num_c = 0, den_c = 0;\r\n                var setBrackets = function (container, map, counter) {\r\n                    if(counter > 1 && map.length > 0) {\r\n                        var l = map.length;\r\n                        for(var i = 0; i < l; i++) {\r\n                            var idx = map[i], item = container[idx];\r\n                            if(!(/^\\\\left\\(.+\\\\right\\)\\^\\{.+\\}$/g.test(item) || /^\\\\left\\(.+\\\\right\\)$/g.test(item))) {\r\n                                container[idx] = LaTeX.brackets(item, 'parens');\r\n                            }\r\n                        }\r\n                    }\r\n                    return container;\r\n                };\r\n\r\n                // Generate latex for each of them\r\n                symbol.each(function (x) {\r\n                    var isDenom = isNegative(x.power),\r\n                            laTex;\r\n\r\n                    if(isDenom) {\r\n                        laTex = LaTeX.latex(x.invert(), option);\r\n                        den_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.den != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            den_map.push(denominator.length); // make a note of where the composite was found\r\n                        }\r\n\r\n                        denominator.push(laTex);\r\n                    }\r\n                    else {\r\n                        laTex = LaTeX.latex(x, option);\r\n                        num_c++;\r\n                        if(x.isComposite()) {\r\n                            if(symbol.multiplier.num != 1 && Math.abs(x.power) == 1)\r\n                                laTex = LaTeX.brackets(laTex, 'parens');\r\n                            num_map.push(numerator.length);   // make a note of where the composite was found\r\n                        }\r\n                        numerator.push(laTex);\r\n                    }\r\n                });\r\n\r\n                // Apply brackets\r\n                setBrackets(numerator, num_map, num_c);\r\n                v[0] = numerator.join(this.dot); // collapse the numerator into one string\r\n\r\n                setBrackets(denominator, den_map, den_c);\r\n                v[1] = denominator.join(this.dot);\r\n            }\r\n\r\n            return v;\r\n        },\r\n        set: function (m, v, p, combine_power) {\r\n            var isBracketed = function (v) {\r\n                return /^\\\\left\\(.+\\\\right\\)$/.test(v);\r\n            };\r\n            // format the power if it exists\r\n            if(p)\r\n                p = this.formatP(p);\r\n            // group CB will have to be wrapped since the power applies to both it's numerator and denominator\r\n            if(combine_power) {\r\n                // POSSIBLE BUG: If powers for group CB format wrong, investigate this since I might have overlooked something\r\n                // the assumption is that in every case the denonimator should be empty when dealing with CB. I can't think\r\n                // of a case where this isn't true\r\n                var tp = p[0];\r\n                p[0] = ''; // temporarily make p blank\r\n            }\r\n\r\n            // merge v and p. Not that v MUST be first since the order matters\r\n            v = this.merge(v, p);\r\n            var mn = m[0], md = m[1], vn = v[0], vd = v[1];\r\n            // filters\r\n            // if the top has a variable but the numerator is one drop it\r\n            if(vn && Number(mn) === 1)\r\n                mn = '';\r\n            // if denominator is 1 drop it always\r\n            if(Number(md) === 1)\r\n                md = '';\r\n            // prepare the top portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var top = this.join(mn, vn, !isBracketed(vn) ? this.dot : '');\r\n\r\n            // prepare the bottom portion but check that it's not already bracketed. If it is then leave out the cdot\r\n            var bottom = this.join(md, vd, !isBracketed(vd) ? this.dot : '');\r\n            // format the power if it exists\r\n            // make it a fraction if both top and bottom exists\r\n            if(top && bottom) {\r\n                var frac = this.frac(top, bottom);\r\n                if(combine_power && tp)\r\n                    frac = this.brackets(frac) + tp;\r\n                return frac;\r\n            }\r\n            // otherwise only the top exists so return that\r\n            else\r\n                return top;\r\n        },\r\n        merge: function (a, b) {\r\n            var r = [];\r\n            for(var i = 0; i < 2; i++)\r\n                r[i] = a[i] + b[i];\r\n            return r;\r\n        },\r\n        // joins together two strings if both exist\r\n        join: function (n, d, glue) {\r\n            if(!n && !d)\r\n                return '';\r\n            if(n && !d)\r\n                return n;\r\n            if(d && !n)\r\n                return d;\r\n            return n + glue + d;\r\n        },\r\n        /**\r\n         * Places subscripts in braces for proper formatting\r\n         * @param {String} v\r\n         * @returns {String}\r\n         */\r\n        formatSubscripts: function (v) {\r\n            // Split it at the underscore\r\n            var arr = v.toString().split('_');\r\n\r\n            var name = '';\r\n\r\n            // Loop over all entries except the first one\r\n            while(arr.length > 1) {\r\n                // Wrap all in braces except for the last one\r\n                if(arr.length > 0) {\r\n                    name = '_' + this.braces(arr.pop() + name);\r\n                }\r\n            }\r\n\r\n            return arr[0] + name;\r\n        },\r\n        formatP: function (p_array) {\r\n            for(var i = 0; i < 2; i++) {\r\n                var p = p_array[i];\r\n                if(p)\r\n                    p_array[i] = '^' + this.braces(p);\r\n            }\r\n            return p_array;\r\n        },\r\n        /**\r\n         * formats the fractions accordingly.\r\n         * @param {Frac} f\r\n         * @param {bool} is_pow\r\n         */\r\n        formatFrac: function (f, is_pow) {\r\n            var n = f.num.toString(),\r\n                    d = f.den.toString();\r\n            // no need to have x^1\r\n            if(is_pow && n === '1' && d === '1')\r\n                return '';\r\n            // no need to have x/1\r\n            if(d === '1')\r\n                return n;\r\n            return this.frac(n, d);\r\n        },\r\n        frac: function (n, d) {\r\n            return '\\\\frac' + this.braces(n) + this.braces(d);\r\n        },\r\n        braces: function (e) {\r\n            return '{' + e + '}';\r\n        },\r\n        brackets: function (e, typ) {\r\n            typ = typ || 'parens';\r\n            var bracketTypes = {\r\n                parens: ['(', ')'],\r\n                square: ['[', ']'],\r\n                brace: ['{', '}'],\r\n                abs: ['|', '|'],\r\n                angle: ['\\\\langle', '\\\\rangle']\r\n            };\r\n            var bracket = bracketTypes[typ];\r\n            return '\\\\left' + bracket[0] + e + '\\\\right' + bracket[1];\r\n        },\r\n        /**\r\n         * Removes extreneous tokens\r\n         * @param {Tokens[]} tokens\r\n         * @returns {Tokens[]}\r\n         */\r\n        filterTokens: function (tokens) {\r\n            var filtered = [];\r\n\r\n            // Copy over the type of the scope\r\n            if(isArray(tokens)) {\r\n                filtered.type = tokens.type;\r\n            }\r\n\r\n            // the items that need to be disposed\r\n            var d = ['\\\\', 'left', 'right', 'big', 'Big', 'large', 'Large'];\r\n            for(var i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                var next_token = tokens[i + 1];\r\n                if(token.value === '\\\\' && next_token.value === '\\\\') {\r\n                    filtered.push(token);\r\n                }\r\n                else if(isArray(token)) {\r\n                    filtered.push(LaTeX.filterTokens(token));\r\n                }\r\n                else if(d.indexOf(token.value) === -1) {\r\n                    filtered.push(token);\r\n                }\r\n            }\r\n            return filtered;\r\n        },\r\n        /*\r\n         * Parses tokens from LaTeX string. Does not do any error checking\r\n         * @param {Tokens[]} rpn\r\n         * @returns {String}\r\n         */\r\n        parse: function (raw_tokens) {\r\n            var i, l;\r\n            var retval = '';\r\n            var tokens = this.filterTokens(raw_tokens);\r\n            var replace = {\r\n                'cdot': '',\r\n                'times': '',\r\n                'infty': 'Infinity'\r\n            };\r\n            // get the next token\r\n            var next = function (n) {\r\n                return tokens[(typeof n === 'undefined' ? ++i : i += n)];\r\n            };\r\n            var parse_next = function () {\r\n                return LaTeX.parse(next());\r\n            };\r\n            var get = function (token) {\r\n                if(token in replace) {\r\n                    return replace[token];\r\n                }\r\n                // A quirk with implicit multiplication forces us to check for *\r\n                if(token === '*' && tokens[i + 1].value === '&') {\r\n                    next(2); // skip this and the &\r\n                    return ',';\r\n                }\r\n\r\n                if(token === '&') {\r\n                    next();\r\n                    return ','; // Skip the *\r\n                }\r\n                // If it's the end of a row, return the row separator\r\n                if(token === '\\\\') {\r\n                    return '],[';\r\n                }\r\n                return token;\r\n            };\r\n\r\n            // start parsing the tokens\r\n            for(i = 0, l = tokens.length; i < l; i++) {\r\n                var token = tokens[i];\r\n                // fractions\r\n                if(token.value === 'frac') {\r\n                    // parse and wrap it in brackets\r\n                    var n = parse_next();\r\n                    var d = parse_next();\r\n                    retval += n + '/' + d;\r\n                }\r\n                else if(token.value in LaTeX.symbols) {\r\n                    if(token.value === SQRT && tokens[i + 1].type === 'vector' && tokens[i + 2].type === 'Set') {\r\n                        var base = parse_next();\r\n                        var expr = parse_next();\r\n                        retval += (expr + '^' + inBrackets('1/' + base));\r\n                    }\r\n                    else {\r\n                        retval += token.value + parse_next();\r\n                    }\r\n                }\r\n                else if(token.value === 'int') {\r\n                    var f = parse_next();\r\n                    // skip the comma\r\n                    i++;\r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    dx = get(dx.substring(1, dx.length));\r\n                    retval += 'integrate' + inBrackets(f + ',' + dx);\r\n                }\r\n                else if(token.value === 'int_') {\r\n                    var l = parse_next(); // lower\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value && token.value.startsWith('int_')) {\r\n                    // var l = parse_next(); // lower\r\n                    var l = token.value.replace('int_', '')\r\n                    console.log('uppernow')\r\n                    i++; // skip the ^\r\n                    var u = next().value; // upper\r\n                    // if it is in brackets\r\n                    if (u === undefined) {\r\n                        i--;\r\n                        var u = parse_next();\r\n                    }\r\n                    var f = parse_next(); // function\r\n                    \r\n                    // get the variable of integration\r\n                    var dx = next().value;\r\n                    // skip the comma\r\n                    if (dx === ',') {\r\n                        var dx = next().value;\r\n                    }\r\n                    // if 'd', skip\r\n                    if (dx === 'differentialD') {\r\n                        // skip the *\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    if (dx === 'mathrm') {\r\n                        // skip the mathrm{d}\r\n                        i++;\r\n                        var dx = next().value;\r\n                    }\r\n                    retval += 'defint' + inBrackets(f + ',' + l + ',' + u + ',' + dx);\r\n                }\r\n                else if(token.value === 'mathrm') {\r\n                    var f = tokens[++i][0].value;\r\n                    retval += f + parse_next();\r\n                }\r\n                // sum and product\r\n                else if(token.value === 'sum_' || token.value === 'prod_') {\r\n                    var fn = token.value === 'sum_' ? 'sum' : 'product';\r\n                    var nxt = next();\r\n                    i++; // skip the caret\r\n                    var end = parse_next();\r\n                    var f = parse_next();\r\n                    retval += fn + inBrackets([f, get(nxt[0]), get(nxt[2]), get(end)].join(','));\r\n                }\r\n                else if(token.value === 'lim_') {\r\n                    var nxt = next();\r\n                    retval += 'limit' + inBrackets([parse_next(), get(nxt[0]), get(nxt[2])].join(','));\r\n                }\r\n                else if(token.value === 'begin') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // Start a matrix\r\n                            retval += 'matrix([';\r\n                        }\r\n                    }\r\n                }\r\n                else if(token.value === 'end') {\r\n                    var nxt = next();\r\n                    if(Array.isArray(nxt)) {\r\n                        var v = nxt[0].value;\r\n                        if(v === 'matrix') {\r\n                            // End a matrix\r\n                            retval += '])';\r\n                        }\r\n                    }\r\n                }\r\n                else {\r\n                    if(Array.isArray(token)) {\r\n                        retval += get(LaTeX.parse(token));\r\n                    }\r\n                    else {\r\n                        retval += get(token.value.toString());\r\n                    }\r\n                }\r\n            }\r\n\r\n            return inBrackets(retval);\r\n        }\r\n    };\r\n//Vector =======================================================================\r\n    function Vector(v) {\r\n        if(isVector(v))\r\n            this.elements = v.items.slice(0);\r\n        else if(isArray(v))\r\n            this.elements = v.slice(0);\r\n        else\r\n            this.elements = [].slice.call(arguments);\r\n    }\r\n    /*\r\n     * Generates a pre-filled array\r\n     * @param {type} n\r\n     * @param {type} val\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.arrayPrefill = function (n, val) {\r\n        var a = [];\r\n        val = val || 0;\r\n        for(var i = 0; i < n; i++)\r\n            a[i] = val;\r\n        return a;\r\n    };\r\n    /**\r\n     * Generate a vector from and array\r\n     * @param {type} a\r\n     * @returns {unresolved}\r\n     */\r\n    Vector.fromArray = function (a) {\r\n        var v = new Vector();\r\n        v.elements = a;\r\n        return v;\r\n    };\r\n\r\n    /**\r\n     * Convert a Set to a Vector\r\n     * @param {Set} set\r\n     * @returns {Vector}\r\n     */\r\n    Vector.fromSet = function (set) {\r\n        return Vector.fromArray(set.elements);\r\n    };\r\n\r\n    //Ported from Sylvester.js\r\n    Vector.prototype = {\r\n        custom: true,\r\n        // Returns element i of the vector\r\n        e: function (i) {\r\n            return (i < 1 || i > this.elements.length) ? null : this.elements[i - 1];\r\n        },\r\n\r\n        set: function (i, val) {\r\n            if(!isSymbol(val))\r\n                val = new Symbol(val);\r\n            this.elements[i] = val;\r\n        },\r\n\r\n        // Returns the number of elements the vector has\r\n        dimensions: function () {\r\n            return this.elements.length;\r\n        },\r\n\r\n        // Returns the modulus ('length') of the vector\r\n        modulus: function () {\r\n            return block('SAFE', function () {\r\n                return _.pow((this.dot(this.clone())), new Symbol(0.5));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is equal to the argument\r\n        eql: function (vector) {\r\n            var n = this.elements.length;\r\n            var V = vector.elements || vector;\r\n            if(n !== V.length) {\r\n                return false;\r\n            }\r\n            do {\r\n                if(Math.abs(_.subtract(this.elements[n - 1], V[n - 1]).valueOf()) > PRECISION) {\r\n                    return false;\r\n                }\r\n            }\r\n            while(--n);\r\n            return true;\r\n        },\r\n\r\n        // Returns a clone of the vector\r\n        clone: function () {\r\n            var V = new Vector(),\r\n                    l = this.elements.length;\r\n            for(var i = 0; i < l; i++) {\r\n                //Rule: all items within the vector must have a clone method.\r\n                V.elements.push(this.elements[i].clone());\r\n            }\r\n            if(this.getter) {\r\n                V.getter = this.getter.clone();\r\n            }\r\n            return V;\r\n        },\r\n\r\n        // Maps the vector to another vector according to the given function\r\n        map: function (fn) {\r\n            var elements = [];\r\n            this.each(function (x, i) {\r\n                elements.push(fn(x, i));\r\n            });\r\n\r\n            return new Vector(elements);\r\n        },\r\n\r\n        // Calls the iterator for each element of the vector in turn\r\n        each: function (fn) {\r\n            var n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                fn(this.elements[i], i + 1);\r\n            }\r\n            while(--n);\r\n        },\r\n\r\n        // Returns a new vector created by normalizing the receiver\r\n        toUnitVector: function () {\r\n            return block('SAFE', function () {\r\n                var r = this.modulus();\r\n                if(r.valueOf() === 0) {\r\n                    return this.clone();\r\n                }\r\n                return this.map(function (x) {\r\n                    return _.divide(x, r);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the angle between the vector and the argument (also a vector)\r\n        angleFrom: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                var dot = new Symbol(0), mod1 = new Symbol(0), mod2 = new Symbol(0);\r\n                // Work things out in parallel to save time\r\n                this.each(function (x, i) {\r\n                    dot = _.add(dot, _.multiply(x, V[i - 1]));\r\n                    mod1 = _.add(mod1, _.multiply(x, x));// will not conflict in safe block\r\n                    mod2 = _.add(mod2, _.multiply(V[i - 1], V[i - 1]));// will not conflict in safe block\r\n                });\r\n                mod1 = _.pow(mod1, new Symbol(0.5));\r\n                mod2 = _.pow(mod2, new Symbol(0.5));\r\n                var product = _.multiply(mod1, mod2);\r\n                if(product.valueOf() === 0) {\r\n                    return null;\r\n                }\r\n                var theta = _.divide(dot, product);\r\n                var theta_val = theta.valueOf();\r\n                if(theta_val < -1) {\r\n                    theta = -1;\r\n                }\r\n                if(theta_val > 1) {\r\n                    theta = 1;\r\n                }\r\n                return new Symbol(Math.acos(theta));\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns true iff the vector is parallel to the argument\r\n        isParallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (angle <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is antiparallel to the argument\r\n        isAntiparallelTo: function (vector) {\r\n            var angle = this.angleFrom(vector).valueOf();\r\n            return (angle === null) ? null : (Math.abs(angle - Math.PI) <= PRECISION);\r\n        },\r\n\r\n        // Returns true iff the vector is perpendicular to the argument\r\n        isPerpendicularTo: function (vector) {\r\n            var dot = this.dot(vector);\r\n            return (dot === null) ? null : (Math.abs(dot) <= PRECISION);\r\n        },\r\n\r\n        // Returns the result of adding the argument to the vector\r\n        add: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.add(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of subtracting the argument from the vector\r\n        subtract: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                if(this.elements.length !== V.length) {\r\n                    return null;\r\n                }\r\n                return this.map(function (x, i) {\r\n                    return _.subtract(x, V[i - 1]);\r\n                });\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the result of multiplying the elements of the vector by the argument\r\n        multiply: function (k) {\r\n            return this.map(function (x) {\r\n                return x.clone() * k.clone();\r\n            });\r\n        },\r\n\r\n        x: function (k) {\r\n            return this.multiply(k);\r\n        },\r\n\r\n        // Returns the scalar product of the vector with the argument\r\n        // Both vectors must have equal dimensionality\r\n        dot: function (vector) {\r\n            return block('SAFE', function () {\r\n                var V = vector.elements || vector;\r\n                var product = new Symbol(0), n = this.elements.length;\r\n                if(n !== V.length) {\r\n                    return null;\r\n                }\r\n                do {\r\n                    product = _.add(product, _.multiply(this.elements[n - 1], V[n - 1]));\r\n                }\r\n                while(--n);\r\n                return product;\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the vector product of the vector with the argument\r\n        // Both vectors must have dimensionality 3\r\n        cross: function (vector) {\r\n            var B = vector.elements || vector;\r\n            if(this.elements.length !== 3 || B.length !== 3) {\r\n                return null;\r\n            }\r\n            var A = this.elements;\r\n            return block('SAFE', function () {\r\n                return new Vector([\r\n                    _.subtract(_.multiply(A[1], B[2]), _.multiply(A[2], B[1])),\r\n                    _.subtract(_.multiply(A[2], B[0]), _.multiply(A[0], B[2])),\r\n                    _.subtract(_.multiply(A[0], B[1]), _.multiply(A[1], B[0]))\r\n                ]);\r\n            }, undefined, this);\r\n        },\r\n\r\n        // Returns the (absolute) largest element of the vector\r\n        max: function () {\r\n            var m = 0, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(Math.abs(this.elements[i].valueOf()) > Math.abs(m.valueOf())) {\r\n                    m = this.elements[i];\r\n                }\r\n            }\r\n            while(--n);\r\n            return m;\r\n        },\r\n        magnitude: function () {\r\n            var magnitude = new Symbol(0);\r\n            this.each(function (e) {\r\n                magnitude = _.add(magnitude, _.pow(e, new Symbol(2)));\r\n            });\r\n            return _.sqrt(magnitude);\r\n        },\r\n        // Returns the index of the first match found\r\n        indexOf: function (x) {\r\n            var index = null, n = this.elements.length, k = n, i;\r\n            do {\r\n                i = k - n;\r\n                if(index === null && this.elements[i].valueOf() === x.valueOf()) {\r\n                    index = i + 1;\r\n                }\r\n            }\r\n            while(--n);\r\n            return index;\r\n        },\r\n        text: function (x) {\r\n            return text(this);\r\n        },\r\n        toString: function () {\r\n            return this.text();\r\n        },\r\n        latex: function (option) {\r\n            var tex = [];\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                tex.push(LaTeX.latex.call(LaTeX, this.elements[i], option));\r\n            }\r\n            return '[' + tex.join(', ') + ']';\r\n        }\r\n    };\r\n\r\n//Matrix =======================================================================\r\n    function Matrix() {\r\n        var m = arguments,\r\n                l = m.length, i, el = [];\r\n        if(isMatrix(m)) { // if it's a matrix then make a clone\r\n            for(i = 0; i < l; i++) {\r\n                el.push(m[i].slice(0));\r\n            }\r\n        }\r\n        else {\r\n            var row, lw, rl;\r\n            for(i = 0; i < l; i++) {\r\n                row = m[i];\r\n                if(isVector(row))\r\n                    row = row.elements;\r\n                if(!isArray(row))\r\n                    row = [row];\r\n                rl = row.length;\r\n                if(lw && lw !== rl)\r\n                    err('Unable to create Matrix. Row dimensions do not match!');\r\n                el.push(row);\r\n                lw = rl;\r\n            }\r\n        }\r\n        this.elements = el;\r\n    }\r\n    Matrix.identity = function (n) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < n; i++) {\r\n            m.elements.push([]);\r\n            for(var j = 0; j < n; j++) {\r\n                m.set(i, j, i === j ? new Symbol(1) : new Symbol(0));\r\n            }\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Matrix.apply(this, args);\r\n        }\r\n        F.prototype = Matrix.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n    Matrix.zeroMatrix = function (rows, cols) {\r\n        var m = new Matrix();\r\n        for(var i = 0; i < rows; i++) {\r\n            m.elements.push(Vector.arrayPrefill(cols, new Symbol(0)));\r\n        }\r\n        return m;\r\n    };\r\n    Matrix.prototype = {\r\n        // needs be true to let the parser know not to try to cast it to a symbol\r\n        custom: true,\r\n        get: function (row, column) {\r\n            if(!this.elements[row])\r\n                return undefined;\r\n            return this.elements[row][column];\r\n        },\r\n        map: function (f, raw_values) {\r\n            var M = new Matrix();\r\n            this.each(function (e, i, j) {\r\n                M.set(i, j, f.call(M, e), raw_values);\r\n            });\r\n            return M;\r\n        },\r\n        set: function (row, column, value, raw) {\r\n            if(!this.elements[row])\r\n                this.elements[row] = [];\r\n            this.elements[row][column] = raw ? value : (isSymbol(value) ? value : new Symbol(value));\r\n        },\r\n        cols: function () {\r\n            return this.elements[0].length;\r\n        },\r\n        rows: function () {\r\n            return this.elements.length;\r\n        },\r\n        row: function (n) {\r\n            if(!n || n > this.cols())\r\n                return [];\r\n            return this.elements[n - 1];\r\n        },\r\n        col: function (n) {\r\n            var nr = this.rows(),\r\n                    col = [];\r\n            if(n > this.cols() || !n)\r\n                return col;\r\n            for(var i = 0; i < nr; i++) {\r\n                col.push(this.elements[i][n - 1]);\r\n            }\r\n            return col;\r\n        },\r\n        eachElement: function (fn) {\r\n            var nr = this.rows(),\r\n                    nc = this.cols(), i, j;\r\n            for(i = 0; i < nr; i++) {\r\n                for(j = 0; j < nc; j++) {\r\n                    fn.call(this, this.elements[i][j], i, j);\r\n                }\r\n            }\r\n        },\r\n        // ported from Sylvester.js\r\n        determinant: function () {\r\n            if(!this.isSquare()) {\r\n                return null;\r\n            }\r\n            var M = this.toRightTriangular();\r\n            var det = M.elements[0][0], n = M.elements.length - 1, k = n, i;\r\n            do {\r\n                i = k - n + 1;\r\n                det = _.multiply(det, M.elements[i][i]);\r\n            }\r\n            while(--n);\r\n            return det;\r\n        },\r\n        isSquare: function () {\r\n            return this.elements.length === this.elements[0].length;\r\n        },\r\n        isSingular: function () {\r\n            return this.isSquare() && this.determinant() === 0;\r\n        },\r\n        augment: function (m) {\r\n            var r = this.rows(), rr = m.rows();\r\n            if(r !== rr)\r\n                err(\"Cannot augment matrix. Rows don't match.\");\r\n            for(var i = 0; i < r; i++) {\r\n                this.elements[i] = this.elements[i].concat(m.elements[i]);\r\n            }\r\n\r\n            return this;\r\n        },\r\n        clone: function () {\r\n            var r = this.rows(), c = this.cols(),\r\n                    m = new Matrix();\r\n            for(var i = 0; i < r; i++) {\r\n                m.elements[i] = [];\r\n                for(var j = 0; j < c; j++) {\r\n                    var symbol = this.elements[i][j];\r\n                    m.elements[i][j] = isSymbol(symbol) ? symbol.clone() : symbol;\r\n                }\r\n            }\r\n            return m;\r\n        },\r\n        // ported from Sylvester.js\r\n        invert: function () {\r\n            if(!this.isSquare())\r\n                err('Matrix is not square!');\r\n            return block('SAFE', function () {\r\n                var ni = this.elements.length, ki = ni, i, j;\r\n                var imatrix = Matrix.identity(ni);\r\n                var M = this.augment(imatrix).toRightTriangular();\r\n                var np, kp = M.elements[0].length, p, els, divisor;\r\n                var inverse_elements = [], new_element;\r\n                // Matrix is non-singular so there will be no zeros on the diagonal\r\n                // Cycle through rows from last to first\r\n                do {\r\n                    i = ni - 1;\r\n                    // First, normalise diagonal elements to 1\r\n                    els = [];\r\n                    np = kp;\r\n                    inverse_elements[i] = [];\r\n                    divisor = M.elements[i][i];\r\n                    do {\r\n                        p = kp - np;\r\n                        new_element = _.divide(M.elements[i][p], divisor.clone());\r\n                        els.push(new_element);\r\n                        // Shuffle of the current row of the right hand side into the results\r\n                        // array as it will not be modified by later runs through this loop\r\n                        if(p >= ki) {\r\n                            inverse_elements[i].push(new_element);\r\n                        }\r\n                    }\r\n                    while(--np);\r\n                    M.elements[i] = els;\r\n                    // Then, subtract this row from those above it to\r\n                    // give the identity matrix on the left hand side\r\n                    for(j = 0; j < i; j++) {\r\n                        els = [];\r\n                        np = kp;\r\n                        do {\r\n                            p = kp - np;\r\n                            els.push(_.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), M.elements[j][i].clone())));\r\n                        }\r\n                        while(--np);\r\n                        M.elements[j] = els;\r\n                    }\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(inverse_elements);\r\n            }, undefined, this);\r\n        },\r\n        // ported from Sylvester.js\r\n        toRightTriangular: function () {\r\n            return block('SAFE', function () {\r\n                var M = this.clone(), els, fel, nel,\r\n                        n = this.elements.length, k = n, i, np, kp = this.elements[0].length, p;\r\n                do {\r\n                    i = k - n;\r\n                    fel = M.elements[i][i];\r\n                    if(fel.valueOf() === 0) {\r\n                        for(var j = i + 1; j < k; j++) {\r\n                            nel = M.elements[j][i];\r\n                            if(nel && nel.valueOf() !== 0) {\r\n                                els = [];\r\n                                np = kp;\r\n                                do {\r\n                                    p = kp - np;\r\n                                    els.push(_.add(M.elements[i][p].clone(), M.elements[j][p].clone()));\r\n                                }\r\n                                while(--np);\r\n                                M.elements[i] = els;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    var fel = M.elements[i][i];\r\n                    if(fel.valueOf() !== 0) {\r\n                        for(j = i + 1; j < k; j++) {\r\n                            var multiplier = _.divide(M.elements[j][i].clone(), M.elements[i][i].clone());\r\n                            els = [];\r\n                            np = kp;\r\n                            do {\r\n                                p = kp - np;\r\n                                // Elements with column numbers up to an including the number\r\n                                // of the row that we're subtracting can safely be set straight to\r\n                                // zero, since that's the point of this routine and it avoids having\r\n                                // to loop over and correct rounding errors later\r\n                                els.push(p <= i ? new Symbol(0) :\r\n                                        _.subtract(M.elements[j][p].clone(), _.multiply(M.elements[i][p].clone(), multiplier.clone())));\r\n                            }\r\n                            while(--np);\r\n                            M.elements[j] = els;\r\n                        }\r\n                    }\r\n                }\r\n                while(--n);\r\n\r\n                return M;\r\n            }, undefined, this);\r\n        },\r\n        transpose: function () {\r\n            var rows = this.elements.length, cols = this.elements[0].length;\r\n            var M = new Matrix(), ni = cols, i, nj, j;\r\n\r\n            do {\r\n                i = cols - ni;\r\n                M.elements[i] = [];\r\n                nj = rows;\r\n                do {\r\n                    j = rows - nj;\r\n                    M.elements[i][j] = this.elements[j][i].clone();\r\n                }\r\n                while(--nj);\r\n            }\r\n            while(--ni);\r\n            return M;\r\n        },\r\n        // Returns true if the matrix can multiply the argument from the left\r\n        canMultiplyFromLeft: function (matrix) {\r\n            var l = isMatrix(matrix) ? matrix.elements.length : matrix.length;\r\n            // this.columns should equal matrix.rows\r\n            return (this.elements[0].length === l);\r\n        },\r\n        sameSize: function (matrix) {\r\n            return this.rows() === matrix.rows() && this.cols() === matrix.cols();\r\n        },\r\n        multiply: function (matrix) {\r\n            return block('SAFE', function () {\r\n                var M = matrix.elements || matrix;\r\n                if(!this.canMultiplyFromLeft(M)) {\r\n                    if(this.sameSize(matrix)) {\r\n                        var MM = new Matrix();\r\n                        var rows = this.rows();\r\n                        for(var i = 0; i < rows; i++) {\r\n                            var e = _.multiply(new Vector(this.elements[i]), new Vector(matrix.elements[i]));\r\n                            MM.elements[i] = e.elements;\r\n                        }\r\n                        return MM;\r\n                    }\r\n                    return null;\r\n                }\r\n                var ni = this.elements.length, ki = ni, i, nj, kj = M[0].length, j;\r\n                var cols = this.elements[0].length, elements = [], sum, nc, c;\r\n                do {\r\n                    i = ki - ni;\r\n                    elements[i] = [];\r\n                    nj = kj;\r\n                    do {\r\n                        j = kj - nj;\r\n                        sum = new Symbol(0);\r\n                        nc = cols;\r\n                        do {\r\n                            c = cols - nc;\r\n                            sum = _.add(sum, _.multiply(this.elements[i][c], M[c][j]));\r\n                        }\r\n                        while(--nc);\r\n                        elements[i][j] = sum;\r\n                    }\r\n                    while(--nj);\r\n                }\r\n                while(--ni);\r\n                return Matrix.fromArray(elements);\r\n            }, undefined, this);\r\n        },\r\n        add: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.add(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        subtract: function (matrix, callback) {\r\n            var M = new Matrix();\r\n            if(this.sameSize(matrix)) {\r\n                this.eachElement(function (e, i, j) {\r\n                    var result = _.subtract(e.clone(), matrix.elements[i][j].clone());\r\n                    if(callback) {\r\n                        result = callback.call(M, result, e, matrix.elements[i][j]);\r\n                    }\r\n                    M.set(i, j, result);\r\n                });\r\n            }\r\n            return M;\r\n        },\r\n        negate: function () {\r\n            this.each(function (e) {\r\n                return e.negate();\r\n            });\r\n            return this;\r\n        },\r\n        toVector: function () {\r\n            if(this.rows() === 1 || this.cols() === 1) {\r\n                var v = new Vector();\r\n                v.elements = this.elements;\r\n                return v;\r\n            }\r\n            return this;\r\n        },\r\n        toString: function (newline, to_decimal) {\r\n            var l = this.rows(),\r\n                    s = [];\r\n            newline = newline === undefined ? '\\n' : newline;\r\n            for(var i = 0; i < l; i++) {\r\n                s.push('[' + this.elements[i].map(function (x) {\r\n                    var v = to_decimal ? x.multiplier.toDecimal() : x.toString();\r\n                    return x !== undefined ? v : '';\r\n                }).join(',') + ']');\r\n            }\r\n            return 'matrix' + inBrackets(s.join(','));\r\n        },\r\n        text: function () {\r\n            return 'matrix(' + this.elements.toString('') + ')';\r\n        },\r\n        latex: function (option) {\r\n            var cols = this.cols(), elements = this.elements;\r\n            return format('\\\\begin{vmatrix}{0}\\\\end{vmatrix}', function () {\r\n                var tex = [];\r\n                for(var row in elements) {\r\n                    var row_tex = [];\r\n                    for(var i = 0; i < cols; i++) {\r\n                        row_tex.push(LaTeX.latex.call(LaTeX, elements[row][i], option));\r\n                    }\r\n                    tex.push(row_tex.join(' & '));\r\n                }\r\n                return tex.join(' \\\\cr ');\r\n            });\r\n        }\r\n    };\r\n    // aliases\r\n    Matrix.prototype.each = Matrix.prototype.eachElement;\r\n\r\n\r\n    function Set(set) {\r\n        this.elements = [];\r\n        // if the first object isn't an array, convert it to one.\r\n        if(!isVector(set))\r\n            set = Vector.fromArray(arguments);\r\n\r\n        if(set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                this.add(elements[i]);\r\n            }\r\n        }\r\n    }\r\n\r\n    Set.fromArray = function (arr) {\r\n        function F(args) {\r\n            return Set.apply(this, args);\r\n        }\r\n        F.prototype = Set.prototype;\r\n\r\n        return new F(arr);\r\n    };\r\n\r\n    Set.prototype = {\r\n        add: function (x) {\r\n            if(!this.contains(x))\r\n                this.elements.push(x.clone());\r\n        },\r\n        contains: function (x) {\r\n            for(var i = 0; i < this.elements.length; i++) {\r\n                var e = this.elements[i];\r\n                if(x.equals(e))\r\n                    return true;\r\n            }\r\n            return false;\r\n        },\r\n        each: function (f) {\r\n            var elements = this.elements;\r\n            var set = new Set();\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                var e = elements[i];\r\n                f.call(this, e, set, i);\r\n            }\r\n            return set;\r\n        },\r\n        clone: function () {\r\n            var set = new Set();\r\n            this.each(function (e) {\r\n                set.add(e.clone());\r\n            });\r\n            return set;\r\n        },\r\n        union: function (set) {\r\n            var _union = this.clone();\r\n            set.each(function (e) {\r\n                _union.add(e);\r\n            });\r\n\r\n            return _union;\r\n        },\r\n        difference: function (set) {\r\n            var diff = this.clone();\r\n            set.each(function (e) {\r\n                diff.remove(e);\r\n            });\r\n            return diff;\r\n        },\r\n        remove: function (element) {\r\n            for(var i = 0, l = this.elements.length; i < l; i++) {\r\n                var e = this.elements[i];\r\n                if(e.equals(element)) {\r\n                    remove(this.elements, i);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        intersection: function (set) {\r\n            var _intersection = new Set();\r\n            var A = this;\r\n            set.each(function (e) {\r\n                if(A.contains(e)) {\r\n                    _intersection.add(e);\r\n                }\r\n                ;\r\n            });\r\n\r\n            return _intersection;\r\n        },\r\n        intersects: function (set) {\r\n            return this.intersection(set).elements.length > 0;\r\n        },\r\n        is_subset: function (set) {\r\n            var elements = set.elements;\r\n            for(var i = 0, l = elements.length; i < l; i++) {\r\n                if(!this.contains(elements[i])) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        toString: function () {\r\n            return '{' + this.elements.join(',') + '}';\r\n        }\r\n    };\r\n\r\n//build ========================================================================\r\n    var Build = {\r\n        dependencies: {\r\n            _rename: {\r\n                'Math2.factorial': 'factorial'\r\n            },\r\n            factorial: {\r\n                'Math2.gamma': Math2.gamma\r\n            },\r\n            gamma_incomplete: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Li: {\r\n                'Math2.Ei': Math2.Ei,\r\n                'Math2.bigLog': Math2.bigLog,\r\n                'Frac': Frac\r\n            },\r\n            Ci: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Ei: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Si: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Shi: {\r\n                'Math2.factorial': Math2.factorial\r\n            },\r\n            Chi: {\r\n                'isInt': isInt,\r\n                'nround': nround,\r\n                'Math2.num_integrate': Math2.num_integrate\r\n            },\r\n            factor: {\r\n                'Math2.ifactor': Math2.ifactor,\r\n                'Symbol': Symbol\r\n            },\r\n            num_integrate: {\r\n                'Math2.simpson': Math2.simpson,\r\n                'nround': nround\r\n            },\r\n            fib: {\r\n                'even': even\r\n            }\r\n        },\r\n        /* Some functions need to be made numeric safe. Build checks if there's a\r\n         * reformat option and calls that instead when compiling the function string.\r\n         */\r\n        reformat: {\r\n            // this simply extends the build function\r\n            diff: function (symbol, deps) {\r\n                var v = symbol.args[1].toString();\r\n                var f = 'var f = ' + Build.build(symbol.args[0].toString(), [v]) + ';';\r\n                deps[1] += 'var diff = ' + Math2.diff.toString() + ';';\r\n                deps[1] += f;\r\n\r\n                return ['diff(f)(' + v + ')', deps];\r\n            }\r\n        },\r\n        getProperName: function (f) {\r\n            var map = {\r\n                continued_fraction: 'continuedFraction'\r\n            };\r\n            return map[f] || f;\r\n        },\r\n        // assumes that dependences are at max 2 levels\r\n        compileDependencies: function (f, deps) {\r\n            // grab the predefined dependiences\r\n            var dependencies = Build.dependencies[f];\r\n\r\n            // the dependency string\r\n            var dep_string = deps && deps[1] ? deps[1] : '';\r\n\r\n            // the functions to be replaced\r\n            var replacements = deps && deps[0] ? deps[0] : {};\r\n\r\n            // loop through them and add them to the list\r\n            for(var x in dependencies) {\r\n                if(typeof dependencies[x] === 'object')\r\n                    continue; // skip object\r\n                var components = x.split('.'); //Math.f becomes f\r\n                // if the function isn't part of an object then reference the function itself\r\n                dep_string += 'var ' + (components.length > 1 ? components[1] : components[0]) + '=' + dependencies[x] + ';';\r\n                replacements[x] = components.pop();\r\n            }\r\n\r\n            return [replacements, dep_string];\r\n        },\r\n        getArgsDeps: function (symbol, dependencies) {\r\n            var args = symbol.args;\r\n            for(var i = 0; i < args.length; i++) {\r\n                symbol.args[i].each(function (x) {\r\n                    if(x.group === FN)\r\n                        dependencies = Build.compileDependencies(x.fname, dependencies);\r\n                });\r\n            }\r\n            return dependencies;\r\n        },\r\n        build: function (symbol, arg_array) {\r\n            symbol = block('PARSE2NUMBER', function () {\r\n                return _.parse(symbol);\r\n            }, true);\r\n            var args = variables(symbol);\r\n            var supplements = [];\r\n            var dependencies = [];\r\n            var ftext = function (symbol, xports) {\r\n                //Fix for #545 - Parentheses confuse build.\r\n                if(symbol.fname === '') {\r\n                    symbol = Symbol.unwrapPARENS(symbol);\r\n                }\r\n                xports = xports || [];\r\n                var c = [],\r\n                        group = symbol.group,\r\n                        prefix = '';\r\n\r\n                var ftext_complex = function (group) {\r\n                    var d = group === CB ? '*' : '+',\r\n                            cc = [];\r\n\r\n                    for(var x in symbol.symbols) {\r\n                        var sym = symbol.symbols[x],\r\n                                ft = ftext(sym, xports)[0];\r\n                        // wrap it in brackets if it's group PL or CP\r\n                        if(sym.isComposite())\r\n                            ft = inBrackets(ft);\r\n                        cc.push(ft);\r\n                    }\r\n                    var retval = cc.join(d);\r\n                    retval = retval && !symbol.multiplier.equals(1) ? inBrackets(retval) : retval;\r\n                    return retval;\r\n                },\r\n                        ftext_function = function (bn) {\r\n                            var retval;\r\n                            if(bn in Math)\r\n                                retval = 'Math.' + bn;\r\n                            else {\r\n                                bn = Build.getProperName(bn);\r\n                                if(supplements.indexOf(bn) === -1) { // make sure you're not adding the function twice\r\n                                    //Math2 functions aren't part of the standard javascript\r\n                                    //Math library and must be exported.\r\n                                    xports.push('var ' + bn + ' = ' + Math2[bn].toString() + '; ');\r\n                                    supplements.push(bn);\r\n                                }\r\n                                retval = bn;\r\n                            }\r\n                            retval = retval + inBrackets(symbol.args.map(function (x) {\r\n                                return ftext(x, xports)[0];\r\n                            }).join(','));\r\n\r\n                            return retval;\r\n                        };\r\n\r\n                // the multiplier\r\n                if(group === N)\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                else if(symbol.multiplier.equals(-1))\r\n                    prefix = '-';\r\n                else if(!symbol.multiplier.equals(1))\r\n                    c.push(symbol.multiplier.toDecimal());\r\n                // the value\r\n                var value;\r\n\r\n                if(group === S || group === P)\r\n                    value = symbol.value;\r\n                else if(group === FN) {\r\n                    dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                    dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    if(Build.reformat[symbol.fname]) {\r\n                        var components = Build.reformat[symbol.fname](symbol, dependencies);\r\n                        dependencies = components[1];\r\n                        value = components[0];\r\n                    }\r\n                    else {\r\n                        value = ftext_function(symbol.fname);\r\n                    }\r\n\r\n                }\r\n                else if(group === EX) {\r\n                    var pg = symbol.previousGroup;\r\n                    if(pg === N || pg === S)\r\n                        value = symbol.value;\r\n                    else if(pg === FN) {\r\n                        value = ftext_function(symbol.fname);\r\n                        dependencies = Build.compileDependencies(symbol.fname, dependencies);\r\n                        dependencies = Build.getArgsDeps(symbol, dependencies);\r\n                    }\r\n                    else\r\n                        value = ftext_complex(symbol.previousGroup);\r\n                }\r\n                else {\r\n                    value = ftext_complex(symbol.group);\r\n                }\r\n\r\n                if(symbol.group !== N && !symbol.power.equals(1)) {\r\n                    var pow = ftext(_.parse(symbol.power));\r\n                    xports.push(pow[1]);\r\n                    value = 'Math.pow' + inBrackets(value + ',' + pow[0]);\r\n                }\r\n\r\n                if(value)\r\n                    c.push(prefix + value);\r\n\r\n                return [c.join('*'), xports.join('').replace(/\\n+\\s+/g, ' ')];\r\n            };\r\n            if(arg_array) {\r\n                // Fix for issue #546\r\n                // Disable argument checking since it's a bit presumptuous.\r\n                // Consider f(x) = 5; If I explicitely pass in an argument array contain x \r\n                // this check will fail and complain since the function doesn't contain x.\r\n                /*\r\n                 for (var i = 0; i < args.length; i++) {\r\n                 var arg = args[i];\r\n                 if (arg_array.indexOf(arg) === -1)\r\n                 err(arg + ' not found in argument array');\r\n                 }\r\n                 */\r\n                args = arg_array;\r\n            }\r\n\r\n            var f_array = ftext(symbol);\r\n\r\n            // make all the substitutions;\r\n            for(var x in dependencies[0]) {\r\n                var alias = dependencies[0][x];\r\n                f_array[1] = f_array[1].replace(x, alias);\r\n                dependencies[1] = dependencies[1].replace(x, alias);\r\n            }\r\n\r\n            var f = new Function(args, (dependencies[1] || '') + f_array[1] + ' return ' + f_array[0] + ';');\r\n\r\n            return f;\r\n        }\r\n    };\r\n\r\n\r\n//finalize =====================================================================\r\n    /* FINALIZE */\r\n    (function () {\r\n        reserveNames(_.CONSTANTS);\r\n        reserveNames(_.functions);\r\n        _.initConstants();\r\n        //bug fix for error but needs to be revisited\r\n        if(!_.error)\r\n            _.error = err;\r\n\r\n        //Store the log and log10 functions\r\n        Settings.LOG_FNS = {\r\n            log: _.functions['log'],\r\n            log10: _.functions['log10']\r\n        };\r\n\r\n    })();\r\n\r\n    /* END FINALIZE */\r\n\r\n//Core =========================================================================\r\n    var Utils = {\r\n        allSame: allSame,\r\n        allNumeric: allNumeric,\r\n        arguments2Array: arguments2Array,\r\n        arrayAddSlices: arrayAddSlices,\r\n        arrayClone: arrayClone,\r\n        arrayMax: arrayMax,\r\n        arrayMin: arrayMin,\r\n        arrayEqual: arrayEqual,\r\n        arrayUnique: arrayUnique,\r\n        arrayGetVariables: arrayGetVariables,\r\n        arraySum: arraySum,\r\n        block: block,\r\n        build: Build.build,\r\n        clearU: clearU,\r\n        comboSort: comboSort,\r\n        compare: compare,\r\n        convertToVector: convertToVector,\r\n        customError: customError,\r\n        customType: customType,\r\n        decompose_fn: decompose_fn,\r\n        each: each,\r\n        evaluate: evaluate,\r\n        even: even,\r\n        evenFraction: evenFraction,\r\n        fillHoles: fillHoles,\r\n        firstObject: firstObject,\r\n        format: format,\r\n        generatePrimes: generatePrimes,\r\n        getCoeffs: getCoeffs,\r\n        getU: getU,\r\n        importFunctions: importFunctions,\r\n        inBrackets: inBrackets,\r\n        isArray: isArray,\r\n        isExpression: isExpression,\r\n        isFraction: isFraction,\r\n        isInt: isInt,\r\n        isMatrix: isMatrix,\r\n        isNegative: isNegative,\r\n        isNumericSymbol: isNumericSymbol,\r\n        isPrime: isPrime,\r\n        isReserved: isReserved,\r\n        isSymbol: isSymbol,\r\n        isVariableSymbol: isVariableSymbol,\r\n        isVector: isVector,\r\n        keys: keys,\r\n        knownVariable: knownVariable,\r\n        nroots: nroots,\r\n        remove: remove,\r\n        reserveNames: reserveNames,\r\n        range: range,\r\n        round: nround,\r\n        sameSign: sameSign,\r\n        scientificToDecimal: scientificToDecimal,\r\n        separate: separate,\r\n        stringReplace: stringReplace,\r\n        text: text,\r\n        validateName: validateName,\r\n        variables: variables,\r\n        warn: warn\r\n    };\r\n\r\n    //This contains all the parts of nerdamer and enables nerdamer's internal functions\r\n    //to be used.\r\n    var C = {\r\n        groups: Groups,\r\n        Symbol: Symbol,\r\n        Expression: Expression,\r\n        Frac: Frac,\r\n        Vector: Vector,\r\n        Matrix: Matrix,\r\n        Parser: Parser,\r\n        Scientific: Scientific,\r\n        Fraction: Fraction,\r\n        Math2: Math2,\r\n        LaTeX: LaTeX,\r\n        Utils: Utils,\r\n        PARSER: _,\r\n        PARENTHESIS: PARENTHESIS,\r\n        Settings: Settings,\r\n        err: err,\r\n        bigInt: bigInt,\r\n        bigDec: bigDec,\r\n        exceptions: exceptions\r\n    };\r\n\r\n//libExports ===================================================================\r\n    /**\r\n     *\r\n     * @param {String} expression the expression to be evaluated\r\n     * @param {Object} subs the object containing the variable values\r\n     * @param {Integer} location a specific location in the equation list to\r\n     * insert the evaluated expression\r\n     * @param {String} option additional options\r\n     * @returns {Expression}\r\n     */\r\n    var libExports = function (expression, subs, option, location) {\r\n        // Initiate the numer flag\r\n        var numer = false;\r\n\r\n        // Is the user declaring a function?\r\n        var fndec = /^([a-z_][a-z\\d\\_]*)\\(([a-z_,\\s]*)\\):=(.+)$/gi.exec(expression);\r\n        if(fndec)\r\n            return nerdamer.setFunction(fndec[1], fndec[2].split(','), fndec[3]);\r\n\r\n        // var variable, fn, args;\r\n        // Convert any expression passed in to a string\r\n        if(expression instanceof Expression)\r\n            expression = expression.toString();\r\n\r\n        // Convert it to an array for simplicity\r\n        if(!isArray(option)) {\r\n            option = typeof option === 'undefined' ? [] : [option];\r\n        }\r\n\r\n        option.forEach(function (o) {\r\n            // Turn on the numer flag if requested\r\n            if(o === 'numer') {\r\n                numer = true;\r\n                return;\r\n            }\r\n            // Wrap it in a function if requested. This only holds true for\r\n            // functions that take a single argument which is the expression\r\n            var f = _.functions[option];\r\n            // If there's a function and it takes a single argument, then wrap\r\n            // the expression in it\r\n            if(f && f[1] === 1) {\r\n                expression = `${o}(${expression})`;\r\n            }\r\n        });\r\n\r\n        var e = block('PARSE2NUMBER', function () {\r\n            return _.parse(expression, subs);\r\n        }, numer || Settings.PARSE2NUMBER);\r\n\r\n        if(location) {\r\n            EXPRESSIONS[location - 1] = e;\r\n        }\r\n        else {\r\n            EXPRESSIONS.push(e);\r\n        }\r\n\r\n        return new Expression(e);\r\n    };\r\n    /**\r\n     * Converts expression into rpn form\r\n     * @param {String} expression\r\n     * @returns {Token[]}\r\n     */\r\n    libExports.rpn = function (expression) {\r\n        return _.tokenize(_.toRPN(expression));\r\n    };\r\n\r\n    /**\r\n     * Generates LaTeX from expression string\r\n     * @param {String} e\r\n     * @param {object} opt\r\n     * @returns {String}\r\n     */\r\n    libExports.convertToLaTeX = function (e, opt) {\r\n        return _.toTeX(e, opt);\r\n    };\r\n\r\n    /**\r\n     * Converts latex to text - Very very very basic at the moment\r\n     * @param {String} e\r\n     * @returns {String}\r\n     */\r\n    libExports.convertFromLaTeX = function (e) {\r\n        var txt = LaTeX.parse(_.tokenize(e));\r\n        return new Expression(_.parse(txt));\r\n    };\r\n\r\n    /**\r\n     * Get the version of nerdamer or a loaded add-on\r\n     * @param {String} add_on - The add-on being checked\r\n     * @returns {String} returns the version of nerdamer\r\n     */\r\n    libExports.version = function (add_on) {\r\n        if(add_on) {\r\n            try {\r\n                return C[add_on].version;\r\n            }\r\n            catch(e) {\r\n                return \"No module named \" + add_on + \" found!\";\r\n            }\r\n        }\r\n        return version;\r\n    };\r\n\r\n    /**\r\n     * Get nerdamer generated warnings\r\n     * @returns {String[]}\r\n     */\r\n    libExports.getWarnings = function () {\r\n        return WARNINGS;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} constant The name of the constant to be set\r\n     * @param {mixed} value The value of the constant\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setConstant = function (constant, value) {\r\n        validateName(constant);\r\n        if(!isReserved(constant)) {\r\n            //fix for issue #127\r\n            if(value === 'delete' || value === '') {\r\n                delete _.CONSTANTS[constant];\r\n            }\r\n            else {\r\n                if(isNaN(value))\r\n                    throw new NerdamerTypeError('Constant must be a number!');\r\n                _.CONSTANTS[constant] = value;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a previously set constant\r\n     * @param {type} constant\r\n     * @returns {String}\r\n     */\r\n    libExports.getConstant = function (constant) {\r\n        return String(_.constant[constant]);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {String} name The name of the function\r\n     * @param {Array} params_array A list containing the parameter name of the functions\r\n     * @param {String} body The body of the function\r\n     * @returns {Boolean} returns true if succeeded and falls on fail\r\n     * @example nerdamer.setFunction('f',['x'], 'x^2+2');\r\n     */\r\n    libExports.setFunction = setFunction;\r\n\r\n    /**\r\n     *\r\n     * @returns {C} Exports the nerdamer core functions and objects\r\n     */\r\n    libExports.getCore = function () {\r\n        return C;\r\n    };\r\n\r\n    libExports.getExpression = libExports.getEquation = Expression.getExpression;\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asArray The returned names are returned as an array if this is set to true;\r\n     * @returns {String|Array}\r\n     */\r\n    libExports.reserved = function (asArray) {\r\n        if(asArray) {\r\n            return RESERVED;\r\n        }\r\n        return RESERVED.join(', ');\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Integer} equation_number the number of the equation to clear.\r\n     * If 'all' is supplied then all equations are cleared\r\n     * @param {Boolean} keep_EXPRESSIONS_fixed use true if you don't want to keep EXPRESSIONS length fixed\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clear = function (equation_number, keep_EXPRESSIONS_fixed) {\r\n        if(equation_number === 'all') {\r\n            EXPRESSIONS = [];\r\n        }\r\n        else if(equation_number === 'last') {\r\n            EXPRESSIONS.pop();\r\n        }\r\n        else if(equation_number === 'first') {\r\n            EXPRESSIONS.shift();\r\n        }\r\n        else {\r\n            var index = !equation_number ? EXPRESSIONS.length : equation_number - 1;\r\n            keep_EXPRESSIONS_fixed === true ? EXPRESSIONS[index] = undefined : remove(EXPRESSIONS, index);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Alias for nerdamer.clear('all')\r\n     */\r\n    libExports.flush = function () {\r\n        this.clear('all');\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Boolean} asObject\r\n     * @param {Boolean} asLaTeX\r\n     * @param {String|String[]} option\r\n     * @returns {Array}\r\n     */\r\n    libExports.expressions = function (asObject, asLaTeX, option) {\r\n        var result = asObject ? {} : [];\r\n        for(var i = 0; i < EXPRESSIONS.length; i++) {\r\n            var eq = asLaTeX ? LaTeX.latex(EXPRESSIONS[i], option) : text(EXPRESSIONS[i], option);\r\n            asObject ? result[i + 1] = eq : result.push(eq);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    //the method for registering modules\r\n    libExports.register = function (obj) {\r\n        var core = this.getCore();\r\n\r\n        if(isArray(obj)) {\r\n            for(var i = 0; i < obj.length; i++) {\r\n                if(obj)\r\n                    this.register(obj[i]);\r\n            }\r\n        }\r\n        else if(obj && Settings.exclude.indexOf(obj.name) === -1) {\r\n            //make sure all the dependencies are available\r\n            if(obj.dependencies) {\r\n                for(var i = 0; i < obj.dependencies.length; i++)\r\n                    if(!core[obj.dependencies[i]])\r\n                        throw new Error(format('{0} requires {1} to be loaded!', obj.name, obj.dependencies[i]));\r\n            }\r\n            //if no parent object is provided then the function does not have an address and cannot be called directly\r\n            var parent_obj = obj.parent,\r\n                    fn = obj.build.call(core); //call constructor to get function\r\n            if(parent_obj) {\r\n                if(!core[parent_obj])\r\n                    core[obj.parent] = {};\r\n\r\n                var ref_obj = parent_obj === 'nerdamer' ? this : core[parent_obj];\r\n                //attach the function to the core\r\n                ref_obj[obj.name] = fn;\r\n            }\r\n            if(obj.visible)\r\n                _.functions[obj.name] = [fn, obj.numargs]; //make the function available\r\n\r\n        }\r\n    };\r\n\r\n    /**\r\n     * @param {String} name variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validateName = validateName;\r\n\r\n    /**\r\n     * @param {String} varname variable name\r\n     * @returns {boolean} validates if the profided string is a valid variable name\r\n     */\r\n    libExports.validVarName = function (varname) {\r\n        try {\r\n            validateName(varname);\r\n            return RESERVED.indexOf(varname) === -1;\r\n        }\r\n        catch(e) {\r\n            return false;\r\n        }\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Array} Array of functions currently supported by nerdamer\r\n     */\r\n    libExports.supported = function () {\r\n        return keys(_.functions);\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @returns {Number} The number equations/expressions currently loaded\r\n     */\r\n    libExports.numEquations = libExports.numExpressions = function () {\r\n        return EXPRESSIONS.length;\r\n    };\r\n    /* END EXPORTS */\r\n\r\n    /**\r\n     *\r\n     * @param {String} v variable to be set\r\n     * @param {String} val value of variable. This can be a variable expression or number\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.setVar = function (v, val) {\r\n        validateName(v);\r\n        //check if it's not already a constant\r\n        if(v in _.CONSTANTS)\r\n            err('Cannot set value for constant ' + v);\r\n        if(val === 'delete' || val === '')\r\n            delete VARS[v];\r\n        else {\r\n            VARS[v] = isSymbol(val) ? val : _.parse(val);\r\n        }\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * Returns the value of a set variable\r\n     * @param {type} v\r\n     * @returns {varies}\r\n     */\r\n    libExports.getVar = function (v) {\r\n        return VARS[v];\r\n    };\r\n    /**\r\n     * Clear the variables from the VARS object\r\n     * @returns {Object} Returns the nerdamer object\r\n     */\r\n    libExports.clearVars = function () {\r\n        VARS = {};\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     *\r\n     * @param {Function} loader\r\n     * @returns {nerdamer}\r\n     */\r\n    libExports.load = function (loader) {\r\n        loader.call(this);\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * @param {String} output - output format. Can be 'object' (just returns the VARS object), 'text' or 'latex'. Default: 'text'\r\n     * @param {String|String[]} option\r\n     * @returns {Object} Returns an object with the variables\r\n     */\r\n    libExports.getVars = function (output, option) {\r\n        output = output || 'text';\r\n        var variables = {};\r\n        if(output === 'object')\r\n            variables = VARS;\r\n        else {\r\n            for(var v in VARS) {\r\n                if(output === 'latex') {\r\n                    variables[v] = VARS[v].latex(option);\r\n                }\r\n                else if(output === 'text') {\r\n                    variables[v] = VARS[v].text(option);\r\n                }\r\n            }\r\n        }\r\n        return variables;\r\n    };\r\n\r\n    /**\r\n     * Set the value of a setting\r\n     * @param {String} setting The setting to be changed\r\n     * @param {boolean} value\r\n     */\r\n    libExports.set = function (setting, value) {\r\n        //current options:\r\n        //PARSE2NUMBER, suppress_errors\r\n        if(typeof setting === 'object')\r\n            for(var x in setting) {\r\n                libExports.set(x, setting[x]);\r\n            }\r\n\r\n        var disallowed = ['SAFE'];\r\n        if(disallowed.indexOf(setting) !== -1)\r\n            err('Cannot modify setting: ' + setting);\r\n\r\n        if(setting === 'PRECISION') {\r\n            bigDec.set({precision: value});\r\n            Settings.PRECISION = value;\r\n\r\n            // Avoid that nerdamer puts out garbage after 21 decimal place\r\n            if(value > 21) {\r\n                this.set('USE_BIG', true);\r\n            }\r\n        }\r\n        else if(setting === 'USE_LN' && value === true) {\r\n            //set log as LN\r\n            Settings.LOG = 'LN';\r\n            //set log10 as log\r\n            Settings.LOG10 = 'log';\r\n            //point the functions in the right direction\r\n            _.functions['log'] = Settings.LOG_FNS.log10; //log is now log10\r\n            //the log10 function must be explicitly set\r\n            _.functions['log'][0] = function (x) {\r\n                if(x.isConstant())\r\n                    return new Symbol(Math.log10(x));\r\n                return _.symfunction(Settings.LOG10, [x]);\r\n            };\r\n            _.functions['LN'] = Settings.LOG_FNS.log; //LN is now log\r\n\r\n            //remove log10\r\n            delete _.functions['log10'];\r\n        }\r\n        else\r\n            Settings[setting] = value;\r\n    };\r\n\r\n    /**\r\n     * Get the value of a setting\r\n     * @param {type} setting\r\n     * @returns {undefined}\r\n     */\r\n    libExports.get = function (setting) {\r\n        return Settings[setting];\r\n    };\r\n\r\n    /**\r\n     * This functions makes internal functions available externally\r\n     * @param {bool} override Override the functions when calling updateAPI if it exists\r\n     */\r\n    libExports.updateAPI = function (override) {\r\n        //Map internal functions to external ones\r\n        var linker = function (fname) {\r\n            return function () {\r\n                var args = [].slice.call(arguments);\r\n                for(var i = 0; i < args.length; i++)\r\n                    args[i] = _.parse(args[i]);\r\n                return new Expression(block('PARSE2NUMBER', function () {\r\n                    return _.callfunction(fname, args);\r\n                }));\r\n            };\r\n        };\r\n        //perform the mapping\r\n        for(var x in _.functions)\r\n            if(!(x in libExports) || override)\r\n                libExports[x] = linker(x);\r\n    };\r\n\r\n    libExports.replaceFunction = function (name, fn, num_args) {\r\n        var existing = _.functions[name];\r\n        var new_num_args = typeof num_args === 'undefined' ? existing[1] : num_args;\r\n        _.functions[name] = [fn.call(undefined, existing[0], C), new_num_args];\r\n    };\r\n\r\n    libExports.setOperator = function (operator, shift) {\r\n        _.setOperator(operator, shift);\r\n    };\r\n\r\n    libExports.getOperator = function (operator) {\r\n        return _.getOperator(operator);\r\n    };\r\n\r\n    libExports.aliasOperator = function (operator, withOperator) {\r\n        _.aliasOperator(operator, withOperator);\r\n    };\r\n\r\n    libExports.tree = function (expression) {\r\n        return _.tree(_.toRPN(_.tokenize(expression)));\r\n    };\r\n\r\n    libExports.htmlTree = function (expression, indent) {\r\n        var tree = this.tree(expression);\r\n\r\n        return '<div class=\"tree\">\\n' +\r\n                '    <ul>\\n' +\r\n                '        <li>\\n' +\r\n                tree.toHTML(3, indent) + '\\n' +\r\n                '        </li>\\n' +\r\n                '    </ul>\\n' +\r\n                '</div>';\r\n    };\r\n\r\n    libExports.addPeeker = function (name, f) {\r\n        if(_.peekers[name])\r\n            _.peekers[name].push(f);\r\n    };\r\n\r\n    libExports.removePeeker = function (name, f) {\r\n        remove(_.peekers[name], f);\r\n    };\r\n\r\n    libExports.parse = function (e) {\r\n        return String(e).split(';').map(function (x) {\r\n            return _.parse(x);\r\n        });\r\n    };\r\n\r\n    libExports.updateAPI();\r\n\r\n    return libExports; //Done\r\n//imports ======================================================================\r\n})({\r\n    //https://github.com/peterolson/BigInteger.js\r\n    bigInt: (function(){\r\n        var bigInt=function(undefined){\"use strict\";var BASE=1e7,LOG_BASE=7,MAX_INT=9007199254740992,MAX_INT_ARR=smallToArray(MAX_INT),LOG_MAX_INT=Math.log(MAX_INT);function Integer(v,radix){if(typeof v===\"undefined\")return Integer[0];if(typeof radix!==\"undefined\")return+radix===10?parseValue(v):parseBase(v,radix);return parseValue(v)}function BigInteger(value,sign){this.value=value;this.sign=sign;this.isSmall=false}BigInteger.prototype=Object.create(Integer.prototype);function SmallInteger(value){this.value=value;this.sign=value<0;this.isSmall=true}SmallInteger.prototype=Object.create(Integer.prototype);function isPrecise(n){return-MAX_INT<n&&n<MAX_INT}function smallToArray(n){if(n<1e7)return[n];if(n<1e14)return[n%1e7,Math.floor(n/1e7)];return[n%1e7,Math.floor(n/1e7)%1e7,Math.floor(n/1e14)]}function arrayToSmall(arr){trim(arr);var length=arr.length;if(length<4&&compareAbs(arr,MAX_INT_ARR)<0){switch(length){case 0:return 0;case 1:return arr[0];case 2:return arr[0]+arr[1]*BASE;default:return arr[0]+(arr[1]+arr[2]*BASE)*BASE}}return arr}function trim(v){var i=v.length;while(v[--i]===0);v.length=i+1}function createArray(length){var x=new Array(length);var i=-1;while(++i<length){x[i]=0}return x}function truncate(n){if(n>0)return Math.floor(n);return Math.ceil(n)}function add(a,b){var l_a=a.length,l_b=b.length,r=new Array(l_a),carry=0,base=BASE,sum,i;for(i=0;i<l_b;i++){sum=a[i]+b[i]+carry;carry=sum>=base?1:0;r[i]=sum-carry*base}while(i<l_a){sum=a[i]+carry;carry=sum===base?1:0;r[i++]=sum-carry*base}if(carry>0)r.push(carry);return r}function addAny(a,b){if(a.length>=b.length)return add(a,b);return add(b,a)}function addSmall(a,carry){var l=a.length,r=new Array(l),base=BASE,sum,i;for(i=0;i<l;i++){sum=a[i]-base+carry;carry=Math.floor(sum/base);r[i]=sum-carry*base;carry+=1}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}BigInteger.prototype.add=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.subtract(n.negate())}var a=this.value,b=n.value;if(n.isSmall){return new BigInteger(addSmall(a,Math.abs(b)),this.sign)}return new BigInteger(addAny(a,b),this.sign)};BigInteger.prototype.plus=BigInteger.prototype.add;SmallInteger.prototype.add=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.subtract(n.negate())}var b=n.value;if(n.isSmall){if(isPrecise(a+b))return new SmallInteger(a+b);b=smallToArray(Math.abs(b))}return new BigInteger(addSmall(b,Math.abs(a)),a<0)};SmallInteger.prototype.plus=SmallInteger.prototype.add;function subtract(a,b){var a_l=a.length,b_l=b.length,r=new Array(a_l),borrow=0,base=BASE,i,difference;for(i=0;i<b_l;i++){difference=a[i]-borrow-b[i];if(difference<0){difference+=base;borrow=1}else borrow=0;r[i]=difference}for(i=b_l;i<a_l;i++){difference=a[i]-borrow;if(difference<0)difference+=base;else{r[i++]=difference;break}r[i]=difference}for(;i<a_l;i++){r[i]=a[i]}trim(r);return r}function subtractAny(a,b,sign){var value;if(compareAbs(a,b)>=0){value=subtract(a,b)}else{value=subtract(b,a);sign=!sign}value=arrayToSmall(value);if(typeof value===\"number\"){if(sign)value=-value;return new SmallInteger(value)}return new BigInteger(value,sign)}function subtractSmall(a,b,sign){var l=a.length,r=new Array(l),carry=-b,base=BASE,i,difference;for(i=0;i<l;i++){difference=a[i]+carry;carry=Math.floor(difference/base);difference%=base;r[i]=difference<0?difference+base:difference}r=arrayToSmall(r);if(typeof r===\"number\"){if(sign)r=-r;return new SmallInteger(r)}return new BigInteger(r,sign)}BigInteger.prototype.subtract=function(v){var n=parseValue(v);if(this.sign!==n.sign){return this.add(n.negate())}var a=this.value,b=n.value;if(n.isSmall)return subtractSmall(a,Math.abs(b),this.sign);return subtractAny(a,b,this.sign)};BigInteger.prototype.minus=BigInteger.prototype.subtract;SmallInteger.prototype.subtract=function(v){var n=parseValue(v);var a=this.value;if(a<0!==n.sign){return this.add(n.negate())}var b=n.value;if(n.isSmall){return new SmallInteger(a-b)}return subtractSmall(b,Math.abs(a),a>=0)};SmallInteger.prototype.minus=SmallInteger.prototype.subtract;BigInteger.prototype.negate=function(){return new BigInteger(this.value,!this.sign)};SmallInteger.prototype.negate=function(){var sign=this.sign;var small=new SmallInteger(-this.value);small.sign=!sign;return small};BigInteger.prototype.abs=function(){return new BigInteger(this.value,false)};SmallInteger.prototype.abs=function(){return new SmallInteger(Math.abs(this.value))};function multiplyLong(a,b){var a_l=a.length,b_l=b.length,l=a_l+b_l,r=createArray(l),base=BASE,product,carry,i,a_i,b_j;for(i=0;i<a_l;++i){a_i=a[i];for(var j=0;j<b_l;++j){b_j=b[j];product=a_i*b_j+r[i+j];carry=Math.floor(product/base);r[i+j]=product-carry*base;r[i+j+1]+=carry}}trim(r);return r}function multiplySmall(a,b){var l=a.length,r=new Array(l),base=BASE,carry=0,product,i;for(i=0;i<l;i++){product=a[i]*b+carry;carry=Math.floor(product/base);r[i]=product-carry*base}while(carry>0){r[i++]=carry%base;carry=Math.floor(carry/base)}return r}function shiftLeft(x,n){var r=[];while(n-- >0)r.push(0);return r.concat(x)}function multiplyKaratsuba(x,y){var n=Math.max(x.length,y.length);if(n<=30)return multiplyLong(x,y);n=Math.ceil(n/2);var b=x.slice(n),a=x.slice(0,n),d=y.slice(n),c=y.slice(0,n);var ac=multiplyKaratsuba(a,c),bd=multiplyKaratsuba(b,d),abcd=multiplyKaratsuba(addAny(a,b),addAny(c,d));var product=addAny(addAny(ac,shiftLeft(subtract(subtract(abcd,ac),bd),n)),shiftLeft(bd,2*n));trim(product);return product}function useKaratsuba(l1,l2){return-.012*l1-.012*l2+15e-6*l1*l2>0}BigInteger.prototype.multiply=function(v){var n=parseValue(v),a=this.value,b=n.value,sign=this.sign!==n.sign,abs;if(n.isSmall){if(b===0)return Integer[0];if(b===1)return this;if(b===-1)return this.negate();abs=Math.abs(b);if(abs<BASE){return new BigInteger(multiplySmall(a,abs),sign)}b=smallToArray(abs)}if(useKaratsuba(a.length,b.length))return new BigInteger(multiplyKaratsuba(a,b),sign);return new BigInteger(multiplyLong(a,b),sign)};BigInteger.prototype.times=BigInteger.prototype.multiply;function multiplySmallAndArray(a,b,sign){if(a<BASE){return new BigInteger(multiplySmall(b,a),sign)}return new BigInteger(multiplyLong(b,smallToArray(a)),sign)}SmallInteger.prototype._multiplyBySmall=function(a){if(isPrecise(a.value*this.value)){return new SmallInteger(a.value*this.value)}return multiplySmallAndArray(Math.abs(a.value),smallToArray(Math.abs(this.value)),this.sign!==a.sign)};BigInteger.prototype._multiplyBySmall=function(a){if(a.value===0)return Integer[0];if(a.value===1)return this;if(a.value===-1)return this.negate();return multiplySmallAndArray(Math.abs(a.value),this.value,this.sign!==a.sign)};SmallInteger.prototype.multiply=function(v){return parseValue(v)._multiplyBySmall(this)};SmallInteger.prototype.times=SmallInteger.prototype.multiply;function square(a){var l=a.length,r=createArray(l+l),base=BASE,product,carry,i,a_i,a_j;for(i=0;i<l;i++){a_i=a[i];carry=0-a_i*a_i;for(var j=i;j<l;j++){a_j=a[j];product=2*(a_i*a_j)+r[i+j]+carry;carry=Math.floor(product/base);r[i+j]=product-carry*base}r[i+l]=carry}trim(r);return r}BigInteger.prototype.square=function(){return new BigInteger(square(this.value),false)};SmallInteger.prototype.square=function(){var value=this.value*this.value;if(isPrecise(value))return new SmallInteger(value);return new BigInteger(square(smallToArray(Math.abs(this.value))),false)};function divMod1(a,b){var a_l=a.length,b_l=b.length,base=BASE,result=createArray(b.length),divisorMostSignificantDigit=b[b_l-1],lambda=Math.ceil(base/(2*divisorMostSignificantDigit)),remainder=multiplySmall(a,lambda),divisor=multiplySmall(b,lambda),quotientDigit,shift,carry,borrow,i,l,q;if(remainder.length<=a_l)remainder.push(0);divisor.push(0);divisorMostSignificantDigit=divisor[b_l-1];for(shift=a_l-b_l;shift>=0;shift--){quotientDigit=base-1;if(remainder[shift+b_l]!==divisorMostSignificantDigit){quotientDigit=Math.floor((remainder[shift+b_l]*base+remainder[shift+b_l-1])/divisorMostSignificantDigit)}carry=0;borrow=0;l=divisor.length;for(i=0;i<l;i++){carry+=quotientDigit*divisor[i];q=Math.floor(carry/base);borrow+=remainder[shift+i]-(carry-q*base);carry=q;if(borrow<0){remainder[shift+i]=borrow+base;borrow=-1}else{remainder[shift+i]=borrow;borrow=0}}while(borrow!==0){quotientDigit-=1;carry=0;for(i=0;i<l;i++){carry+=remainder[shift+i]-base+divisor[i];if(carry<0){remainder[shift+i]=carry+base;carry=0}else{remainder[shift+i]=carry;carry=1}}borrow+=carry}result[shift]=quotientDigit}remainder=divModSmall(remainder,lambda)[0];return[arrayToSmall(result),arrayToSmall(remainder)]}function divMod2(a,b){var a_l=a.length,b_l=b.length,result=[],part=[],base=BASE,guess,xlen,highx,highy,check;while(a_l){part.unshift(a[--a_l]);trim(part);if(compareAbs(part,b)<0){result.push(0);continue}xlen=part.length;highx=part[xlen-1]*base+part[xlen-2];highy=b[b_l-1]*base+b[b_l-2];if(xlen>b_l){highx=(highx+1)*base}guess=Math.ceil(highx/highy);do{check=multiplySmall(b,guess);if(compareAbs(check,part)<=0)break;guess--}while(guess);result.push(guess);part=subtract(part,check)}result.reverse();return[arrayToSmall(result),arrayToSmall(part)]}function divModSmall(value,lambda){var length=value.length,quotient=createArray(length),base=BASE,i,q,remainder,divisor;remainder=0;for(i=length-1;i>=0;--i){divisor=remainder*base+value[i];q=truncate(divisor/lambda);remainder=divisor-q*lambda;quotient[i]=q|0}return[quotient,remainder|0]}function divModAny(self,v){var value,n=parseValue(v);var a=self.value,b=n.value;var quotient;if(b===0)throw new Error(\"Cannot divide by zero\");if(self.isSmall){if(n.isSmall){return[new SmallInteger(truncate(a/b)),new SmallInteger(a%b)]}return[Integer[0],self]}if(n.isSmall){if(b===1)return[self,Integer[0]];if(b==-1)return[self.negate(),Integer[0]];var abs=Math.abs(b);if(abs<BASE){value=divModSmall(a,abs);quotient=arrayToSmall(value[0]);var remainder=value[1];if(self.sign)remainder=-remainder;if(typeof quotient===\"number\"){if(self.sign!==n.sign)quotient=-quotient;return[new SmallInteger(quotient),new SmallInteger(remainder)]}return[new BigInteger(quotient,self.sign!==n.sign),new SmallInteger(remainder)]}b=smallToArray(abs)}var comparison=compareAbs(a,b);if(comparison===-1)return[Integer[0],self];if(comparison===0)return[Integer[self.sign===n.sign?1:-1],Integer[0]];if(a.length+b.length<=200)value=divMod1(a,b);else value=divMod2(a,b);quotient=value[0];var qSign=self.sign!==n.sign,mod=value[1],mSign=self.sign;if(typeof quotient===\"number\"){if(qSign)quotient=-quotient;quotient=new SmallInteger(quotient)}else quotient=new BigInteger(quotient,qSign);if(typeof mod===\"number\"){if(mSign)mod=-mod;mod=new SmallInteger(mod)}else mod=new BigInteger(mod,mSign);return[quotient,mod]}BigInteger.prototype.divmod=function(v){var result=divModAny(this,v);return{quotient:result[0],remainder:result[1]}};SmallInteger.prototype.divmod=BigInteger.prototype.divmod;BigInteger.prototype.divide=function(v){return divModAny(this,v)[0]};SmallInteger.prototype.over=SmallInteger.prototype.divide=BigInteger.prototype.over=BigInteger.prototype.divide;BigInteger.prototype.mod=function(v){return divModAny(this,v)[1]};SmallInteger.prototype.remainder=SmallInteger.prototype.mod=BigInteger.prototype.remainder=BigInteger.prototype.mod;BigInteger.prototype.pow=function(v){var n=parseValue(v),a=this.value,b=n.value,value,x,y;if(b===0)return Integer[1];if(a===0)return Integer[0];if(a===1)return Integer[1];if(a===-1)return n.isEven()?Integer[1]:Integer[-1];if(n.sign){return Integer[0]}if(!n.isSmall)throw new Error(\"The exponent \"+n.toString()+\" is too large.\");if(this.isSmall){if(isPrecise(value=Math.pow(a,b)))return new SmallInteger(truncate(value))}x=this;y=Integer[1];while(true){if(b&1===1){y=y.times(x);--b}if(b===0)break;b/=2;x=x.square()}return y};SmallInteger.prototype.pow=BigInteger.prototype.pow;BigInteger.prototype.modPow=function(exp,mod){exp=parseValue(exp);mod=parseValue(mod);if(mod.isZero())throw new Error(\"Cannot take modPow with modulus 0\");var r=Integer[1],base=this.mod(mod);while(exp.isPositive()){if(base.isZero())return Integer[0];if(exp.isOdd())r=r.multiply(base).mod(mod);exp=exp.divide(2);base=base.square().mod(mod)}return r};SmallInteger.prototype.modPow=BigInteger.prototype.modPow;function compareAbs(a,b){if(a.length!==b.length){return a.length>b.length?1:-1}for(var i=a.length-1;i>=0;i--){if(a[i]!==b[i])return a[i]>b[i]?1:-1}return 0}BigInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall)return 1;return compareAbs(a,b)};SmallInteger.prototype.compareAbs=function(v){var n=parseValue(v),a=Math.abs(this.value),b=n.value;if(n.isSmall){b=Math.abs(b);return a===b?0:a>b?1:-1}return-1};BigInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(this.sign!==n.sign){return n.sign?1:-1}if(n.isSmall){return this.sign?-1:1}return compareAbs(a,b)*(this.sign?-1:1)};BigInteger.prototype.compareTo=BigInteger.prototype.compare;SmallInteger.prototype.compare=function(v){if(v===Infinity){return-1}if(v===-Infinity){return 1}var n=parseValue(v),a=this.value,b=n.value;if(n.isSmall){return a==b?0:a>b?1:-1}if(a<0!==n.sign){return a<0?-1:1}return a<0?1:-1};SmallInteger.prototype.compareTo=SmallInteger.prototype.compare;BigInteger.prototype.equals=function(v){return this.compare(v)===0};SmallInteger.prototype.eq=SmallInteger.prototype.equals=BigInteger.prototype.eq=BigInteger.prototype.equals;BigInteger.prototype.notEquals=function(v){return this.compare(v)!==0};SmallInteger.prototype.neq=SmallInteger.prototype.notEquals=BigInteger.prototype.neq=BigInteger.prototype.notEquals;BigInteger.prototype.greater=function(v){return this.compare(v)>0};SmallInteger.prototype.gt=SmallInteger.prototype.greater=BigInteger.prototype.gt=BigInteger.prototype.greater;BigInteger.prototype.lesser=function(v){return this.compare(v)<0};SmallInteger.prototype.lt=SmallInteger.prototype.lesser=BigInteger.prototype.lt=BigInteger.prototype.lesser;BigInteger.prototype.greaterOrEquals=function(v){return this.compare(v)>=0};SmallInteger.prototype.geq=SmallInteger.prototype.greaterOrEquals=BigInteger.prototype.geq=BigInteger.prototype.greaterOrEquals;BigInteger.prototype.lesserOrEquals=function(v){return this.compare(v)<=0};SmallInteger.prototype.leq=SmallInteger.prototype.lesserOrEquals=BigInteger.prototype.leq=BigInteger.prototype.lesserOrEquals;BigInteger.prototype.isEven=function(){return(this.value[0]&1)===0};SmallInteger.prototype.isEven=function(){return(this.value&1)===0};BigInteger.prototype.isOdd=function(){return(this.value[0]&1)===1};SmallInteger.prototype.isOdd=function(){return(this.value&1)===1};BigInteger.prototype.isPositive=function(){return!this.sign};SmallInteger.prototype.isPositive=function(){return this.value>0};BigInteger.prototype.isNegative=function(){return this.sign};SmallInteger.prototype.isNegative=function(){return this.value<0};BigInteger.prototype.isUnit=function(){return false};SmallInteger.prototype.isUnit=function(){return Math.abs(this.value)===1};BigInteger.prototype.isZero=function(){return false};SmallInteger.prototype.isZero=function(){return this.value===0};BigInteger.prototype.isDivisibleBy=function(v){var n=parseValue(v);var value=n.value;if(value===0)return false;if(value===1)return true;if(value===2)return this.isEven();return this.mod(n).equals(Integer[0])};SmallInteger.prototype.isDivisibleBy=BigInteger.prototype.isDivisibleBy;function isBasicPrime(v){var n=v.abs();if(n.isUnit())return false;if(n.equals(2)||n.equals(3)||n.equals(5))return true;if(n.isEven()||n.isDivisibleBy(3)||n.isDivisibleBy(5))return false;if(n.lesser(49))return true}function millerRabinTest(n,a){var nPrev=n.prev(),b=nPrev,r=0,d,t,i,x;while(b.isEven())b=b.divide(2),r++;next:for(i=0;i<a.length;i++){if(n.lesser(a[i]))continue;x=bigInt(a[i]).modPow(b,n);if(x.equals(Integer[1])||x.equals(nPrev))continue;for(d=r-1;d!=0;d--){x=x.square().mod(n);if(x.isUnit())return false;if(x.equals(nPrev))continue next}return false}return true}BigInteger.prototype.isPrime=function(strict){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var bits=n.bitLength();if(bits<=64)return millerRabinTest(n,[2,325,9375,28178,450775,9780504,1795265022]);var logN=Math.log(2)*bits;var t=Math.ceil(strict===true?2*Math.pow(logN,2):logN);for(var a=[],i=0;i<t;i++){a.push(bigInt(i+2))}return millerRabinTest(n,a)};SmallInteger.prototype.isPrime=BigInteger.prototype.isPrime;BigInteger.prototype.isProbablePrime=function(iterations){var isPrime=isBasicPrime(this);if(isPrime!==undefined)return isPrime;var n=this.abs();var t=iterations===undefined?5:iterations;for(var a=[],i=0;i<t;i++){a.push(bigInt.randBetween(2,n.minus(2)))}return millerRabinTest(n,a)};SmallInteger.prototype.isProbablePrime=BigInteger.prototype.isProbablePrime;BigInteger.prototype.modInv=function(n){var t=bigInt.zero,newT=bigInt.one,r=parseValue(n),newR=this.abs(),q,lastT,lastR;while(!newR.equals(bigInt.zero)){q=r.divide(newR);lastT=t;lastR=r;t=newT;r=newR;newT=lastT.subtract(q.multiply(newT));newR=lastR.subtract(q.multiply(newR))}if(!r.equals(1))throw new Error(this.toString()+\" and \"+n.toString()+\" are not co-prime\");if(t.compare(0)===-1){t=t.add(n)}if(this.isNegative()){return t.negate()}return t};SmallInteger.prototype.modInv=BigInteger.prototype.modInv;BigInteger.prototype.next=function(){var value=this.value;if(this.sign){return subtractSmall(value,1,this.sign)}return new BigInteger(addSmall(value,1),this.sign)};SmallInteger.prototype.next=function(){var value=this.value;if(value+1<MAX_INT)return new SmallInteger(value+1);return new BigInteger(MAX_INT_ARR,false)};BigInteger.prototype.prev=function(){var value=this.value;if(this.sign){return new BigInteger(addSmall(value,1),true)}return subtractSmall(value,1,this.sign)};SmallInteger.prototype.prev=function(){var value=this.value;if(value-1>-MAX_INT)return new SmallInteger(value-1);return new BigInteger(MAX_INT_ARR,true)};var powersOfTwo=[1];while(2*powersOfTwo[powersOfTwo.length-1]<=BASE)powersOfTwo.push(2*powersOfTwo[powersOfTwo.length-1]);var powers2Length=powersOfTwo.length,highestPower2=powersOfTwo[powers2Length-1];function shift_isSmall(n){return(typeof n===\"number\"||typeof n===\"string\")&&+Math.abs(n)<=BASE||n instanceof BigInteger&&n.value.length<=1}BigInteger.prototype.shiftLeft=function(n){if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftRight(-n);var result=this;if(result.isZero())return result;while(n>=powers2Length){result=result.multiply(highestPower2);n-=powers2Length-1}return result.multiply(powersOfTwo[n])};SmallInteger.prototype.shiftLeft=BigInteger.prototype.shiftLeft;BigInteger.prototype.shiftRight=function(n){var remQuo;if(!shift_isSmall(n)){throw new Error(String(n)+\" is too large for shifting.\")}n=+n;if(n<0)return this.shiftLeft(-n);var result=this;while(n>=powers2Length){if(result.isZero()||result.isNegative()&&result.isUnit())return result;remQuo=divModAny(result,highestPower2);result=remQuo[1].isNegative()?remQuo[0].prev():remQuo[0];n-=powers2Length-1}remQuo=divModAny(result,powersOfTwo[n]);return remQuo[1].isNegative()?remQuo[0].prev():remQuo[0]};SmallInteger.prototype.shiftRight=BigInteger.prototype.shiftRight;function bitwise(x,y,fn){y=parseValue(y);var xSign=x.isNegative(),ySign=y.isNegative();var xRem=xSign?x.not():x,yRem=ySign?y.not():y;var xDigit=0,yDigit=0;var xDivMod=null,yDivMod=null;var result=[];while(!xRem.isZero()||!yRem.isZero()){xDivMod=divModAny(xRem,highestPower2);xDigit=xDivMod[1].toJSNumber();if(xSign){xDigit=highestPower2-1-xDigit}yDivMod=divModAny(yRem,highestPower2);yDigit=yDivMod[1].toJSNumber();if(ySign){yDigit=highestPower2-1-yDigit}xRem=xDivMod[0];yRem=yDivMod[0];result.push(fn(xDigit,yDigit))}var sum=fn(xSign?1:0,ySign?1:0)!==0?bigInt(-1):bigInt(0);for(var i=result.length-1;i>=0;i-=1){sum=sum.multiply(highestPower2).add(bigInt(result[i]))}return sum}BigInteger.prototype.not=function(){return this.negate().prev()};SmallInteger.prototype.not=BigInteger.prototype.not;BigInteger.prototype.and=function(n){return bitwise(this,n,function(a,b){return a&b})};SmallInteger.prototype.and=BigInteger.prototype.and;BigInteger.prototype.or=function(n){return bitwise(this,n,function(a,b){return a|b})};SmallInteger.prototype.or=BigInteger.prototype.or;BigInteger.prototype.xor=function(n){return bitwise(this,n,function(a,b){return a^b})};SmallInteger.prototype.xor=BigInteger.prototype.xor;var LOBMASK_I=1<<30,LOBMASK_BI=(BASE&-BASE)*(BASE&-BASE)|LOBMASK_I;function roughLOB(n){var v=n.value,x=typeof v===\"number\"?v|LOBMASK_I:v[0]+v[1]*BASE|LOBMASK_BI;return x&-x}function integerLogarithm(value,base){if(base.compareTo(value)<=0){var tmp=integerLogarithm(value,base.square(base));var p=tmp.p;var e=tmp.e;var t=p.multiply(base);return t.compareTo(value)<=0?{p:t,e:e*2+1}:{p:p,e:e*2}}return{p:bigInt(1),e:0}}BigInteger.prototype.bitLength=function(){var n=this;if(n.compareTo(bigInt(0))<0){n=n.negate().subtract(bigInt(1))}if(n.compareTo(bigInt(0))===0){return bigInt(0)}return bigInt(integerLogarithm(n,bigInt(2)).e).add(bigInt(1))};SmallInteger.prototype.bitLength=BigInteger.prototype.bitLength;function max(a,b){a=parseValue(a);b=parseValue(b);return a.greater(b)?a:b}function min(a,b){a=parseValue(a);b=parseValue(b);return a.lesser(b)?a:b}function gcd(a,b){a=parseValue(a).abs();b=parseValue(b).abs();if(a.equals(b))return a;if(a.isZero())return b;if(b.isZero())return a;var c=Integer[1],d,t;while(a.isEven()&&b.isEven()){d=Math.min(roughLOB(a),roughLOB(b));a=a.divide(d);b=b.divide(d);c=c.multiply(d)}while(a.isEven()){a=a.divide(roughLOB(a))}do{while(b.isEven()){b=b.divide(roughLOB(b))}if(a.greater(b)){t=b;b=a;a=t}b=b.subtract(a)}while(!b.isZero());return c.isUnit()?a:a.multiply(c)}function lcm(a,b){a=parseValue(a).abs();b=parseValue(b).abs();return a.divide(gcd(a,b)).multiply(b)}function randBetween(a,b){a=parseValue(a);b=parseValue(b);var low=min(a,b),high=max(a,b);var range=high.subtract(low).add(1);if(range.isSmall)return low.add(Math.floor(Math.random()*range));var length=range.value.length-1;var result=[],restricted=true;for(var i=length;i>=0;i--){var top=restricted?range.value[i]:BASE;var digit=truncate(Math.random()*top);result.unshift(digit);if(digit<top)restricted=false}result=arrayToSmall(result);return low.add(typeof result===\"number\"?new SmallInteger(result):new BigInteger(result,false))}var parseBase=function(text,base){var length=text.length;var i;var absBase=Math.abs(base);for(var i=0;i<length;i++){var c=text[i].toLowerCase();if(c===\"-\")continue;if(/[a-z0-9]/.test(c)){if(/[0-9]/.test(c)&&+c>=absBase){if(c===\"1\"&&absBase===1)continue;throw new Error(c+\" is not a valid digit in base \"+base+\".\")}else if(c.charCodeAt(0)-87>=absBase){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}}}if(2<=base&&base<=36){if(length<=LOG_MAX_INT/Math.log(base)){var result=parseInt(text,base);if(isNaN(result)){throw new Error(c+\" is not a valid digit in base \"+base+\".\")}return new SmallInteger(parseInt(text,base))}}base=parseValue(base);var digits=[];var isNegative=text[0]===\"-\";for(i=isNegative?1:0;i<text.length;i++){var c=text[i].toLowerCase(),charCode=c.charCodeAt(0);if(48<=charCode&&charCode<=57)digits.push(parseValue(c));else if(97<=charCode&&charCode<=122)digits.push(parseValue(c.charCodeAt(0)-87));else if(c===\"<\"){var start=i;do{i++}while(text[i]!==\">\");digits.push(parseValue(text.slice(start+1,i)))}else throw new Error(c+\" is not a valid character\")}return parseBaseFromArray(digits,base,isNegative)};function parseBaseFromArray(digits,base,isNegative){var val=Integer[0],pow=Integer[1],i;for(i=digits.length-1;i>=0;i--){val=val.add(digits[i].times(pow));pow=pow.times(base)}return isNegative?val.negate():val}function stringify(digit){if(digit<=35){return\"0123456789abcdefghijklmnopqrstuvwxyz\".charAt(digit)}return\"<\"+digit+\">\"}function toBase(n,base){base=bigInt(base);if(base.isZero()){if(n.isZero())return{value:[0],isNegative:false};throw new Error(\"Cannot convert nonzero numbers to base 0.\")}if(base.equals(-1)){if(n.isZero())return{value:[0],isNegative:false};if(n.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-n)).map(Array.prototype.valueOf,[1,0])),isNegative:false};var arr=Array.apply(null,Array(+n-1)).map(Array.prototype.valueOf,[0,1]);arr.unshift([1]);return{value:[].concat.apply([],arr),isNegative:false}}var neg=false;if(n.isNegative()&&base.isPositive()){neg=true;n=n.abs()}if(base.equals(1)){if(n.isZero())return{value:[0],isNegative:false};return{value:Array.apply(null,Array(+n)).map(Number.prototype.valueOf,1),isNegative:neg}}var out=[];var left=n,divmod;while(left.isNegative()||left.compareAbs(base)>=0){divmod=left.divmod(base);left=divmod.quotient;var digit=divmod.remainder;if(digit.isNegative()){digit=base.minus(digit).abs();left=left.next()}out.push(digit.toJSNumber())}out.push(left.toJSNumber());return{value:out.reverse(),isNegative:neg}}function toBaseString(n,base){var arr=toBase(n,base);return(arr.isNegative?\"-\":\"\")+arr.value.map(stringify).join(\"\")}BigInteger.prototype.toArray=function(radix){return toBase(this,radix)};SmallInteger.prototype.toArray=function(radix){return toBase(this,radix)};BigInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!==10)return toBaseString(this,radix);var v=this.value,l=v.length,str=String(v[--l]),zeros=\"0000000\",digit;while(--l>=0){digit=String(v[l]);str+=zeros.slice(digit.length)+digit}var sign=this.sign?\"-\":\"\";return sign+str};SmallInteger.prototype.toString=function(radix){if(radix===undefined)radix=10;if(radix!=10)return toBaseString(this,radix);return String(this.value)};BigInteger.prototype.toJSON=SmallInteger.prototype.toJSON=function(){return this.toString()};BigInteger.prototype.valueOf=function(){return parseInt(this.toString(),10)};BigInteger.prototype.toJSNumber=BigInteger.prototype.valueOf;SmallInteger.prototype.valueOf=function(){return this.value};SmallInteger.prototype.toJSNumber=SmallInteger.prototype.valueOf;function parseStringValue(v){if(isPrecise(+v)){var x=+v;if(x===truncate(x))return new SmallInteger(x);throw new Error(\"Invalid integer: \"+v)}var sign=v[0]===\"-\";if(sign)v=v.slice(1);var split=v.split(/e/i);if(split.length>2)throw new Error(\"Invalid integer: \"+split.join(\"e\"));if(split.length===2){var exp=split[1];if(exp[0]===\"+\")exp=exp.slice(1);exp=+exp;if(exp!==truncate(exp)||!isPrecise(exp))throw new Error(\"Invalid integer: \"+exp+\" is not a valid exponent.\");var text=split[0];var decimalPlace=text.indexOf(\".\");if(decimalPlace>=0){exp-=text.length-decimalPlace-1;text=text.slice(0,decimalPlace)+text.slice(decimalPlace+1)}if(exp<0)throw new Error(\"Cannot include negative exponent part for integers\");text+=new Array(exp+1).join(\"0\");v=text}var isValid=/^([0-9][0-9]*)$/.test(v);if(!isValid)throw new Error(\"Invalid integer: \"+v);var r=[],max=v.length,l=LOG_BASE,min=max-l;while(max>0){r.push(+v.slice(min,max));min-=l;if(min<0)min=0;max-=l}trim(r);return new BigInteger(r,sign)}function parseNumberValue(v){if(isPrecise(v)){if(v!==truncate(v))throw new Error(v+\" is not an integer.\");return new SmallInteger(v)}return parseStringValue(v.toString())}function parseValue(v){if(typeof v===\"number\"){return parseNumberValue(v)}if(typeof v===\"string\"){return parseStringValue(v)}return v}for(var i=0;i<1e3;i++){Integer[i]=new SmallInteger(i);if(i>0)Integer[-i]=new SmallInteger(-i)}Integer.one=Integer[1];Integer.zero=Integer[0];Integer.minusOne=Integer[-1];Integer.max=max;Integer.min=min;Integer.gcd=gcd;Integer.lcm=lcm;Integer.isInstance=function(x){return x instanceof BigInteger||x instanceof SmallInteger};Integer.randBetween=randBetween;Integer.fromArray=function(digits,base,isNegative){return parseBaseFromArray(digits.map(parseValue),parseValue(base||10),isNegative)};return Integer}();if(typeof module!==\"undefined\"&&module.hasOwnProperty(\"exports\")){module.exports=bigInt}if(typeof define===\"function\"&&define.amd){define(\"big-integer\",[],function(){return bigInt})}\r\n        return bigInt;\r\n    })(),\r\n    /*\r\n     *  decimal.js v10.2.1\r\n     *  An arbitrary-precision Decimal type for JavaScript.\r\n     *  https://github.com/MikeMcl/decimal.js\r\n     *  Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n     *  MIT Licence\r\n     */\r\n    bigDec: function(n){\"use strict\";var e,i,t,r,s=9e15,o=1e9,u=\"0123456789abcdef\",c=\"2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058\",f=\"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789\",a={precision:20,rounding:4,modulo:1,toExpNeg:-7,toExpPos:21,minE:-s,maxE:s,crypto:!1},h=!0,d=\"[DecimalError] \",l=d+\"Invalid argument: \",p=d+\"Precision limit exceeded\",g=d+\"crypto unavailable\",m=Math.floor,w=Math.pow,v=/^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,N=/^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,b=/^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,E=/^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,x=1e7,y=7,M=c.length-1,q=f.length-1,O={name:\"[object Decimal]\"};function D(n){var e,i,t,r=n.length-1,s=\"\",o=n[0];if(r>0){for(s+=o,e=1;e<r;e++)t=n[e]+\"\",(i=y-t.length)&&(s+=k(i)),s+=t;o=n[e],(i=y-(t=o+\"\").length)&&(s+=k(i))}else if(0===o)return\"0\";for(;o%10==0;)o/=10;return s+o}function F(n,e,i){if(n!==~~n||n<e||n>i)throw Error(l+n)}function A(n,e,i,t){var r,s,o,u;for(s=n[0];s>=10;s/=10)--e;return--e<0?(e+=y,r=0):(r=Math.ceil((e+1)/y),e%=y),s=w(10,y-e),u=n[r]%s|0,null==t?e<3?(0==e?u=u/100|0:1==e&&(u=u/10|0),o=i<4&&99999==u||i>3&&49999==u||5e4==u||0==u):o=(i<4&&u+1==s||i>3&&u+1==s/2)&&(n[r+1]/s/100|0)==w(10,e-2)-1||(u==s/2||0==u)&&0==(n[r+1]/s/100|0):e<4?(0==e?u=u/1e3|0:1==e?u=u/100|0:2==e&&(u=u/10|0),o=(t||i<4)&&9999==u||!t&&i>3&&4999==u):o=((t||i<4)&&u+1==s||!t&&i>3&&u+1==s/2)&&(n[r+1]/s/1e3|0)==w(10,e-3)-1,o}function S(n,e,i){for(var t,r,s=[0],o=0,c=n.length;o<c;){for(r=s.length;r--;)s[r]*=e;for(s[0]+=u.indexOf(n.charAt(o++)),t=0;t<s.length;t++)s[t]>i-1&&(void 0===s[t+1]&&(s[t+1]=0),s[t+1]+=s[t]/i|0,s[t]%=i)}return s.reverse()}O.absoluteValue=O.abs=function(){var n=new this.constructor(this);return n.s<0&&(n.s=1),P(n)},O.ceil=function(){return P(new this.constructor(this),this.e+1,2)},O.comparedTo=O.cmp=function(n){var e,i,t,r,s=this,o=s.d,u=(n=new s.constructor(n)).d,c=s.s,f=n.s;if(!o||!u)return c&&f?c!==f?c:o===u?0:!o^c<0?1:-1:NaN;if(!o[0]||!u[0])return o[0]?c:u[0]?-f:0;if(c!==f)return c;if(s.e!==n.e)return s.e>n.e^c<0?1:-1;for(e=0,i=(t=o.length)<(r=u.length)?t:r;e<i;++e)if(o[e]!==u[e])return o[e]>u[e]^c<0?1:-1;return t===r?0:t>r^c<0?1:-1},O.cosine=O.cos=function(){var n,e,i=this,t=i.constructor;return i.d?i.d[0]?(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t,r=e.d.length;r<32?(i=Math.ceil(r/3),t=(1/z(4,i)).toString()):(i=16,t=\"2.3283064365386962890625e-10\");n.precision+=i,e=J(n,1,e.times(t),new n(1));for(var s=i;s--;){var o=e.times(e);e=o.times(o).minus(o).times(8).plus(1)}return n.precision-=i,e}(t,G(t,i)),t.precision=n,t.rounding=e,P(2==r||3==r?i.neg():i,n,e,!0)):new t(1):new t(NaN)},O.cubeRoot=O.cbrt=function(){var n,e,i,t,r,s,o,u,c,f,a=this,d=a.constructor;if(!a.isFinite()||a.isZero())return new d(a);for(h=!1,(s=a.s*w(a.s*a,1/3))&&Math.abs(s)!=1/0?t=new d(s.toString()):(i=D(a.d),(s=((n=a.e)-i.length+1)%3)&&(i+=1==s||-2==s?\"0\":\"00\"),s=w(i,1/3),n=m((n+1)/3)-(n%3==(n<0?-1:2)),(t=new d(i=s==1/0?\"5e\"+n:(i=s.toExponential()).slice(0,i.indexOf(\"e\")+1)+n)).s=a.s),o=(n=d.precision)+3;;)if(f=(c=(u=t).times(u).times(u)).plus(a),t=Z(f.plus(a).times(u),f.plus(c),o+2,1),D(u.d).slice(0,o)===(i=D(t.d)).slice(0,o)){if(\"9999\"!=(i=i.slice(o-3,o+1))&&(r||\"4999\"!=i)){+i&&(+i.slice(1)||\"5\"!=i.charAt(0))||(P(t,n+1,1),e=!t.times(t).times(t).eq(a));break}if(!r&&(P(u,n+1,0),u.times(u).times(u).eq(a))){t=u;break}o+=4,r=1}return h=!0,P(t,n,d.rounding,e)},O.decimalPlaces=O.dp=function(){var n,e=this.d,i=NaN;if(e){if(i=((n=e.length-1)-m(this.e/y))*y,n=e[n])for(;n%10==0;n/=10)i--;i<0&&(i=0)}return i},O.dividedBy=O.div=function(n){return Z(this,new this.constructor(n))},O.dividedToIntegerBy=O.divToInt=function(n){var e=this.constructor;return P(Z(this,new e(n),0,1,1),e.precision,e.rounding)},O.equals=O.eq=function(n){return 0===this.cmp(n)},O.floor=function(){return P(new this.constructor(this),this.e+1,3)},O.greaterThan=O.gt=function(n){return this.cmp(n)>0},O.greaterThanOrEqualTo=O.gte=function(n){var e=this.cmp(n);return 1==e||0===e},O.hyperbolicCosine=O.cosh=function(){var n,e,i,t,r,s=this,o=s.constructor,u=new o(1);if(!s.isFinite())return new o(s.s?1/0:NaN);if(s.isZero())return u;i=o.precision,t=o.rounding,o.precision=i+Math.max(s.e,s.sd())+4,o.rounding=1,(r=s.d.length)<32?e=(1/z(4,n=Math.ceil(r/3))).toString():(n=16,e=\"2.3283064365386962890625e-10\"),s=J(o,1,s.times(e),new o(1),!0);for(var c,f=n,a=new o(8);f--;)c=s.times(s),s=u.minus(c.times(a.minus(c.times(a))));return P(s,o.precision=i,o.rounding=t,!0)},O.hyperbolicSine=O.sinh=function(){var n,e,i,t,r=this,s=r.constructor;if(!r.isFinite()||r.isZero())return new s(r);if(e=s.precision,i=s.rounding,s.precision=e+Math.max(r.e,r.sd())+4,s.rounding=1,(t=r.d.length)<3)r=J(s,2,r,r,!0);else{n=(n=1.4*Math.sqrt(t))>16?16:0|n,r=J(s,2,r=r.times(1/z(5,n)),r,!0);for(var o,u=new s(5),c=new s(16),f=new s(20);n--;)o=r.times(r),r=r.times(u.plus(o.times(c.times(o).plus(f))))}return s.precision=e,s.rounding=i,P(r,e,i,!0)},O.hyperbolicTangent=O.tanh=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+7,t.rounding=1,Z(i.sinh(),i.cosh(),t.precision=n,t.rounding=e)):new t(i.s)},O.inverseCosine=O.acos=function(){var n,e=this,i=e.constructor,t=e.abs().cmp(1),r=i.precision,s=i.rounding;return-1!==t?0===t?e.isNeg()?U(i,r,s):new i(0):new i(NaN):e.isZero()?U(i,r+4,s).times(.5):(i.precision=r+6,i.rounding=1,e=e.asin(),n=U(i,r+4,s).times(.5),i.precision=r,i.rounding=s,n.minus(e))},O.inverseHyperbolicCosine=O.acosh=function(){var n,e,i=this,t=i.constructor;return i.lte(1)?new t(i.eq(1)?0:NaN):i.isFinite()?(n=t.precision,e=t.rounding,t.precision=n+Math.max(Math.abs(i.e),i.sd())+4,t.rounding=1,h=!1,i=i.times(i).minus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln()):new t(i)},O.inverseHyperbolicSine=O.asinh=function(){var n,e,i=this,t=i.constructor;return!i.isFinite()||i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+2*Math.max(Math.abs(i.e),i.sd())+6,t.rounding=1,h=!1,i=i.times(i).plus(1).sqrt().plus(i),h=!0,t.precision=n,t.rounding=e,i.ln())},O.inverseHyperbolicTangent=O.atanh=function(){var n,e,i,t,r=this,s=r.constructor;return r.isFinite()?r.e>=0?new s(r.abs().eq(1)?r.s/0:r.isZero()?r:NaN):(n=s.precision,e=s.rounding,t=r.sd(),Math.max(t,n)<2*-r.e-1?P(new s(r),n,e,!0):(s.precision=i=t-r.e,r=Z(r.plus(1),new s(1).minus(r),i+n,1),s.precision=n+4,s.rounding=1,r=r.ln(),s.precision=n,s.rounding=e,r.times(.5))):new s(NaN)},O.inverseSine=O.asin=function(){var n,e,i,t,r=this,s=r.constructor;return r.isZero()?new s(r):(e=r.abs().cmp(1),i=s.precision,t=s.rounding,-1!==e?0===e?((n=U(s,i+4,t).times(.5)).s=r.s,n):new s(NaN):(s.precision=i+6,s.rounding=1,r=r.div(new s(1).minus(r.times(r)).sqrt().plus(1)).atan(),s.precision=i,s.rounding=t,r.times(2)))},O.inverseTangent=O.atan=function(){var n,e,i,t,r,s,o,u,c,f=this,a=f.constructor,d=a.precision,l=a.rounding;if(f.isFinite()){if(f.isZero())return new a(f);if(f.abs().eq(1)&&d+4<=q)return(o=U(a,d+4,l).times(.25)).s=f.s,o}else{if(!f.s)return new a(NaN);if(d+4<=q)return(o=U(a,d+4,l).times(.5)).s=f.s,o}for(a.precision=u=d+10,a.rounding=1,n=i=Math.min(28,u/y+2|0);n;--n)f=f.div(f.times(f).plus(1).sqrt().plus(1));for(h=!1,e=Math.ceil(u/y),t=1,c=f.times(f),o=new a(f),r=f;-1!==n;)if(r=r.times(c),s=o.minus(r.div(t+=2)),r=r.times(c),void 0!==(o=s.plus(r.div(t+=2))).d[e])for(n=e;o.d[n]===s.d[n]&&n--;);return i&&(o=o.times(2<<i-1)),h=!0,P(o,a.precision=d,a.rounding=l,!0)},O.isFinite=function(){return!!this.d},O.isInteger=O.isInt=function(){return!!this.d&&m(this.e/y)>this.d.length-2},O.isNaN=function(){return!this.s},O.isNegative=O.isNeg=function(){return this.s<0},O.isPositive=O.isPos=function(){return this.s>0},O.isZero=function(){return!!this.d&&0===this.d[0]},O.lessThan=O.lt=function(n){return this.cmp(n)<0},O.lessThanOrEqualTo=O.lte=function(n){return this.cmp(n)<1},O.logarithm=O.log=function(n){var e,i,t,r,s,o,u,c,f=this.constructor,a=f.precision,d=f.rounding;if(null==n)n=new f(10),e=!0;else{if(i=(n=new f(n)).d,n.s<0||!i||!i[0]||n.eq(1))return new f(NaN);e=n.eq(10)}if(i=this.d,this.s<0||!i||!i[0]||this.eq(1))return new f(i&&!i[0]?-1/0:1!=this.s?NaN:i?0:1/0);if(e)if(i.length>1)s=!0;else{for(r=i[0];r%10==0;)r/=10;s=1!==r}if(h=!1,o=V(this,u=a+5),t=e?T(f,u+10):V(n,u),A((c=Z(o,t,u,1)).d,r=a,d))do{if(o=V(this,u+=10),t=e?T(f,u+10):V(n,u),c=Z(o,t,u,1),!s){+D(c.d).slice(r+1,r+15)+1==1e14&&(c=P(c,a+1,0));break}}while(A(c.d,r+=10,d));return h=!0,P(c,a,d)},O.minus=O.sub=function(n){var e,i,t,r,s,o,u,c,f,a,d,l,p=this,g=p.constructor;if(n=new g(n),!p.d||!n.d)return p.s&&n.s?p.d?n.s=-n.s:n=new g(n.d||p.s!==n.s?p:NaN):n=new g(NaN),n;if(p.s!=n.s)return n.s=-n.s,p.plus(n);if(f=p.d,l=n.d,u=g.precision,c=g.rounding,!f[0]||!l[0]){if(l[0])n.s=-n.s;else{if(!f[0])return new g(3===c?-0:0);n=new g(p)}return h?P(n,u,c):n}if(i=m(n.e/y),a=m(p.e/y),f=f.slice(),s=a-i){for((d=s<0)?(e=f,s=-s,o=l.length):(e=l,i=a,o=f.length),s>(t=Math.max(Math.ceil(u/y),o)+2)&&(s=t,e.length=1),e.reverse(),t=s;t--;)e.push(0);e.reverse()}else{for((d=(t=f.length)<(o=l.length))&&(o=t),t=0;t<o;t++)if(f[t]!=l[t]){d=f[t]<l[t];break}s=0}for(d&&(e=f,f=l,l=e,n.s=-n.s),o=f.length,t=l.length-o;t>0;--t)f[o++]=0;for(t=l.length;t>s;){if(f[--t]<l[t]){for(r=t;r&&0===f[--r];)f[r]=x-1;--f[r],f[t]+=x}f[t]-=l[t]}for(;0===f[--o];)f.pop();for(;0===f[0];f.shift())--i;return f[0]?(n.d=f,n.e=L(f,i),h?P(n,u,c):n):new g(3===c?-0:0)},O.modulo=O.mod=function(n){var e,i=this,t=i.constructor;return n=new t(n),!i.d||!n.s||n.d&&!n.d[0]?new t(NaN):!n.d||i.d&&!i.d[0]?P(new t(i),t.precision,t.rounding):(h=!1,9==t.modulo?(e=Z(i,n.abs(),0,3,1)).s*=n.s:e=Z(i,n,0,t.modulo,1),e=e.times(n),h=!0,i.minus(e))},O.naturalExponential=O.exp=function(){return B(this)},O.naturalLogarithm=O.ln=function(){return V(this)},O.negated=O.neg=function(){var n=new this.constructor(this);return n.s=-n.s,P(n)},O.plus=O.add=function(n){var e,i,t,r,s,o,u,c,f,a,d=this,l=d.constructor;if(n=new l(n),!d.d||!n.d)return d.s&&n.s?d.d||(n=new l(n.d||d.s===n.s?d:NaN)):n=new l(NaN),n;if(d.s!=n.s)return n.s=-n.s,d.minus(n);if(f=d.d,a=n.d,u=l.precision,c=l.rounding,!f[0]||!a[0])return a[0]||(n=new l(d)),h?P(n,u,c):n;if(s=m(d.e/y),t=m(n.e/y),f=f.slice(),r=s-t){for(r<0?(i=f,r=-r,o=a.length):(i=a,t=s,o=f.length),r>(o=(s=Math.ceil(u/y))>o?s+1:o+1)&&(r=o,i.length=1),i.reverse();r--;)i.push(0);i.reverse()}for((o=f.length)-(r=a.length)<0&&(r=o,i=a,a=f,f=i),e=0;r;)e=(f[--r]=f[r]+a[r]+e)/x|0,f[r]%=x;for(e&&(f.unshift(e),++t),o=f.length;0==f[--o];)f.pop();return n.d=f,n.e=L(f,t),h?P(n,u,c):n},O.precision=O.sd=function(n){var e,i=this;if(void 0!==n&&n!==!!n&&1!==n&&0!==n)throw Error(l+n);return i.d?(e=_(i.d),n&&i.e+1>e&&(e=i.e+1)):e=NaN,e},O.round=function(){var n=this,e=n.constructor;return P(new e(n),n.e+1,e.rounding)},O.sine=O.sin=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+Math.max(i.e,i.sd())+y,t.rounding=1,i=function(n,e){var i,t=e.d.length;if(t<3)return J(n,2,e,e);i=(i=1.4*Math.sqrt(t))>16?16:0|i,e=e.times(1/z(5,i)),e=J(n,2,e,e);for(var r,s=new n(5),o=new n(16),u=new n(20);i--;)r=e.times(e),e=e.times(s.plus(r.times(o.times(r).minus(u))));return e}(t,G(t,i)),t.precision=n,t.rounding=e,P(r>2?i.neg():i,n,e,!0)):new t(NaN)},O.squareRoot=O.sqrt=function(){var n,e,i,t,r,s,o=this,u=o.d,c=o.e,f=o.s,a=o.constructor;if(1!==f||!u||!u[0])return new a(!f||f<0&&(!u||u[0])?NaN:u?o:1/0);for(h=!1,0==(f=Math.sqrt(+o))||f==1/0?(((e=D(u)).length+c)%2==0&&(e+=\"0\"),f=Math.sqrt(e),c=m((c+1)/2)-(c<0||c%2),t=new a(e=f==1/0?\"5e\"+c:(e=f.toExponential()).slice(0,e.indexOf(\"e\")+1)+c)):t=new a(f.toString()),i=(c=a.precision)+3;;)if(t=(s=t).plus(Z(o,s,i+2,1)).times(.5),D(s.d).slice(0,i)===(e=D(t.d)).slice(0,i)){if(\"9999\"!=(e=e.slice(i-3,i+1))&&(r||\"4999\"!=e)){+e&&(+e.slice(1)||\"5\"!=e.charAt(0))||(P(t,c+1,1),n=!t.times(t).eq(o));break}if(!r&&(P(s,c+1,0),s.times(s).eq(o))){t=s;break}i+=4,r=1}return h=!0,P(t,c,a.rounding,n)},O.tangent=O.tan=function(){var n,e,i=this,t=i.constructor;return i.isFinite()?i.isZero()?new t(i):(n=t.precision,e=t.rounding,t.precision=n+10,t.rounding=1,(i=i.sin()).s=1,i=Z(i,new t(1).minus(i.times(i)).sqrt(),n+10,0),t.precision=n,t.rounding=e,P(2==r||4==r?i.neg():i,n,e,!0)):new t(NaN)},O.times=O.mul=function(n){var e,i,t,r,s,o,u,c,f,a=this,d=a.constructor,l=a.d,p=(n=new d(n)).d;if(n.s*=a.s,!(l&&l[0]&&p&&p[0]))return new d(!n.s||l&&!l[0]&&!p||p&&!p[0]&&!l?NaN:l&&p?0*n.s:n.s/0);for(i=m(a.e/y)+m(n.e/y),(c=l.length)<(f=p.length)&&(s=l,l=p,p=s,o=c,c=f,f=o),s=[],t=o=c+f;t--;)s.push(0);for(t=f;--t>=0;){for(e=0,r=c+t;r>t;)u=s[r]+p[t]*l[r-t-1]+e,s[r--]=u%x|0,e=u/x|0;s[r]=(s[r]+e)%x|0}for(;!s[--o];)s.pop();return e?++i:s.shift(),n.d=s,n.e=L(s,i),h?P(n,d.precision,d.rounding):n},O.toBinary=function(n,e){return K(this,2,n,e)},O.toDecimalPlaces=O.toDP=function(n,e){var i=this,t=i.constructor;return i=new t(i),void 0===n?i:(F(n,0,o),void 0===e?e=t.rounding:F(e,0,8),P(i,n+i.e+1,e))},O.toExponential=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,!0):(F(n,0,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n+1,e),!0,n+1)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toFixed=function(n,e){var i,t,r=this,s=r.constructor;return void 0===n?i=R(r):(F(n,0,o),void 0===e?e=s.rounding:F(e,0,8),i=R(t=P(new s(r),n+r.e+1,e),!1,n+t.e+1)),r.isNeg()&&!r.isZero()?\"-\"+i:i},O.toFraction=function(n){var e,i,t,r,s,o,u,c,f,a,d,p,g=this,m=g.d,v=g.constructor;if(!m)return new v(g);if(f=i=new v(1),t=c=new v(0),o=(s=(e=new v(t)).e=_(m)-g.e-1)%y,e.d[0]=w(10,o<0?y+o:o),null==n)n=s>0?e:f;else{if(!(u=new v(n)).isInt()||u.lt(f))throw Error(l+u);n=u.gt(e)?s>0?e:f:u}for(h=!1,u=new v(D(m)),a=v.precision,v.precision=s=m.length*y*2;d=Z(u,e,0,1,1),1!=(r=i.plus(d.times(t))).cmp(n);)i=t,t=r,r=f,f=c.plus(d.times(r)),c=r,r=e,e=u.minus(d.times(r)),u=r;return r=Z(n.minus(i),t,0,1,1),c=c.plus(r.times(f)),i=i.plus(r.times(t)),c.s=f.s=g.s,p=Z(f,t,s,1).minus(g).abs().cmp(Z(c,i,s,1).minus(g).abs())<1?[f,t]:[c,i],v.precision=a,h=!0,p},O.toHexadecimal=O.toHex=function(n,e){return K(this,16,n,e)},O.toNearest=function(n,e){var i=this,t=i.constructor;if(i=new t(i),null==n){if(!i.d)return i;n=new t(1),e=t.rounding}else{if(n=new t(n),void 0===e?e=t.rounding:F(e,0,8),!i.d)return n.s?i:n;if(!n.d)return n.s&&(n.s=i.s),n}return n.d[0]?(h=!1,i=Z(i,n,0,e,1).times(n),h=!0,P(i)):(n.s=i.s,i=n),i},O.toNumber=function(){return+this},O.toOctal=function(n,e){return K(this,8,n,e)},O.toPower=O.pow=function(n){var e,i,t,r,s,o,u=this,c=u.constructor,f=+(n=new c(n));if(!(u.d&&n.d&&u.d[0]&&n.d[0]))return new c(w(+u,f));if((u=new c(u)).eq(1))return u;if(t=c.precision,s=c.rounding,n.eq(1))return P(u,t,s);if((e=m(n.e/y))>=n.d.length-1&&(i=f<0?-f:f)<=9007199254740991)return r=C(c,u,i,t),n.s<0?new c(1).div(r):P(r,t,s);if((o=u.s)<0){if(e<n.d.length-1)return new c(NaN);if(0==(1&n.d[e])&&(o=1),0==u.e&&1==u.d[0]&&1==u.d.length)return u.s=o,u}return(e=0!=(i=w(+u,f))&&isFinite(i)?new c(i+\"\").e:m(f*(Math.log(\"0.\"+D(u.d))/Math.LN10+u.e+1)))>c.maxE+1||e<c.minE-1?new c(e>0?o/0:0):(h=!1,c.rounding=u.s=1,i=Math.min(12,(e+\"\").length),(r=B(n.times(V(u,t+i)),t)).d&&A((r=P(r,t+5,1)).d,t,s)&&(e=t+10,+D((r=P(B(n.times(V(u,e+i)),e),e+5,1)).d).slice(t+1,t+15)+1==1e14&&(r=P(r,t+1,0))),r.s=o,h=!0,c.rounding=s,P(r,t,s))},O.toPrecision=function(n,e){var i,t=this,r=t.constructor;return void 0===n?i=R(t,t.e<=r.toExpNeg||t.e>=r.toExpPos):(F(n,1,o),void 0===e?e=r.rounding:F(e,0,8),i=R(t=P(new r(t),n,e),n<=t.e||t.e<=r.toExpNeg,n)),t.isNeg()&&!t.isZero()?\"-\"+i:i},O.toSignificantDigits=O.toSD=function(n,e){var i=this.constructor;return void 0===n?(n=i.precision,e=i.rounding):(F(n,1,o),void 0===e?e=i.rounding:F(e,0,8)),P(new i(this),n,e)},O.toString=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()&&!n.isZero()?\"-\"+i:i},O.truncated=O.trunc=function(){return P(new this.constructor(this),this.e+1,1)},O.valueOf=O.toJSON=function(){var n=this,e=n.constructor,i=R(n,n.e<=e.toExpNeg||n.e>=e.toExpPos);return n.isNeg()?\"-\"+i:i};var Z=function(){function n(n,e,i){var t,r=0,s=n.length;for(n=n.slice();s--;)t=n[s]*e+r,n[s]=t%i|0,r=t/i|0;return r&&n.unshift(r),n}function e(n,e,i,t){var r,s;if(i!=t)s=i>t?1:-1;else for(r=s=0;r<i;r++)if(n[r]!=e[r]){s=n[r]>e[r]?1:-1;break}return s}function t(n,e,i,t){for(var r=0;i--;)n[i]-=r,r=n[i]<e[i]?1:0,n[i]=r*t+n[i]-e[i];for(;!n[0]&&n.length>1;)n.shift()}return function(r,s,o,u,c,f){var a,h,d,l,p,g,w,v,N,b,E,M,q,O,D,F,A,S,Z,R,L=r.constructor,T=r.s==s.s?1:-1,U=r.d,_=s.d;if(!(U&&U[0]&&_&&_[0]))return new L(r.s&&s.s&&(U?!_||U[0]!=_[0]:_)?U&&0==U[0]||!_?0*T:T/0:NaN);for(f?(p=1,h=r.e-s.e):(f=x,p=y,h=m(r.e/p)-m(s.e/p)),Z=_.length,A=U.length,b=(N=new L(T)).d=[],d=0;_[d]==(U[d]||0);d++);if(_[d]>(U[d]||0)&&h--,null==o?(O=o=L.precision,u=L.rounding):O=c?o+(r.e-s.e)+1:o,O<0)b.push(1),g=!0;else{if(O=O/p+2|0,d=0,1==Z){for(l=0,_=_[0],O++;(d<A||l)&&O--;d++)D=l*f+(U[d]||0),b[d]=D/_|0,l=D%_|0;g=l||d<A}else{for((l=f/(_[0]+1)|0)>1&&(_=n(_,l,f),U=n(U,l,f),Z=_.length,A=U.length),F=Z,M=(E=U.slice(0,Z)).length;M<Z;)E[M++]=0;(R=_.slice()).unshift(0),S=_[0],_[1]>=f/2&&++S;do{l=0,(a=e(_,E,Z,M))<0?(q=E[0],Z!=M&&(q=q*f+(E[1]||0)),(l=q/S|0)>1?(l>=f&&(l=f-1),1==(a=e(w=n(_,l,f),E,v=w.length,M=E.length))&&(l--,t(w,Z<v?R:_,v,f))):(0==l&&(a=l=1),w=_.slice()),(v=w.length)<M&&w.unshift(0),t(E,w,M,f),-1==a&&(a=e(_,E,Z,M=E.length))<1&&(l++,t(E,Z<M?R:_,M,f)),M=E.length):0===a&&(l++,E=[0]),b[d++]=l,a&&E[0]?E[M++]=U[F]||0:(E=[U[F]],M=1)}while((F++<A||void 0!==E[0])&&O--);g=void 0!==E[0]}b[0]||b.shift()}if(1==p)N.e=h,i=g;else{for(d=1,l=b[0];l>=10;l/=10)d++;N.e=d+h*p-1,P(N,c?o+N.e+1:o,u,g)}return N}}();function P(n,e,i,t){var r,s,o,u,c,f,a,d,l,p=n.constructor;n:if(null!=e){if(!(d=n.d))return n;for(r=1,u=d[0];u>=10;u/=10)r++;if((s=e-r)<0)s+=y,o=e,c=(a=d[l=0])/w(10,r-o-1)%10|0;else if((l=Math.ceil((s+1)/y))>=(u=d.length)){if(!t)break n;for(;u++<=l;)d.push(0);a=c=0,r=1,o=(s%=y)-y+1}else{for(a=u=d[l],r=1;u>=10;u/=10)r++;c=(o=(s%=y)-y+r)<0?0:a/w(10,r-o-1)%10|0}if(t=t||e<0||void 0!==d[l+1]||(o<0?a:a%w(10,r-o-1)),f=i<4?(c||t)&&(0==i||i==(n.s<0?3:2)):c>5||5==c&&(4==i||t||6==i&&(s>0?o>0?a/w(10,r-o):0:d[l-1])%10&1||i==(n.s<0?8:7)),e<1||!d[0])return d.length=0,f?(e-=n.e+1,d[0]=w(10,(y-e%y)%y),n.e=-e||0):d[0]=n.e=0,n;if(0==s?(d.length=l,u=1,l--):(d.length=l+1,u=w(10,y-s),d[l]=o>0?(a/w(10,r-o)%w(10,o)|0)*u:0),f)for(;;){if(0==l){for(s=1,o=d[0];o>=10;o/=10)s++;for(o=d[0]+=u,u=1;o>=10;o/=10)u++;s!=u&&(n.e++,d[0]==x&&(d[0]=1));break}if(d[l]+=u,d[l]!=x)break;d[l--]=0,u=1}for(s=d.length;0===d[--s];)d.pop()}return h&&(n.e>p.maxE?(n.d=null,n.e=NaN):n.e<p.minE&&(n.e=0,n.d=[0])),n}function R(n,e,i){if(!n.isFinite())return j(n);var t,r=n.e,s=D(n.d),o=s.length;return e?(i&&(t=i-o)>0?s=s.charAt(0)+\".\"+s.slice(1)+k(t):o>1&&(s=s.charAt(0)+\".\"+s.slice(1)),s=s+(n.e<0?\"e\":\"e+\")+n.e):r<0?(s=\"0.\"+k(-r-1)+s,i&&(t=i-o)>0&&(s+=k(t))):r>=o?(s+=k(r+1-o),i&&(t=i-r-1)>0&&(s=s+\".\"+k(t))):((t=r+1)<o&&(s=s.slice(0,t)+\".\"+s.slice(t)),i&&(t=i-o)>0&&(r+1===o&&(s+=\".\"),s+=k(t))),s}function L(n,e){var i=n[0];for(e*=y;i>=10;i/=10)e++;return e}function T(n,e,i){if(e>M)throw h=!0,i&&(n.precision=i),Error(p);return P(new n(c),e,1,!0)}function U(n,e,i){if(e>q)throw Error(p);return P(new n(f),e,i,!0)}function _(n){var e=n.length-1,i=e*y+1;if(e=n[e]){for(;e%10==0;e/=10)i--;for(e=n[0];e>=10;e/=10)i++}return i}function k(n){for(var e=\"\";n--;)e+=\"0\";return e}function C(n,e,i,t){var r,s=new n(1),o=Math.ceil(t/y+4);for(h=!1;;){if(i%2&&Q((s=s.times(e)).d,o)&&(r=!0),0===(i=m(i/2))){i=s.d.length-1,r&&0===s.d[i]&&++s.d[i];break}Q((e=e.times(e)).d,o)}return h=!0,s}function I(n){return 1&n.d[n.d.length-1]}function H(n,e,i){for(var t,r=new n(e[0]),s=0;++s<e.length;){if(!(t=new n(e[s])).s){r=t;break}r[i](t)&&(r=t)}return r}function B(n,e){var i,t,r,s,o,u,c,f=0,a=0,d=0,l=n.constructor,p=l.rounding,g=l.precision;if(!n.d||!n.d[0]||n.e>17)return new l(n.d?n.d[0]?n.s<0?0:1/0:1:n.s?n.s<0?0:n:NaN);for(null==e?(h=!1,c=g):c=e,u=new l(.03125);n.e>-2;)n=n.times(u),d+=5;for(c+=t=Math.log(w(2,d))/Math.LN10*2+5|0,i=s=o=new l(1),l.precision=c;;){if(s=P(s.times(n),c,1),i=i.times(++a),D((u=o.plus(Z(s,i,c,1))).d).slice(0,c)===D(o.d).slice(0,c)){for(r=d;r--;)o=P(o.times(o),c,1);if(null!=e)return l.precision=g,o;if(!(f<3&&A(o.d,c-t,p,f)))return P(o,l.precision=g,p,h=!0);l.precision=c+=10,i=s=u=new l(1),a=0,f++}o=u}}function V(n,e){var i,t,r,s,o,u,c,f,a,d,l,p=1,g=n,m=g.d,w=g.constructor,v=w.rounding,N=w.precision;if(g.s<0||!m||!m[0]||!g.e&&1==m[0]&&1==m.length)return new w(m&&!m[0]?-1/0:1!=g.s?NaN:m?0:g);if(null==e?(h=!1,a=N):a=e,w.precision=a+=10,t=(i=D(m)).charAt(0),!(Math.abs(s=g.e)<15e14))return f=T(w,a+2,N).times(s+\"\"),g=V(new w(t+\".\"+i.slice(1)),a-10).plus(f),w.precision=N,null==e?P(g,N,v,h=!0):g;for(;t<7&&1!=t||1==t&&i.charAt(1)>3;)t=(i=D((g=g.times(n)).d)).charAt(0),p++;for(s=g.e,t>1?(g=new w(\"0.\"+i),s++):g=new w(t+\".\"+i.slice(1)),d=g,c=o=g=Z(g.minus(1),g.plus(1),a,1),l=P(g.times(g),a,1),r=3;;){if(o=P(o.times(l),a,1),D((f=c.plus(Z(o,new w(r),a,1))).d).slice(0,a)===D(c.d).slice(0,a)){if(c=c.times(2),0!==s&&(c=c.plus(T(w,a+2,N).times(s+\"\"))),c=Z(c,new w(p),a,1),null!=e)return w.precision=N,c;if(!A(c.d,a-10,v,u))return P(c,w.precision=N,v,h=!0);w.precision=a+=10,f=o=g=Z(d.minus(1),d.plus(1),a,1),l=P(g.times(g),a,1),r=u=1}c=f,r+=2}}function j(n){return String(n.s*n.s/0)}function $(n,e){var i,t,r;for((i=e.indexOf(\".\"))>-1&&(e=e.replace(\".\",\"\")),(t=e.search(/e/i))>0?(i<0&&(i=t),i+=+e.slice(t+1),e=e.substring(0,t)):i<0&&(i=e.length),t=0;48===e.charCodeAt(t);t++);for(r=e.length;48===e.charCodeAt(r-1);--r);if(e=e.slice(t,r)){if(r-=t,n.e=i=i-t-1,n.d=[],t=(i+1)%y,i<0&&(t+=y),t<r){for(t&&n.d.push(+e.slice(0,t)),r-=y;t<r;)n.d.push(+e.slice(t,t+=y));e=e.slice(t),t=y-e.length}else t-=r;for(;t--;)e+=\"0\";n.d.push(+e),h&&(n.e>n.constructor.maxE?(n.d=null,n.e=NaN):n.e<n.constructor.minE&&(n.e=0,n.d=[0]))}else n.e=0,n.d=[0];return n}function W(n,i){var t,r,s,o,u,c,f,a,d;if(\"Infinity\"===i||\"NaN\"===i)return+i||(n.s=NaN),n.e=NaN,n.d=null,n;if(N.test(i))t=16,i=i.toLowerCase();else if(v.test(i))t=2;else{if(!b.test(i))throw Error(l+i);t=8}for((o=i.search(/p/i))>0?(f=+i.slice(o+1),i=i.substring(2,o)):i=i.slice(2),u=(o=i.indexOf(\".\"))>=0,r=n.constructor,u&&(o=(c=(i=i.replace(\".\",\"\")).length)-o,s=C(r,new r(t),o,2*o)),o=d=(a=S(i,t,x)).length-1;0===a[o];--o)a.pop();return o<0?new r(0*n.s):(n.e=L(a,d),n.d=a,h=!1,u&&(n=Z(n,s,4*c)),f&&(n=n.times(Math.abs(f)<54?w(2,f):e.pow(2,f))),h=!0,n)}function J(n,e,i,t,r){var s,o,u,c,f=n.precision,a=Math.ceil(f/y);for(h=!1,c=i.times(i),u=new n(t);;){if(o=Z(u.times(c),new n(e++*e++),f,1),u=r?t.plus(o):t.minus(o),t=Z(o.times(c),new n(e++*e++),f,1),void 0!==(o=u.plus(t)).d[a]){for(s=a;o.d[s]===u.d[s]&&s--;);if(-1==s)break}s=u,u=t,t=o,o=s,0}return h=!0,o.d.length=a+1,o}function z(n,e){for(var i=n;--e;)i*=n;return i}function G(n,e){var i,t=e.s<0,s=U(n,n.precision,1),o=s.times(.5);if((e=e.abs()).lte(o))return r=t?4:1,e;if((i=e.divToInt(s)).isZero())r=t?3:2;else{if((e=e.minus(i.times(s))).lte(o))return r=I(i)?t?2:3:t?4:1,e;r=I(i)?t?1:4:t?3:2}return e.minus(s).abs()}function K(n,e,t,r){var s,c,f,a,h,d,l,p,g,m=n.constructor,w=void 0!==t;if(w?(F(t,1,o),void 0===r?r=m.rounding:F(r,0,8)):(t=m.precision,r=m.rounding),n.isFinite()){for(w?(s=2,16==e?t=4*t-3:8==e&&(t=3*t-2)):s=e,(f=(l=R(n)).indexOf(\".\"))>=0&&(l=l.replace(\".\",\"\"),(g=new m(1)).e=l.length-f,g.d=S(R(g),10,s),g.e=g.d.length),c=h=(p=S(l,10,s)).length;0==p[--h];)p.pop();if(p[0]){if(f<0?c--:((n=new m(n)).d=p,n.e=c,p=(n=Z(n,g,t,r,0,s)).d,c=n.e,d=i),f=p[t],a=s/2,d=d||void 0!==p[t+1],d=r<4?(void 0!==f||d)&&(0===r||r===(n.s<0?3:2)):f>a||f===a&&(4===r||d||6===r&&1&p[t-1]||r===(n.s<0?8:7)),p.length=t,d)for(;++p[--t]>s-1;)p[t]=0,t||(++c,p.unshift(1));for(h=p.length;!p[h-1];--h);for(f=0,l=\"\";f<h;f++)l+=u.charAt(p[f]);if(w){if(h>1)if(16==e||8==e){for(f=16==e?4:3,--h;h%f;h++)l+=\"0\";for(h=(p=S(l,s,e)).length;!p[h-1];--h);for(f=1,l=\"1.\";f<h;f++)l+=u.charAt(p[f])}else l=l.charAt(0)+\".\"+l.slice(1);l=l+(c<0?\"p\":\"p+\")+c}else if(c<0){for(;++c;)l=\"0\"+l;l=\"0.\"+l}else if(++c>h)for(c-=h;c--;)l+=\"0\";else c<h&&(l=l.slice(0,c)+\".\"+l.slice(c))}else l=w?\"0p+0\":\"0\";l=(16==e?\"0x\":2==e?\"0b\":8==e?\"0o\":\"\")+l}else l=j(n);return n.s<0?\"-\"+l:l}function Q(n,e){if(n.length>e)return n.length=e,!0}function X(n){return new this(n).abs()}function Y(n){return new this(n).acos()}function nn(n){return new this(n).acosh()}function en(n,e){return new this(n).plus(e)}function tn(n){return new this(n).asin()}function rn(n){return new this(n).asinh()}function sn(n){return new this(n).atan()}function on(n){return new this(n).atanh()}function un(n,e){n=new this(n),e=new this(e);var i,t=this.precision,r=this.rounding,s=t+4;return n.s&&e.s?n.d||e.d?!e.d||n.isZero()?(i=e.s<0?U(this,t,r):new this(0)).s=n.s:!n.d||e.isZero()?(i=U(this,s,1).times(.5)).s=n.s:e.s<0?(this.precision=s,this.rounding=1,i=this.atan(Z(n,e,s,1)),e=U(this,s,1),this.precision=t,this.rounding=r,i=n.s<0?i.minus(e):i.plus(e)):i=this.atan(Z(n,e,s,1)):(i=U(this,s,1).times(e.s>0?.25:.75)).s=n.s:i=new this(NaN),i}function cn(n){return new this(n).cbrt()}function fn(n){return P(n=new this(n),n.e+1,2)}function an(n){if(!n||\"object\"!=typeof n)throw Error(d+\"Object expected\");var e,i,t,r=!0===n.defaults,u=[\"precision\",1,o,\"rounding\",0,8,\"toExpNeg\",-s,0,\"toExpPos\",0,s,\"maxE\",0,s,\"minE\",-s,0,\"modulo\",0,9];for(e=0;e<u.length;e+=3)if(i=u[e],r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!(m(t)===t&&t>=u[e+1]&&t<=u[e+2]))throw Error(l+i+\": \"+t);this[i]=t}if(i=\"crypto\",r&&(this[i]=a[i]),void 0!==(t=n[i])){if(!0!==t&&!1!==t&&0!==t&&1!==t)throw Error(l+i+\": \"+t);if(t){if(\"undefined\"==typeof crypto||!crypto||!crypto.getRandomValues&&!crypto.randomBytes)throw Error(g);this[i]=!0}else this[i]=!1}return this}function hn(n){return new this(n).cos()}function dn(n){return new this(n).cosh()}function ln(n,e){return new this(n).div(e)}function pn(n){return new this(n).exp()}function gn(n){return P(n=new this(n),n.e+1,3)}function mn(){var n,e,i=new this(0);for(h=!1,n=0;n<arguments.length;)if((e=new this(arguments[n++])).d)i.d&&(i=i.plus(e.times(e)));else{if(e.s)return h=!0,new this(1/0);i=e}return h=!0,i.sqrt()}function wn(n){return n instanceof e||n&&\"[object Decimal]\"===n.name||!1}function vn(n){return new this(n).ln()}function Nn(n,e){return new this(n).log(e)}function bn(n){return new this(n).log(2)}function En(n){return new this(n).log(10)}function xn(){return H(this,arguments,\"lt\")}function yn(){return H(this,arguments,\"gt\")}function Mn(n,e){return new this(n).mod(e)}function qn(n,e){return new this(n).mul(e)}function On(n,e){return new this(n).pow(e)}function Dn(n){var e,i,t,r,s=0,u=new this(1),c=[];if(void 0===n?n=this.precision:F(n,1,o),t=Math.ceil(n/y),this.crypto)if(crypto.getRandomValues)for(e=crypto.getRandomValues(new Uint32Array(t));s<t;)(r=e[s])>=429e7?e[s]=crypto.getRandomValues(new Uint32Array(1))[0]:c[s++]=r%1e7;else{if(!crypto.randomBytes)throw Error(g);for(e=crypto.randomBytes(t*=4);s<t;)(r=e[s]+(e[s+1]<<8)+(e[s+2]<<16)+((127&e[s+3])<<24))>=214e7?crypto.randomBytes(4).copy(e,s):(c.push(r%1e7),s+=4);s=t/4}else for(;s<t;)c[s++]=1e7*Math.random()|0;for(t=c[--s],n%=y,t&&n&&(r=w(10,y-n),c[s]=(t/r|0)*r);0===c[s];s--)c.pop();if(s<0)i=0,c=[0];else{for(i=-1;0===c[0];i-=y)c.shift();for(t=1,r=c[0];r>=10;r/=10)t++;t<y&&(i-=y-t)}return u.e=i,u.d=c,u}function Fn(n){return P(n=new this(n),n.e+1,this.rounding)}function An(n){return(n=new this(n)).d?n.d[0]?n.s:0*n.s:n.s||NaN}function Sn(n){return new this(n).sin()}function Zn(n){return new this(n).sinh()}function Pn(n){return new this(n).sqrt()}function Rn(n,e){return new this(n).sub(e)}function Ln(n){return new this(n).tan()}function Tn(n){return new this(n).tanh()}function Un(n){return P(n=new this(n),n.e+1,1)}return(e=function n(e){var i,t,r;function s(n){var e,i,t,r=this;if(!(r instanceof s))return new s(n);if(r.constructor=s,n instanceof s)return r.s=n.s,void(h?!n.d||n.e>s.maxE?(r.e=NaN,r.d=null):n.e<s.minE?(r.e=0,r.d=[0]):(r.e=n.e,r.d=n.d.slice()):(r.e=n.e,r.d=n.d?n.d.slice():n.d));if(\"number\"==(t=typeof n)){if(0===n)return r.s=1/n<0?-1:1,r.e=0,void(r.d=[0]);if(n<0?(n=-n,r.s=-1):r.s=1,n===~~n&&n<1e7){for(e=0,i=n;i>=10;i/=10)e++;return void(h?e>s.maxE?(r.e=NaN,r.d=null):e<s.minE?(r.e=0,r.d=[0]):(r.e=e,r.d=[n]):(r.e=e,r.d=[n]))}return 0*n!=0?(n||(r.s=NaN),r.e=NaN,void(r.d=null)):$(r,n.toString())}if(\"string\"!==t)throw Error(l+n);return 45===(i=n.charCodeAt(0))?(n=n.slice(1),r.s=-1):(43===i&&(n=n.slice(1)),r.s=1),E.test(n)?$(r,n):W(r,n)}if(s.prototype=O,s.ROUND_UP=0,s.ROUND_DOWN=1,s.ROUND_CEIL=2,s.ROUND_FLOOR=3,s.ROUND_HALF_UP=4,s.ROUND_HALF_DOWN=5,s.ROUND_HALF_EVEN=6,s.ROUND_HALF_CEIL=7,s.ROUND_HALF_FLOOR=8,s.EUCLID=9,s.config=s.set=an,s.clone=n,s.isDecimal=wn,s.abs=X,s.acos=Y,s.acosh=nn,s.add=en,s.asin=tn,s.asinh=rn,s.atan=sn,s.atanh=on,s.atan2=un,s.cbrt=cn,s.ceil=fn,s.cos=hn,s.cosh=dn,s.div=ln,s.exp=pn,s.floor=gn,s.hypot=mn,s.ln=vn,s.log=Nn,s.log10=En,s.log2=bn,s.max=xn,s.min=yn,s.mod=Mn,s.mul=qn,s.pow=On,s.random=Dn,s.round=Fn,s.sign=An,s.sin=Sn,s.sinh=Zn,s.sqrt=Pn,s.sub=Rn,s.tan=Ln,s.tanh=Tn,s.trunc=Un,void 0===e&&(e={}),e&&!0!==e.defaults)for(r=[\"precision\",\"rounding\",\"toExpNeg\",\"toExpPos\",\"maxE\",\"minE\",\"modulo\",\"crypto\"],i=0;i<r.length;)e.hasOwnProperty(t=r[i++])||(e[t]=this[t]);return s.config(e),s}(a)).default=e.Decimal=e,c=new e(c),f=new e(f),\"function\"==typeof define&&define.amd?define(function(){return e}):\"undefined\"!=typeof module&&module.exports?(\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator&&(O[Symbol.for(\"nodejs.util.inspect.custom\")]=O.toString,O[Symbol.toStringTag]=\"Decimal\"),module.exports=e):(n||(n=\"undefined\"!=typeof self&&self&&self.self==self?self:window),t=n.Decimal,e.noConflict=function(){return n.Decimal=t,e},n.Decimal=e),e}(this)\r\n//    bigDec: require('decimal.js')\r\n});\r\n\r\nif((typeof module) !== 'undefined') {\r\n    module.exports = nerdamer;\r\n};"],"names":["nerdamer","imports","_","Parser","bigInt","bigDec","set","precision","Groups","PRIMES","CUSTOM_OPERATORS","Settings","callPeekers","init_primes","exclude","suppress_errors","PARSE2NUMBER","SAFE","IMAGINARY","FUNCTION_MODULES","Math","ALLOW_CHARS","USE_MULTICHARACTER_VARS","POWER_OPERATOR","VALIDATION_REGEX","IMPLIED_MULTIPLICATION_REGEX","ALIASES","POSITIVE_MULTIPLIERS","CACHE","SILENCE_WARNINGS","PRECISION","EXPRESSION_DECP","DEFAULT_DECP","VECTOR","PARENTHESIS","SQRT","ABS","FACTORIAL","DOUBLEFACTORIAL","LONG_PI","LONG_E","PI","E","LOG","LOG10","LOG10_LATEX","MAX_EXP","SCIENTIFIC_MAX_DECIMAL_PLACES","SCIENTIFIC_IGNORE_ZERO_EXPONENTS","roots","i","j","nthpow","pow","N","P","S","EX","FN","PL","CB","CP","CONST_HASH","EXPRESSIONS","VARS","RESERVED","WARNINGS","err","msg","ErrorObj","Error","customError","name","message","this","undefined","error","stack","prototype","Object","create","isReserved","value","indexOf","allSame","arr","last","l","length","equals","warn","push","SHOW_WARNINGS","console","validateName","typ","test","InvalidVariableNameError","scientificToDecimal","num","nsign","sign","abs","parts","String","toLowerCase","split","e","pop","coeff_array","slice","zero","Array","join","dec","isPrime","n","q","floor","sqrt","isNumber","isFraction","isSymbol","multiplier","toDecimal","obj","Symbol","isExpression","Expression","variables","poly","vars","c","add","isNaN","group","prevgroup","previousGroup","power","x","symbols","firstObject","args","sort","separate","symbol","o","expand","insert","key","sym","clone","each","isConstant","fname","isVector","Vector","isMatrix","Matrix","isSet","Set","isNumericSymbol","isArray","isInt","toString","isNegative","lessThan","stringify","inBrackets","str","format","call","arguments","shift","replace","match","index","arg","keys","both","setFunction","params_array","body","parse","functions","mapped_function","params","arrayMin","min","apply","decompose_fn","fn","wrt","as_obj","ax","a","b","t","stripVar","subtract","divide","nround","s","Number","MAX_VALUE","round","hasOwnProperty","even","evenFraction","arrayUnique","item","removeDuplicates","condition","conditionType","seen","temp","reserveNames","remove","indexOrKey","result","splice","block","setting","f","opt","current_setting","retval","arguments2Array","evaluate","convertToVector","vector","elements","generatePrimes","upto","allNumbers","allConstants","isPi","isE","mix","isComposite","isLinear","y","term","multiply","expanded","DivisionByZero","ParseError","UndefinedError","OutOfFunctionDomainError","MaximumIterationsReached","NerdamerTypeError","ParityError","OperatorError","OutOfRangeError","DimensionError","ValueLimitExceededError","NerdamerValueError","SolveError","InfiniteLoopError","UnexpectedTokenError","exceptions","Math2","csc","sin","sec","cos","cot","tan","acsc","asin","asec","acos","acot","atan","erf","exp","diff","h","median","_len","values","_key","half","fromContinued","contd","fractions","whole","continuedFraction","w","absn","ni","done","EPSILON","idx","bigpow","p","Frac","isInteger","den","nthroot","gamma","z","C","g","bigfactorial","times","bigLog","quick","k","r","invert","factorial","is_int","NaN","dfactorial","GCD","map","QGCD","gcd","negate","LCM","factor","ifactors","ifactor","factors","updateHash","sfactor","prime","input","lt","safety","rho","xf","cz","mod","minus","sm","boxfactor","max","d","fib","integer_part","simpson","step","get_value","side","v","dx","xi","num_integrate","tol","maxdepth","adsimp","fa","fm","fb","V0","depth","state","nanEncountered","f1","f2","sl","sr","s2","m","V1","V2","maxDepthCount","integrate","Ci","sum","n2","log","Si","Ei","Infinity","Shi","Chi","cosh","Li","gamma_incomplete","rect","sinc","tri","A","dk","dk0","d0","xk","powb","dk_dec","gte","xn","ld","same_delta","delta","decimal","text","option","useGroup","decp","asHash","wrapCondition","asDecimal","valueOf","frac","exec","negative","quotient","digits","passed","numer","denom","divmod","remainder","operator","Scientific","om","collectSymbols","txt","pg","pwg","E_TO_EXP","charAt","cv","parens","primeFactors","startsWith","substr","isScientific","fromScientific","convert","simple","Fraction","quickConversion","isInfinity","imaginary","bin","preprocessors","names","actions","Slice","upper","lower","start","end","Collection","Token","node","node_type","column","type","OPERATOR","operators","FUNCTION","precedence","MAX_PRECEDENCE","leftAssoc","append","getItems","pretty_print","collection","is_prefix","VARIABLE_OR_LITERAL","UNIT","KEYWORD","classes","complex","prec","re","im","sinh","removeDen","sq","squared","fromArray","concat","infinity","tanh","sech","csch","coth","acosh","asinh","atanh","asech","acsch","acoth","realpart","imagpart","hyp","phi","USE_BIG","atan2","symfunction","greaterThan","trig","isImaginary","getQuadrant","dividedBy","gt","trigh","units","action","prefix","postfix","operation","overloaded","overloadAction","overloadLeftAssoc","vectorFn","brackets","id","is_open","is_close","maps_to","SYMBOLIC_MIN_MAX","symMinMax","_symbol","cf","sigfigs","scientific","pfactor","identity","cbrt","expand_denominator","expand_functions","mat","determinant","cols","rows","transpose","vec1","vec2","dot","cross","tolerance","matrix","M","col_index","col","rationalize","l2","conjugate","theta","toPolarFormArray","original","getDenom","getNum","getval","aval","bval","set1","set2","union","contains","intersection","difference","intersects","is_subset","override","which","with_what","restore","what","extend","force_call","fn_name","callfunction","allowed_args","fn_settings","num_allowed_args","is_array","min_args","max_args","num_args","error_msg","numericArgs","fmodules","fmodule","findFunction","bigConvert","operator_filter_regex","ostr","filter","RegExp","setOperator","postif","getOperator","aliasOperator","getOperators","getBrackets","Node","token","left","right","initConstants","CONSTANTS","peekers","pre_operator","post_operator","pre_function","post_function","tokenize","trim","regex","L","lpos","tokens","scopes","target","open_brackets","has_space","addScope","scope_type","new_scope","goUp","get_operator_str","start_at","substring","chunkify","operator_str","_operators","ch","add_token","at","add_function","set_last_position","position","adjust_column_position","last_token_is_numeric","bracket","pair","prev","nxt","is_operator","toRPN","output","prefixes","collapse","destination","next","previous","next_is_operator","last_on_stack","parseRPN","rpn","substitutions","pi","Q","is_comma","fromSet","ans","parent","fn_args","ret","getter","il","element","subbed","isUnit","forEach","toHTML","indent","tab","repeat","html","tree","location","group1","group2","before","g1","g2","prepare_expression","toObject","expression_string","objectify","isConversion","chunkAtCommas","chunks","rem_brackets","ms","distributeMultiplier","toUnitMultiplier","V","symbol1","symbol2","retnum","retden","is_negative","img","setPower","qa","tw","nn","unwrapPARENS","toLinear","rem","isOne","asbig","numVal","base","img_part","sIsConstant","toExponential","isFinite","rank","testSQRT","absEquals","toTeX","expression_or_obj","decimals","TeX","cdot","narr","next_is_array","next_is_minus","unshift","before_last","remove_redundant_powers","nobj","LaTeX","braces","expr","argSplit","latex","clean","new_num","new_den","getFunction","addPreprocessor","order","shift_cells","PreprocessorError","getPreprocessors","removePreprocessor","subs","aIsSymbol","bIsSymbol","unit","Unit","aneg","bneg","inf","ap","bp","h1","h2","powEQ","v1","v2","aIsComposite","bIsComposite","PN","PNEQ","valEQ","attach","shell","canIterate","bothPL","bIsMatrix","eachElement","row","dimensions","toFixed","bnum","bden","a_pow","a_multiplier","ONN","u","distributeExponent","combine","bm","p1","p2","isSymbolP1","isSymbolP2","toEX","logV","n1","ndiv","ddiv","ps","isMatrixB","isMatrixA","isVectorA","isVectorB","raised","aIsZero","bIsZero","nre","nim","bIsConstant","aIsConstant","bIsInt","multiplyPower","sgn","aa","_a","_b","a1","log_a","b1","c1","neg_num","nr","tn","evenr","evenp","evennp","_result","fct","testPow","isEX","pt","IGNORE_E","comma","percent","assign","function_assign","bool2Symbol","eq","lte","log10","LOG10E","trunc","ceil","getExpression","expression_number","asType","expression","text_","first_arg","buildFunction","Build","build","isPolynomial","isPoly","sub","for_symbol","otype","callback","numerator","denominator","hasFunction","containsFunction","variable","coeff","exponent","removeLeadingZeroes","removeTrailingZeroes","dot_location","zeroes","leadingZeroes","wholes","copy","rounded","next_two","ed","is_neg","isFrac","m_dc","simplify","neg","qcompare","isnegative","lcm","div","unwrapSQRT","all","getNth","root","isToNth","nthPower","nthMultiplier","isSquare","isCube","isSimple","powSimp","powers","mfactors","out_","in_","xt","multivariate","exclude_x","toArray","hasFunc","fn_group","same_pow","a_is_unit_multiplier","find","needle","nargs","isMonomial","isSQRT","check_all","check_symbols","retainSign","isSymbolic","isInverse","properties","keepSign","deep","power_only","is_one","cp","isImgSymbol","keyForGroup","existing","hash","contents","is_parens","sort_fn","expand_symbol","collected","isCombination","opts","qc","fullConversion","nparts","stripSign","cparts","d1","d2","parser","keep","space","LaTeXArray","rowTeX","m_array","v_array","formatFrac","p_array","greek","alpha","beta","epsilon","zeta","eta","iota","kappa","lambda","mu","nu","omnikron","sigma","tau","upsilon","chi","psi","omega","Gamma","Delta","Epsilon","Theta","Lambda","Xi","Pi","Sigma","Phi","Psi","Omega","arccos","ker","limsup","arcsin","deg","lg","ln","Pr","sup","arctan","det","hom","lim","LN","dim","liminf","inverted","formatSubscripts","t_varray","den_map","num_map","num_c","den_c","setBrackets","container","counter","laTex","combine_power","isBracketed","formatP","tp","merge","mn","md","vn","vd","top","bottom","glue","is_pow","square","brace","angle","filterTokens","filtered","next_token","raw_tokens","parse_next","get","items","lw","rl","el","arrayPrefill","val","custom","modulus","eql","toUnitVector","angleFrom","mod1","mod2","product","theta_val","isParallelTo","isAntiparallelTo","isPerpendicularTo","B","magnitude","tex","F","zeroMatrix","raw_values","raw","nc","toRightTriangular","isSingular","augment","np","els","divisor","new_element","ki","imatrix","kp","inverse_elements","nel","nj","canMultiplyFromLeft","sameSize","MM","kj","toVector","newline","to_decimal","row_tex","_union","_intersection","dependencies","_rename","reformat","deps","getProperName","continued_fraction","compileDependencies","dep_string","replacements","components","getArgsDeps","arg_array","supplements","ftext","xports","ftext_complex","cc","ft","ftext_function","bn","f_array","alias","Function","LOG_FNS","Utils","allNumeric","arrayAddSlices","slices","arrayClone","new_array","arrayMax","arrayEqual","arr1","arr2","arrayGetVariables","arraySum","toNumber","clearU","indx","comboSort","combined","na","nb","compare","sym1","sym2","comparison","scope","random","customType","fillHoles","getCoeffs","info","coeffs","getU","importFunctions","isVariableSymbol","knownVariable","nroots","_roots","range","sameSign","stringReplace","from","to","with_str","groups","PARSER","libExports","fndec","convertToLaTeX","convertFromLaTeX","version","add_on","getWarnings","setConstant","constant","getConstant","getCore","getEquation","reserved","asArray","clear","equation_number","keep_EXPRESSIONS_fixed","flush","expressions","asObject","asLaTeX","register","core","parent_obj","visible","numargs","validVarName","varname","supported","numEquations","numExpressions","setVar","getVar","clearVars","load","loader","getVars","updateAPI","linker","replaceFunction","new_num_args","withOperator","htmlTree","addPeeker","removePeeker","BASE","MAX_INT","MAX_INT_ARR","smallToArray","LOG_MAX_INT","Integer","radix","parseValue","parseBase","BigInteger","isSmall","SmallInteger","isPrecise","arrayToSmall","compareAbs","createArray","truncate","l_a","l_b","carry","addAny","addSmall","a_l","b_l","borrow","subtractSmall","multiplyLong","a_i","multiplySmall","shiftLeft","multiplyKaratsuba","ac","bd","abcd","multiplySmallAndArray","divModSmall","divModAny","self","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","check","part","reverse","divMod2","qSign","mSign","isBasicPrime","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","modPow","plus","subtractAny","small","l1","_multiplyBySmall","over","isZero","isPositive","isOdd","compareTo","notEquals","neq","greater","greaterOrEquals","geq","lesserOrEquals","leq","strict","bits","bitLength","logN","isProbablePrime","iterations","randBetween","modInv","lastT","lastR","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","toJSNumber","shiftRight","remQuo","and","or","xor","LOBMASK_I","roughLOB","integerLogarithm","tmp","absBase","charCodeAt","parseInt","charCode","parseBaseFromArray","digit","toBase","out","toBaseString","parseStringValue","decimalPlace","parseNumberValue","toJSON","minusOne","isInstance","low","restricted","module","exports","rounding","modulo","toExpNeg","toExpPos","minE","maxE","crypto","O","D","absoluteValue","constructor","comparedTo","cmp","cosine","sd","J","G","cubeRoot","Z","decimalPlaces","dp","dividedToIntegerBy","divToInt","greaterThanOrEqualTo","hyperbolicCosine","hyperbolicSine","hyperbolicTangent","inverseCosine","isNeg","U","inverseHyperbolicCosine","inverseHyperbolicSine","inverseHyperbolicTangent","inverseSine","inverseTangent","isPos","lessThanOrEqualTo","logarithm","T","naturalExponential","naturalLogarithm","negated","sine","squareRoot","tangent","mul","toBinary","K","toDecimalPlaces","toDP","R","toFraction","toHexadecimal","toHex","toNearest","toOctal","toPower","LN10","toPrecision","toSignificantDigits","toSD","truncated","I","H","$","search","W","X","Y","en","rn","sn","on","un","cn","an","defaults","getRandomValues","randomBytes","hn","dn","pn","gn","wn","Nn","En","yn","Mn","qn","On","Dn","Uint32Array","Fn","An","Sn","Zn","Pn","Rn","Ln","Tn","Un","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","isDecimal","hypot","log2","default","Decimal","define"],"sourceRoot":""}